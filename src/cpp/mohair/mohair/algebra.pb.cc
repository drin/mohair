// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mohair/algebra.proto

#include "mohair/algebra.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace mohair {
PROTOBUF_CONSTEXPR ExecutionStats::ExecutionStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.runtime_)*/ 0

  , /*decltype(_impl_.executed_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionStatsDefaultTypeInternal() {}
  union {
    ExecutionStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionStatsDefaultTypeInternal _ExecutionStats_default_instance_;
PROTOBUF_CONSTEXPR SkyRel::SkyRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.slices_)*/ {}
  ,/* _impl_._slices_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.domain_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.partition_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.execstats_)*/nullptr} {}
struct SkyRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkyRelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkyRelDefaultTypeInternal() {}
  union {
    SkyRel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkyRelDefaultTypeInternal _SkyRel_default_instance_;
PROTOBUF_CONSTEXPR ErrRel::ErrRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.err_msg_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.err_code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ErrRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrRelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrRelDefaultTypeInternal() {}
  union {
    ErrRel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrRelDefaultTypeInternal _ErrRel_default_instance_;
PROTOBUF_CONSTEXPR QueryRel::QueryRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryRelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryRelDefaultTypeInternal() {}
  union {
    QueryRel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryRelDefaultTypeInternal _QueryRel_default_instance_;
PROTOBUF_CONSTEXPR PlanAnchor::PlanAnchor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.anchor_rel_)*/nullptr} {}
struct PlanAnchorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanAnchorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanAnchorDefaultTypeInternal() {}
  union {
    PlanAnchor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanAnchorDefaultTypeInternal _PlanAnchor_default_instance_;
}  // namespace mohair
static ::_pb::Metadata file_level_metadata_mohair_2falgebra_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mohair_2falgebra_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mohair_2falgebra_2eproto = nullptr;
const ::uint32_t TableStruct_mohair_2falgebra_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mohair::ExecutionStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mohair::ExecutionStats, _impl_.executed_),
    PROTOBUF_FIELD_OFFSET(::mohair::ExecutionStats, _impl_.runtime_),
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _impl_.domain_),
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _impl_.partition_),
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _impl_.slices_),
    PROTOBUF_FIELD_OFFSET(::mohair::SkyRel, _impl_.execstats_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mohair::ErrRel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mohair::ErrRel, _impl_.err_msg_),
    PROTOBUF_FIELD_OFFSET(::mohair::ErrRel, _impl_.err_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mohair::QueryRel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mohair::QueryRel, _impl_.query_),
    PROTOBUF_FIELD_OFFSET(::mohair::PlanAnchor, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mohair::PlanAnchor, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mohair::PlanAnchor, _impl_.anchor_rel_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::mohair::ExecutionStats)},
        { 10, 22, -1, sizeof(::mohair::SkyRel)},
        { 26, -1, -1, sizeof(::mohair::ErrRel)},
        { 36, -1, -1, sizeof(::mohair::QueryRel)},
        { 45, 54, -1, sizeof(::mohair::PlanAnchor)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mohair::_ExecutionStats_default_instance_._instance,
    &::mohair::_SkyRel_default_instance_._instance,
    &::mohair::_ErrRel_default_instance_._instance,
    &::mohair::_QueryRel_default_instance_._instance,
    &::mohair::_PlanAnchor_default_instance_._instance,
};
const char descriptor_table_protodef_mohair_2falgebra_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024mohair/algebra.proto\022\006mohair\032\031google/p"
    "rotobuf/any.proto\032\027substrait/algebra.pro"
    "to\"F\n\016ExecutionStats\022\032\n\010executed\030\001 \001(\010R\010"
    "executed\022\030\n\007runtime\030\002 \001(\001R\007runtime\"\214\001\n\006S"
    "kyRel\022\026\n\006domain\030\001 \001(\tR\006domain\022\034\n\tpartiti"
    "on\030\002 \001(\tR\tpartition\022\026\n\006slices\030\003 \003(\rR\006sli"
    "ces\0224\n\texecstats\030\004 \001(\0132\026.mohair.Executio"
    "nStatsR\texecstats\"u\n\006ErrRel\022\027\n\007err_msg\030\001"
    " \001(\tR\006errMsg\0221\n\010err_code\030\002 \001(\0162\026.mohair."
    "ErrRel.ErrTypeR\007errCode\"\037\n\007ErrType\022\024\n\020IN"
    "VALID_MSG_TYPE\020\000\" \n\010QueryRel\022\024\n\005query\030\001 "
    "\001(\014R\005query\";\n\nPlanAnchor\022-\n\nanchor_rel\030\001"
    " \001(\0132\016.substrait.RelR\tanchorRelBR\n\ncom.m"
    "ohairB\014AlgebraProtoP\001\242\002\003MXX\252\002\006Mohair\312\002\006M"
    "ohair\342\002\022Mohair\\GPBMetadata\352\002\006Mohairb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_mohair_2falgebra_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_substrait_2falgebra_2eproto,
};
static ::absl::once_flag descriptor_table_mohair_2falgebra_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mohair_2falgebra_2eproto = {
    false,
    false,
    603,
    descriptor_table_protodef_mohair_2falgebra_2eproto,
    "mohair/algebra.proto",
    &descriptor_table_mohair_2falgebra_2eproto_once,
    descriptor_table_mohair_2falgebra_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_mohair_2falgebra_2eproto::offsets,
    file_level_metadata_mohair_2falgebra_2eproto,
    file_level_enum_descriptors_mohair_2falgebra_2eproto,
    file_level_service_descriptors_mohair_2falgebra_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mohair_2falgebra_2eproto_getter() {
  return &descriptor_table_mohair_2falgebra_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mohair_2falgebra_2eproto(&descriptor_table_mohair_2falgebra_2eproto);
namespace mohair {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrRel_ErrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mohair_2falgebra_2eproto);
  return file_level_enum_descriptors_mohair_2falgebra_2eproto[0];
}
bool ErrRel_ErrType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ErrRel_ErrType ErrRel::INVALID_MSG_TYPE;
constexpr ErrRel_ErrType ErrRel::ErrType_MIN;
constexpr ErrRel_ErrType ErrRel::ErrType_MAX;
constexpr int ErrRel::ErrType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class ExecutionStats::_Internal {
 public:
};

ExecutionStats::ExecutionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.ExecutionStats)
}
ExecutionStats::ExecutionStats(const ExecutionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mohair.ExecutionStats)
}

inline void ExecutionStats::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.runtime_) { 0 }

    , decltype(_impl_.executed_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecutionStats::~ExecutionStats() {
  // @@protoc_insertion_point(destructor:mohair.ExecutionStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecutionStats::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExecutionStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecutionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.ExecutionStats)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.runtime_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.executed_) -
      reinterpret_cast<char*>(&_impl_.runtime_)) + sizeof(_impl_.executed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecutionStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool executed = 1 [json_name = "executed"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double runtime = 2 [json_name = "runtime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.runtime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ExecutionStats::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.ExecutionStats)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool executed = 1 [json_name = "executed"];
  if (this->_internal_executed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_executed(), target);
  }

  // double runtime = 2 [json_name = "runtime"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_runtime = this->_internal_runtime();
  ::uint64_t raw_runtime;
  memcpy(&raw_runtime, &tmp_runtime, sizeof(tmp_runtime));
  if (raw_runtime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_runtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.ExecutionStats)
  return target;
}

::size_t ExecutionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.ExecutionStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double runtime = 2 [json_name = "runtime"];
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_runtime = this->_internal_runtime();
  ::uint64_t raw_runtime;
  memcpy(&raw_runtime, &tmp_runtime, sizeof(tmp_runtime));
  if (raw_runtime != 0) {
    total_size += 9;
  }

  // bool executed = 1 [json_name = "executed"];
  if (this->_internal_executed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecutionStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecutionStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecutionStats::GetClassData() const { return &_class_data_; }


void ExecutionStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecutionStats*>(&to_msg);
  auto& from = static_cast<const ExecutionStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.ExecutionStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_runtime = from._internal_runtime();
  ::uint64_t raw_runtime;
  memcpy(&raw_runtime, &tmp_runtime, sizeof(tmp_runtime));
  if (raw_runtime != 0) {
    _this->_internal_set_runtime(from._internal_runtime());
  }
  if (from._internal_executed() != 0) {
    _this->_internal_set_executed(from._internal_executed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecutionStats::CopyFrom(const ExecutionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.ExecutionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStats::IsInitialized() const {
  return true;
}

void ExecutionStats::InternalSwap(ExecutionStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecutionStats, _impl_.executed_)
      + sizeof(ExecutionStats::_impl_.executed_)
      - PROTOBUF_FIELD_OFFSET(ExecutionStats, _impl_.runtime_)>(
          reinterpret_cast<char*>(&_impl_.runtime_),
          reinterpret_cast<char*>(&other->_impl_.runtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecutionStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mohair_2falgebra_2eproto_getter, &descriptor_table_mohair_2falgebra_2eproto_once,
      file_level_metadata_mohair_2falgebra_2eproto[0]);
}
// ===================================================================

class SkyRel::_Internal {
 public:
  using HasBits = decltype(std::declval<SkyRel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SkyRel, _impl_._has_bits_);
  static const ::mohair::ExecutionStats& execstats(const SkyRel* msg);
  static void set_has_execstats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mohair::ExecutionStats&
SkyRel::_Internal::execstats(const SkyRel* msg) {
  return *msg->_impl_.execstats_;
}
SkyRel::SkyRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.SkyRel)
}
SkyRel::SkyRel(const SkyRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkyRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slices_) { from._impl_.slices_ }
    ,/* _impl_._slices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.domain_) {}

    , decltype(_impl_.partition_) {}

    , decltype(_impl_.execstats_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_domain().empty()) {
    _this->_impl_.domain_.Set(from._internal_domain(), _this->GetArenaForAllocation());
  }
  _impl_.partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.partition_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partition().empty()) {
    _this->_impl_.partition_.Set(from._internal_partition(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.execstats_ = new ::mohair::ExecutionStats(*from._impl_.execstats_);
  }
  // @@protoc_insertion_point(copy_constructor:mohair.SkyRel)
}

inline void SkyRel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.slices_) { arena }
    ,/* _impl_._slices_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.domain_) {}

    , decltype(_impl_.partition_) {}

    , decltype(_impl_.execstats_){nullptr}
  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partition_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.partition_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SkyRel::~SkyRel() {
  // @@protoc_insertion_point(destructor:mohair.SkyRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkyRel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slices_.~RepeatedField();
  _impl_.domain_.Destroy();
  _impl_.partition_.Destroy();
  if (this != internal_default_instance()) delete _impl_.execstats_;
}

void SkyRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkyRel::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.SkyRel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_slices()->Clear();
  _impl_.domain_.ClearToEmpty();
  _impl_.partition_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.execstats_ != nullptr);
    _impl_.execstats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkyRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string domain = 1 [json_name = "domain"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mohair.SkyRel.domain"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string partition = 2 [json_name = "partition"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partition();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mohair.SkyRel.partition"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 slices = 3 [json_name = "slices"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_slices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_slices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .mohair.ExecutionStats execstats = 4 [json_name = "execstats"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_execstats(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SkyRel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.SkyRel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string domain = 1 [json_name = "domain"];
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mohair.SkyRel.domain");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string partition = 2 [json_name = "partition"];
  if (!this->_internal_partition().empty()) {
    const std::string& _s = this->_internal_partition();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mohair.SkyRel.partition");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint32 slices = 3 [json_name = "slices"];
  {
    int byte_size = _impl_._slices_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(3, _internal_slices(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mohair.ExecutionStats execstats = 4 [json_name = "execstats"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::execstats(this),
        _Internal::execstats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.SkyRel)
  return target;
}

::size_t SkyRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.SkyRel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 slices = 3 [json_name = "slices"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_slices())
    ;
    _impl_._slices_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string domain = 1 [json_name = "domain"];
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // string partition = 2 [json_name = "partition"];
  if (!this->_internal_partition().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_partition());
  }

  // .mohair.ExecutionStats execstats = 4 [json_name = "execstats"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.execstats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkyRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkyRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkyRel::GetClassData() const { return &_class_data_; }


void SkyRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkyRel*>(&to_msg);
  auto& from = static_cast<const SkyRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.SkyRel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slices_.MergeFrom(from._impl_.slices_);
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_partition().empty()) {
    _this->_internal_set_partition(from._internal_partition());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_execstats()->::mohair::ExecutionStats::MergeFrom(
        from._internal_execstats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkyRel::CopyFrom(const SkyRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.SkyRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkyRel::IsInitialized() const {
  return true;
}

void SkyRel::InternalSwap(SkyRel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.slices_.InternalSwap(&other->_impl_.slices_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, lhs_arena,
                                       &other->_impl_.domain_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.partition_, lhs_arena,
                                       &other->_impl_.partition_, rhs_arena);
  swap(_impl_.execstats_, other->_impl_.execstats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkyRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mohair_2falgebra_2eproto_getter, &descriptor_table_mohair_2falgebra_2eproto_once,
      file_level_metadata_mohair_2falgebra_2eproto[1]);
}
// ===================================================================

class ErrRel::_Internal {
 public:
};

ErrRel::ErrRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.ErrRel)
}
ErrRel::ErrRel(const ErrRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.err_msg_) {}

    , decltype(_impl_.err_code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.err_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_err_msg().empty()) {
    _this->_impl_.err_msg_.Set(from._internal_err_msg(), _this->GetArenaForAllocation());
  }
  _this->_impl_.err_code_ = from._impl_.err_code_;
  // @@protoc_insertion_point(copy_constructor:mohair.ErrRel)
}

inline void ErrRel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.err_msg_) {}

    , decltype(_impl_.err_code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.err_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.err_msg_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrRel::~ErrRel() {
  // @@protoc_insertion_point(destructor:mohair.ErrRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrRel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.err_msg_.Destroy();
}

void ErrRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrRel::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.ErrRel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.err_msg_.ClearToEmpty();
  _impl_.err_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string err_msg = 1 [json_name = "errMsg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_err_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "mohair.ErrRel.err_msg"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .mohair.ErrRel.ErrType err_code = 2 [json_name = "errCode"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_err_code(static_cast<::mohair::ErrRel_ErrType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ErrRel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.ErrRel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string err_msg = 1 [json_name = "errMsg"];
  if (!this->_internal_err_msg().empty()) {
    const std::string& _s = this->_internal_err_msg();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "mohair.ErrRel.err_msg");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mohair.ErrRel.ErrType err_code = 2 [json_name = "errCode"];
  if (this->_internal_err_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_err_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.ErrRel)
  return target;
}

::size_t ErrRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.ErrRel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string err_msg = 1 [json_name = "errMsg"];
  if (!this->_internal_err_msg().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_err_msg());
  }

  // .mohair.ErrRel.ErrType err_code = 2 [json_name = "errCode"];
  if (this->_internal_err_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_err_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrRel::GetClassData() const { return &_class_data_; }


void ErrRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrRel*>(&to_msg);
  auto& from = static_cast<const ErrRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.ErrRel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_err_msg().empty()) {
    _this->_internal_set_err_msg(from._internal_err_msg());
  }
  if (from._internal_err_code() != 0) {
    _this->_internal_set_err_code(from._internal_err_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrRel::CopyFrom(const ErrRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.ErrRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrRel::IsInitialized() const {
  return true;
}

void ErrRel::InternalSwap(ErrRel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.err_msg_, lhs_arena,
                                       &other->_impl_.err_msg_, rhs_arena);
  swap(_impl_.err_code_, other->_impl_.err_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mohair_2falgebra_2eproto_getter, &descriptor_table_mohair_2falgebra_2eproto_once,
      file_level_metadata_mohair_2falgebra_2eproto[2]);
}
// ===================================================================

class QueryRel::_Internal {
 public:
};

QueryRel::QueryRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.QueryRel)
}
QueryRel::QueryRel(const QueryRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    _this->_impl_.query_.Set(from._internal_query(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:mohair.QueryRel)
}

inline void QueryRel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.query_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.query_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryRel::~QueryRel() {
  // @@protoc_insertion_point(destructor:mohair.QueryRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryRel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.query_.Destroy();
}

void QueryRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryRel::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.QueryRel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes query = 1 [json_name = "query"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryRel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.QueryRel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes query = 1 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    const std::string& _s = this->_internal_query();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.QueryRel)
  return target;
}

::size_t QueryRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.QueryRel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes query = 1 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_query());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryRel::GetClassData() const { return &_class_data_; }


void QueryRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryRel*>(&to_msg);
  auto& from = static_cast<const QueryRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.QueryRel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryRel::CopyFrom(const QueryRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.QueryRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRel::IsInitialized() const {
  return true;
}

void QueryRel::InternalSwap(QueryRel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, lhs_arena,
                                       &other->_impl_.query_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mohair_2falgebra_2eproto_getter, &descriptor_table_mohair_2falgebra_2eproto_once,
      file_level_metadata_mohair_2falgebra_2eproto[3]);
}
// ===================================================================

class PlanAnchor::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanAnchor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlanAnchor, _impl_._has_bits_);
  static const ::substrait::Rel& anchor_rel(const PlanAnchor* msg);
  static void set_has_anchor_rel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::substrait::Rel&
PlanAnchor::_Internal::anchor_rel(const PlanAnchor* msg) {
  return *msg->_impl_.anchor_rel_;
}
void PlanAnchor::clear_anchor_rel() {
  if (_impl_.anchor_rel_ != nullptr) _impl_.anchor_rel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PlanAnchor::PlanAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.PlanAnchor)
}
PlanAnchor::PlanAnchor(const PlanAnchor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlanAnchor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchor_rel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.anchor_rel_ = new ::substrait::Rel(*from._impl_.anchor_rel_);
  }
  // @@protoc_insertion_point(copy_constructor:mohair.PlanAnchor)
}

inline void PlanAnchor::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.anchor_rel_){nullptr}
  };
}

PlanAnchor::~PlanAnchor() {
  // @@protoc_insertion_point(destructor:mohair.PlanAnchor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanAnchor::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.anchor_rel_;
}

void PlanAnchor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.PlanAnchor)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.anchor_rel_ != nullptr);
    _impl_.anchor_rel_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanAnchor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Rel anchor_rel = 1 [json_name = "anchorRel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_rel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlanAnchor::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.PlanAnchor)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Rel anchor_rel = 1 [json_name = "anchorRel"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::anchor_rel(this),
        _Internal::anchor_rel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.PlanAnchor)
  return target;
}

::size_t PlanAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.PlanAnchor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Rel anchor_rel = 1 [json_name = "anchorRel"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchor_rel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanAnchor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlanAnchor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanAnchor::GetClassData() const { return &_class_data_; }


void PlanAnchor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlanAnchor*>(&to_msg);
  auto& from = static_cast<const PlanAnchor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.PlanAnchor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_anchor_rel()->::substrait::Rel::MergeFrom(
        from._internal_anchor_rel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanAnchor::CopyFrom(const PlanAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.PlanAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanAnchor::IsInitialized() const {
  return true;
}

void PlanAnchor::InternalSwap(PlanAnchor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.anchor_rel_, other->_impl_.anchor_rel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanAnchor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mohair_2falgebra_2eproto_getter, &descriptor_table_mohair_2falgebra_2eproto_once,
      file_level_metadata_mohair_2falgebra_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mohair
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mohair::ExecutionStats*
Arena::CreateMaybeMessage< ::mohair::ExecutionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mohair::ExecutionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::mohair::SkyRel*
Arena::CreateMaybeMessage< ::mohair::SkyRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mohair::SkyRel >(arena);
}
template<> PROTOBUF_NOINLINE ::mohair::ErrRel*
Arena::CreateMaybeMessage< ::mohair::ErrRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mohair::ErrRel >(arena);
}
template<> PROTOBUF_NOINLINE ::mohair::QueryRel*
Arena::CreateMaybeMessage< ::mohair::QueryRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mohair::QueryRel >(arena);
}
template<> PROTOBUF_NOINLINE ::mohair::PlanAnchor*
Arena::CreateMaybeMessage< ::mohair::PlanAnchor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mohair::PlanAnchor >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
