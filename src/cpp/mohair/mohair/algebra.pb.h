// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mohair/algebra.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mohair_2falgebra_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mohair_2falgebra_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "../substrait/algebra.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mohair_2falgebra_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mohair_2falgebra_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_mohair_2falgebra_2eproto;
namespace mohair {
class ErrRel;
struct ErrRelDefaultTypeInternal;
extern ErrRelDefaultTypeInternal _ErrRel_default_instance_;
class ExecutionStats;
struct ExecutionStatsDefaultTypeInternal;
extern ExecutionStatsDefaultTypeInternal _ExecutionStats_default_instance_;
class PlanAnchor;
struct PlanAnchorDefaultTypeInternal;
extern PlanAnchorDefaultTypeInternal _PlanAnchor_default_instance_;
class QueryRel;
struct QueryRelDefaultTypeInternal;
extern QueryRelDefaultTypeInternal _QueryRel_default_instance_;
class SkyRel;
struct SkyRelDefaultTypeInternal;
extern SkyRelDefaultTypeInternal _SkyRel_default_instance_;
}  // namespace mohair
PROTOBUF_NAMESPACE_OPEN
template <>
::mohair::ErrRel* Arena::CreateMaybeMessage<::mohair::ErrRel>(Arena*);
template <>
::mohair::ExecutionStats* Arena::CreateMaybeMessage<::mohair::ExecutionStats>(Arena*);
template <>
::mohair::PlanAnchor* Arena::CreateMaybeMessage<::mohair::PlanAnchor>(Arena*);
template <>
::mohair::QueryRel* Arena::CreateMaybeMessage<::mohair::QueryRel>(Arena*);
template <>
::mohair::SkyRel* Arena::CreateMaybeMessage<::mohair::SkyRel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace mohair {
enum ErrRel_ErrType : int {
  ErrRel_ErrType_INVALID_MSG_TYPE = 0,
  ErrRel_ErrType_ErrRel_ErrType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrRel_ErrType_ErrRel_ErrType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ErrRel_ErrType_IsValid(int value);
constexpr ErrRel_ErrType ErrRel_ErrType_ErrType_MIN = static_cast<ErrRel_ErrType>(0);
constexpr ErrRel_ErrType ErrRel_ErrType_ErrType_MAX = static_cast<ErrRel_ErrType>(0);
constexpr int ErrRel_ErrType_ErrType_ARRAYSIZE = 0 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ErrRel_ErrType_descriptor();
template <typename T>
const std::string& ErrRel_ErrType_Name(T value) {
  static_assert(std::is_same<T, ErrRel_ErrType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrType_Name().");
  return ErrRel_ErrType_Name(static_cast<ErrRel_ErrType>(value));
}
template <>
inline const std::string& ErrRel_ErrType_Name(ErrRel_ErrType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ErrRel_ErrType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool ErrRel_ErrType_Parse(absl::string_view name, ErrRel_ErrType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrRel_ErrType>(
      ErrRel_ErrType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ExecutionStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mohair.ExecutionStats) */ {
 public:
  inline ExecutionStats() : ExecutionStats(nullptr) {}
  ~ExecutionStats() override;
  explicit PROTOBUF_CONSTEXPR ExecutionStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecutionStats(const ExecutionStats& from);
  ExecutionStats(ExecutionStats&& from) noexcept
    : ExecutionStats() {
    *this = ::std::move(from);
  }

  inline ExecutionStats& operator=(const ExecutionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionStats& operator=(ExecutionStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecutionStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecutionStats* internal_default_instance() {
    return reinterpret_cast<const ExecutionStats*>(
               &_ExecutionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExecutionStats& a, ExecutionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecutionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecutionStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecutionStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecutionStats& from) {
    ExecutionStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mohair.ExecutionStats";
  }
  protected:
  explicit ExecutionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeFieldNumber = 2,
    kExecutedFieldNumber = 1,
  };
  // double runtime = 2 [json_name = "runtime"];
  void clear_runtime() ;
  double runtime() const;
  void set_runtime(double value);

  private:
  double _internal_runtime() const;
  void _internal_set_runtime(double value);

  public:
  // bool executed = 1 [json_name = "executed"];
  void clear_executed() ;
  bool executed() const;
  void set_executed(bool value);

  private:
  bool _internal_executed() const;
  void _internal_set_executed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mohair.ExecutionStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double runtime_;
    bool executed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2falgebra_2eproto;
};// -------------------------------------------------------------------

class SkyRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mohair.SkyRel) */ {
 public:
  inline SkyRel() : SkyRel(nullptr) {}
  ~SkyRel() override;
  explicit PROTOBUF_CONSTEXPR SkyRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SkyRel(const SkyRel& from);
  SkyRel(SkyRel&& from) noexcept
    : SkyRel() {
    *this = ::std::move(from);
  }

  inline SkyRel& operator=(const SkyRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkyRel& operator=(SkyRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkyRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkyRel* internal_default_instance() {
    return reinterpret_cast<const SkyRel*>(
               &_SkyRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SkyRel& a, SkyRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SkyRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkyRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkyRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SkyRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SkyRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SkyRel& from) {
    SkyRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SkyRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mohair.SkyRel";
  }
  protected:
  explicit SkyRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 3,
    kDomainFieldNumber = 1,
    kPartitionFieldNumber = 2,
    kExecstatsFieldNumber = 4,
  };
  // repeated uint32 slices = 3 [json_name = "slices"];
  int slices_size() const;
  private:
  int _internal_slices_size() const;

  public:
  void clear_slices() ;
  ::uint32_t slices(int index) const;
  void set_slices(int index, ::uint32_t value);
  void add_slices(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& slices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_slices();

  private:
  ::uint32_t _internal_slices(int index) const;
  void _internal_add_slices(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_slices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_slices();

  public:
  // string domain = 1 [json_name = "domain"];
  void clear_domain() ;
  const std::string& domain() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* ptr);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // string partition = 2 [json_name = "partition"];
  void clear_partition() ;
  const std::string& partition() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_partition(Arg_&& arg, Args_... args);
  std::string* mutable_partition();
  PROTOBUF_NODISCARD std::string* release_partition();
  void set_allocated_partition(std::string* ptr);

  private:
  const std::string& _internal_partition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition(
      const std::string& value);
  std::string* _internal_mutable_partition();

  public:
  // .mohair.ExecutionStats execstats = 4 [json_name = "execstats"];
  bool has_execstats() const;
  void clear_execstats() ;
  const ::mohair::ExecutionStats& execstats() const;
  PROTOBUF_NODISCARD ::mohair::ExecutionStats* release_execstats();
  ::mohair::ExecutionStats* mutable_execstats();
  void set_allocated_execstats(::mohair::ExecutionStats* execstats);
  private:
  const ::mohair::ExecutionStats& _internal_execstats() const;
  ::mohair::ExecutionStats* _internal_mutable_execstats();
  public:
  void unsafe_arena_set_allocated_execstats(
      ::mohair::ExecutionStats* execstats);
  ::mohair::ExecutionStats* unsafe_arena_release_execstats();
  // @@protoc_insertion_point(class_scope:mohair.SkyRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> slices_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _slices_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_;
    ::mohair::ExecutionStats* execstats_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ErrRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mohair.ErrRel) */ {
 public:
  inline ErrRel() : ErrRel(nullptr) {}
  ~ErrRel() override;
  explicit PROTOBUF_CONSTEXPR ErrRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ErrRel(const ErrRel& from);
  ErrRel(ErrRel&& from) noexcept
    : ErrRel() {
    *this = ::std::move(from);
  }

  inline ErrRel& operator=(const ErrRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ErrRel& operator=(ErrRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ErrRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ErrRel* internal_default_instance() {
    return reinterpret_cast<const ErrRel*>(
               &_ErrRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ErrRel& a, ErrRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ErrRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ErrRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ErrRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ErrRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ErrRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ErrRel& from) {
    ErrRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mohair.ErrRel";
  }
  protected:
  explicit ErrRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ErrType = ErrRel_ErrType;
  static constexpr ErrType INVALID_MSG_TYPE = ErrRel_ErrType_INVALID_MSG_TYPE;
  static inline bool ErrType_IsValid(int value) {
    return ErrRel_ErrType_IsValid(value);
  }
  static constexpr ErrType ErrType_MIN = ErrRel_ErrType_ErrType_MIN;
  static constexpr ErrType ErrType_MAX = ErrRel_ErrType_ErrType_MAX;
  static constexpr int ErrType_ARRAYSIZE = ErrRel_ErrType_ErrType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrType_descriptor() {
    return ErrRel_ErrType_descriptor();
  }
  template <typename T>
  static inline const std::string& ErrType_Name(T value) {
    return ErrRel_ErrType_Name(value);
  }
  static inline bool ErrType_Parse(absl::string_view name, ErrType* value) {
    return ErrRel_ErrType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // string err_msg = 1 [json_name = "errMsg"];
  void clear_err_msg() ;
  const std::string& err_msg() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_err_msg(Arg_&& arg, Args_... args);
  std::string* mutable_err_msg();
  PROTOBUF_NODISCARD std::string* release_err_msg();
  void set_allocated_err_msg(std::string* ptr);

  private:
  const std::string& _internal_err_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_err_msg(
      const std::string& value);
  std::string* _internal_mutable_err_msg();

  public:
  // .mohair.ErrRel.ErrType err_code = 2 [json_name = "errCode"];
  void clear_err_code() ;
  ::mohair::ErrRel_ErrType err_code() const;
  void set_err_code(::mohair::ErrRel_ErrType value);

  private:
  ::mohair::ErrRel_ErrType _internal_err_code() const;
  void _internal_set_err_code(::mohair::ErrRel_ErrType value);

  public:
  // @@protoc_insertion_point(class_scope:mohair.ErrRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_msg_;
    int err_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2falgebra_2eproto;
};// -------------------------------------------------------------------

class QueryRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mohair.QueryRel) */ {
 public:
  inline QueryRel() : QueryRel(nullptr) {}
  ~QueryRel() override;
  explicit PROTOBUF_CONSTEXPR QueryRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRel(const QueryRel& from);
  QueryRel(QueryRel&& from) noexcept
    : QueryRel() {
    *this = ::std::move(from);
  }

  inline QueryRel& operator=(const QueryRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRel& operator=(QueryRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRel* internal_default_instance() {
    return reinterpret_cast<const QueryRel*>(
               &_QueryRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryRel& a, QueryRel& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRel& from) {
    QueryRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mohair.QueryRel";
  }
  protected:
  explicit QueryRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
  };
  // bytes query = 1 [json_name = "query"];
  void clear_query() ;
  const std::string& query() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* ptr);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // @@protoc_insertion_point(class_scope:mohair.QueryRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2falgebra_2eproto;
};// -------------------------------------------------------------------

class PlanAnchor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mohair.PlanAnchor) */ {
 public:
  inline PlanAnchor() : PlanAnchor(nullptr) {}
  ~PlanAnchor() override;
  explicit PROTOBUF_CONSTEXPR PlanAnchor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanAnchor(const PlanAnchor& from);
  PlanAnchor(PlanAnchor&& from) noexcept
    : PlanAnchor() {
    *this = ::std::move(from);
  }

  inline PlanAnchor& operator=(const PlanAnchor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanAnchor& operator=(PlanAnchor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanAnchor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanAnchor* internal_default_instance() {
    return reinterpret_cast<const PlanAnchor*>(
               &_PlanAnchor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlanAnchor& a, PlanAnchor& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanAnchor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanAnchor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanAnchor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanAnchor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanAnchor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanAnchor& from) {
    PlanAnchor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanAnchor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mohair.PlanAnchor";
  }
  protected:
  explicit PlanAnchor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnchorRelFieldNumber = 1,
  };
  // .substrait.Rel anchor_rel = 1 [json_name = "anchorRel"];
  bool has_anchor_rel() const;
  void clear_anchor_rel() ;
  const ::substrait::Rel& anchor_rel() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_anchor_rel();
  ::substrait::Rel* mutable_anchor_rel();
  void set_allocated_anchor_rel(::substrait::Rel* anchor_rel);
  private:
  const ::substrait::Rel& _internal_anchor_rel() const;
  ::substrait::Rel* _internal_mutable_anchor_rel();
  public:
  void unsafe_arena_set_allocated_anchor_rel(
      ::substrait::Rel* anchor_rel);
  ::substrait::Rel* unsafe_arena_release_anchor_rel();
  // @@protoc_insertion_point(class_scope:mohair.PlanAnchor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Rel* anchor_rel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2falgebra_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ExecutionStats

// bool executed = 1 [json_name = "executed"];
inline void ExecutionStats::clear_executed() {
  _impl_.executed_ = false;
}
inline bool ExecutionStats::executed() const {
  // @@protoc_insertion_point(field_get:mohair.ExecutionStats.executed)
  return _internal_executed();
}
inline void ExecutionStats::set_executed(bool value) {
  _internal_set_executed(value);
  // @@protoc_insertion_point(field_set:mohair.ExecutionStats.executed)
}
inline bool ExecutionStats::_internal_executed() const {
  return _impl_.executed_;
}
inline void ExecutionStats::_internal_set_executed(bool value) {
  ;
  _impl_.executed_ = value;
}

// double runtime = 2 [json_name = "runtime"];
inline void ExecutionStats::clear_runtime() {
  _impl_.runtime_ = 0;
}
inline double ExecutionStats::runtime() const {
  // @@protoc_insertion_point(field_get:mohair.ExecutionStats.runtime)
  return _internal_runtime();
}
inline void ExecutionStats::set_runtime(double value) {
  _internal_set_runtime(value);
  // @@protoc_insertion_point(field_set:mohair.ExecutionStats.runtime)
}
inline double ExecutionStats::_internal_runtime() const {
  return _impl_.runtime_;
}
inline void ExecutionStats::_internal_set_runtime(double value) {
  ;
  _impl_.runtime_ = value;
}

// -------------------------------------------------------------------

// SkyRel

// string domain = 1 [json_name = "domain"];
inline void SkyRel::clear_domain() {
  _impl_.domain_.ClearToEmpty();
}
inline const std::string& SkyRel::domain() const {
  // @@protoc_insertion_point(field_get:mohair.SkyRel.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SkyRel::set_domain(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mohair.SkyRel.domain)
}
inline std::string* SkyRel::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:mohair.SkyRel.domain)
  return _s;
}
inline const std::string& SkyRel::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void SkyRel::_internal_set_domain(const std::string& value) {
  ;


  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* SkyRel::_internal_mutable_domain() {
  ;
  return _impl_.domain_.Mutable( GetArenaForAllocation());
}
inline std::string* SkyRel::release_domain() {
  // @@protoc_insertion_point(field_release:mohair.SkyRel.domain)
  return _impl_.domain_.Release();
}
inline void SkyRel::set_allocated_domain(std::string* value) {
  _impl_.domain_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domain_.IsDefault()) {
          _impl_.domain_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mohair.SkyRel.domain)
}

// string partition = 2 [json_name = "partition"];
inline void SkyRel::clear_partition() {
  _impl_.partition_.ClearToEmpty();
}
inline const std::string& SkyRel::partition() const {
  // @@protoc_insertion_point(field_get:mohair.SkyRel.partition)
  return _internal_partition();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SkyRel::set_partition(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.partition_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mohair.SkyRel.partition)
}
inline std::string* SkyRel::mutable_partition() {
  std::string* _s = _internal_mutable_partition();
  // @@protoc_insertion_point(field_mutable:mohair.SkyRel.partition)
  return _s;
}
inline const std::string& SkyRel::_internal_partition() const {
  return _impl_.partition_.Get();
}
inline void SkyRel::_internal_set_partition(const std::string& value) {
  ;


  _impl_.partition_.Set(value, GetArenaForAllocation());
}
inline std::string* SkyRel::_internal_mutable_partition() {
  ;
  return _impl_.partition_.Mutable( GetArenaForAllocation());
}
inline std::string* SkyRel::release_partition() {
  // @@protoc_insertion_point(field_release:mohair.SkyRel.partition)
  return _impl_.partition_.Release();
}
inline void SkyRel::set_allocated_partition(std::string* value) {
  _impl_.partition_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.partition_.IsDefault()) {
          _impl_.partition_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mohair.SkyRel.partition)
}

// repeated uint32 slices = 3 [json_name = "slices"];
inline int SkyRel::_internal_slices_size() const {
  return _impl_.slices_.size();
}
inline int SkyRel::slices_size() const {
  return _internal_slices_size();
}
inline void SkyRel::clear_slices() {
  _internal_mutable_slices()->Clear();
}
inline ::uint32_t SkyRel::slices(int index) const {
  // @@protoc_insertion_point(field_get:mohair.SkyRel.slices)
  return _internal_slices(index);
}
inline void SkyRel::set_slices(int index, ::uint32_t value) {
  _internal_mutable_slices()->Set(index, value);
  // @@protoc_insertion_point(field_set:mohair.SkyRel.slices)
}
inline void SkyRel::add_slices(::uint32_t value) {
  _internal_add_slices(value);
  // @@protoc_insertion_point(field_add:mohair.SkyRel.slices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SkyRel::slices() const {
  // @@protoc_insertion_point(field_list:mohair.SkyRel.slices)
  return _internal_slices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SkyRel::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:mohair.SkyRel.slices)
  return _internal_mutable_slices();
}

inline ::uint32_t SkyRel::_internal_slices(int index) const {
  return _internal_slices().Get(index);
}
inline void SkyRel::_internal_add_slices(::uint32_t value) {
  _internal_mutable_slices()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SkyRel::_internal_slices() const {
  return _impl_.slices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SkyRel::_internal_mutable_slices() {
  return &_impl_.slices_;
}

// .mohair.ExecutionStats execstats = 4 [json_name = "execstats"];
inline bool SkyRel::has_execstats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.execstats_ != nullptr);
  return value;
}
inline void SkyRel::clear_execstats() {
  if (_impl_.execstats_ != nullptr) _impl_.execstats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mohair::ExecutionStats& SkyRel::_internal_execstats() const {
  const ::mohair::ExecutionStats* p = _impl_.execstats_;
  return p != nullptr ? *p : reinterpret_cast<const ::mohair::ExecutionStats&>(
      ::mohair::_ExecutionStats_default_instance_);
}
inline const ::mohair::ExecutionStats& SkyRel::execstats() const {
  // @@protoc_insertion_point(field_get:mohair.SkyRel.execstats)
  return _internal_execstats();
}
inline void SkyRel::unsafe_arena_set_allocated_execstats(
    ::mohair::ExecutionStats* execstats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.execstats_);
  }
  _impl_.execstats_ = execstats;
  if (execstats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mohair.SkyRel.execstats)
}
inline ::mohair::ExecutionStats* SkyRel::release_execstats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mohair::ExecutionStats* temp = _impl_.execstats_;
  _impl_.execstats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::mohair::ExecutionStats* SkyRel::unsafe_arena_release_execstats() {
  // @@protoc_insertion_point(field_release:mohair.SkyRel.execstats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mohair::ExecutionStats* temp = _impl_.execstats_;
  _impl_.execstats_ = nullptr;
  return temp;
}
inline ::mohair::ExecutionStats* SkyRel::_internal_mutable_execstats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.execstats_ == nullptr) {
    auto* p = CreateMaybeMessage<::mohair::ExecutionStats>(GetArenaForAllocation());
    _impl_.execstats_ = p;
  }
  return _impl_.execstats_;
}
inline ::mohair::ExecutionStats* SkyRel::mutable_execstats() {
  ::mohair::ExecutionStats* _msg = _internal_mutable_execstats();
  // @@protoc_insertion_point(field_mutable:mohair.SkyRel.execstats)
  return _msg;
}
inline void SkyRel::set_allocated_execstats(::mohair::ExecutionStats* execstats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.execstats_;
  }
  if (execstats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(execstats);
    if (message_arena != submessage_arena) {
      execstats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execstats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.execstats_ = execstats;
  // @@protoc_insertion_point(field_set_allocated:mohair.SkyRel.execstats)
}

// -------------------------------------------------------------------

// ErrRel

// string err_msg = 1 [json_name = "errMsg"];
inline void ErrRel::clear_err_msg() {
  _impl_.err_msg_.ClearToEmpty();
}
inline const std::string& ErrRel::err_msg() const {
  // @@protoc_insertion_point(field_get:mohair.ErrRel.err_msg)
  return _internal_err_msg();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ErrRel::set_err_msg(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.err_msg_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mohair.ErrRel.err_msg)
}
inline std::string* ErrRel::mutable_err_msg() {
  std::string* _s = _internal_mutable_err_msg();
  // @@protoc_insertion_point(field_mutable:mohair.ErrRel.err_msg)
  return _s;
}
inline const std::string& ErrRel::_internal_err_msg() const {
  return _impl_.err_msg_.Get();
}
inline void ErrRel::_internal_set_err_msg(const std::string& value) {
  ;


  _impl_.err_msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ErrRel::_internal_mutable_err_msg() {
  ;
  return _impl_.err_msg_.Mutable( GetArenaForAllocation());
}
inline std::string* ErrRel::release_err_msg() {
  // @@protoc_insertion_point(field_release:mohair.ErrRel.err_msg)
  return _impl_.err_msg_.Release();
}
inline void ErrRel::set_allocated_err_msg(std::string* value) {
  _impl_.err_msg_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.err_msg_.IsDefault()) {
          _impl_.err_msg_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mohair.ErrRel.err_msg)
}

// .mohair.ErrRel.ErrType err_code = 2 [json_name = "errCode"];
inline void ErrRel::clear_err_code() {
  _impl_.err_code_ = 0;
}
inline ::mohair::ErrRel_ErrType ErrRel::err_code() const {
  // @@protoc_insertion_point(field_get:mohair.ErrRel.err_code)
  return _internal_err_code();
}
inline void ErrRel::set_err_code(::mohair::ErrRel_ErrType value) {
   _internal_set_err_code(value);
  // @@protoc_insertion_point(field_set:mohair.ErrRel.err_code)
}
inline ::mohair::ErrRel_ErrType ErrRel::_internal_err_code() const {
  return static_cast<::mohair::ErrRel_ErrType>(_impl_.err_code_);
}
inline void ErrRel::_internal_set_err_code(::mohair::ErrRel_ErrType value) {
  ;
  _impl_.err_code_ = value;
}

// -------------------------------------------------------------------

// QueryRel

// bytes query = 1 [json_name = "query"];
inline void QueryRel::clear_query() {
  _impl_.query_.ClearToEmpty();
}
inline const std::string& QueryRel::query() const {
  // @@protoc_insertion_point(field_get:mohair.QueryRel.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryRel::set_query(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.query_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mohair.QueryRel.query)
}
inline std::string* QueryRel::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:mohair.QueryRel.query)
  return _s;
}
inline const std::string& QueryRel::_internal_query() const {
  return _impl_.query_.Get();
}
inline void QueryRel::_internal_set_query(const std::string& value) {
  ;


  _impl_.query_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryRel::_internal_mutable_query() {
  ;
  return _impl_.query_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryRel::release_query() {
  // @@protoc_insertion_point(field_release:mohair.QueryRel.query)
  return _impl_.query_.Release();
}
inline void QueryRel::set_allocated_query(std::string* value) {
  _impl_.query_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_.IsDefault()) {
          _impl_.query_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mohair.QueryRel.query)
}

// -------------------------------------------------------------------

// PlanAnchor

// .substrait.Rel anchor_rel = 1 [json_name = "anchorRel"];
inline bool PlanAnchor::has_anchor_rel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.anchor_rel_ != nullptr);
  return value;
}
inline const ::substrait::Rel& PlanAnchor::_internal_anchor_rel() const {
  const ::substrait::Rel* p = _impl_.anchor_rel_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& PlanAnchor::anchor_rel() const {
  // @@protoc_insertion_point(field_get:mohair.PlanAnchor.anchor_rel)
  return _internal_anchor_rel();
}
inline void PlanAnchor::unsafe_arena_set_allocated_anchor_rel(
    ::substrait::Rel* anchor_rel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_rel_);
  }
  _impl_.anchor_rel_ = anchor_rel;
  if (anchor_rel) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mohair.PlanAnchor.anchor_rel)
}
inline ::substrait::Rel* PlanAnchor::release_anchor_rel() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.anchor_rel_;
  _impl_.anchor_rel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* PlanAnchor::unsafe_arena_release_anchor_rel() {
  // @@protoc_insertion_point(field_release:mohair.PlanAnchor.anchor_rel)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.anchor_rel_;
  _impl_.anchor_rel_ = nullptr;
  return temp;
}
inline ::substrait::Rel* PlanAnchor::_internal_mutable_anchor_rel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.anchor_rel_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.anchor_rel_ = p;
  }
  return _impl_.anchor_rel_;
}
inline ::substrait::Rel* PlanAnchor::mutable_anchor_rel() {
  ::substrait::Rel* _msg = _internal_mutable_anchor_rel();
  // @@protoc_insertion_point(field_mutable:mohair.PlanAnchor.anchor_rel)
  return _msg;
}
inline void PlanAnchor::set_allocated_anchor_rel(::substrait::Rel* anchor_rel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.anchor_rel_);
  }
  if (anchor_rel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(anchor_rel));
    if (message_arena != submessage_arena) {
      anchor_rel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anchor_rel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.anchor_rel_ = anchor_rel;
  // @@protoc_insertion_point(field_set_allocated:mohair.PlanAnchor.anchor_rel)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mohair


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::mohair::ErrRel_ErrType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mohair::ErrRel_ErrType>() {
  return ::mohair::ErrRel_ErrType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mohair_2falgebra_2eproto_2epb_2eh
