// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/algebra.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2falgebra_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2falgebra_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "substrait/extensions/extensions.pb.h"
#include "substrait/type.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_substrait_2falgebra_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2falgebra_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_substrait_2falgebra_2eproto;
namespace substrait {
class AggregateFunction;
struct AggregateFunctionDefaultTypeInternal;
extern AggregateFunctionDefaultTypeInternal _AggregateFunction_default_instance_;
class AggregateFunction_ReferenceRel;
struct AggregateFunction_ReferenceRelDefaultTypeInternal;
extern AggregateFunction_ReferenceRelDefaultTypeInternal _AggregateFunction_ReferenceRel_default_instance_;
class AggregateRel;
struct AggregateRelDefaultTypeInternal;
extern AggregateRelDefaultTypeInternal _AggregateRel_default_instance_;
class AggregateRel_Grouping;
struct AggregateRel_GroupingDefaultTypeInternal;
extern AggregateRel_GroupingDefaultTypeInternal _AggregateRel_Grouping_default_instance_;
class AggregateRel_Measure;
struct AggregateRel_MeasureDefaultTypeInternal;
extern AggregateRel_MeasureDefaultTypeInternal _AggregateRel_Measure_default_instance_;
class CrossRel;
struct CrossRelDefaultTypeInternal;
extern CrossRelDefaultTypeInternal _CrossRel_default_instance_;
class DdlRel;
struct DdlRelDefaultTypeInternal;
extern DdlRelDefaultTypeInternal _DdlRel_default_instance_;
class ExchangeRel;
struct ExchangeRelDefaultTypeInternal;
extern ExchangeRelDefaultTypeInternal _ExchangeRel_default_instance_;
class ExchangeRel_Broadcast;
struct ExchangeRel_BroadcastDefaultTypeInternal;
extern ExchangeRel_BroadcastDefaultTypeInternal _ExchangeRel_Broadcast_default_instance_;
class ExchangeRel_ExchangeTarget;
struct ExchangeRel_ExchangeTargetDefaultTypeInternal;
extern ExchangeRel_ExchangeTargetDefaultTypeInternal _ExchangeRel_ExchangeTarget_default_instance_;
class ExchangeRel_MultiBucketExpression;
struct ExchangeRel_MultiBucketExpressionDefaultTypeInternal;
extern ExchangeRel_MultiBucketExpressionDefaultTypeInternal _ExchangeRel_MultiBucketExpression_default_instance_;
class ExchangeRel_RoundRobin;
struct ExchangeRel_RoundRobinDefaultTypeInternal;
extern ExchangeRel_RoundRobinDefaultTypeInternal _ExchangeRel_RoundRobin_default_instance_;
class ExchangeRel_ScatterFields;
struct ExchangeRel_ScatterFieldsDefaultTypeInternal;
extern ExchangeRel_ScatterFieldsDefaultTypeInternal _ExchangeRel_ScatterFields_default_instance_;
class ExchangeRel_SingleBucketExpression;
struct ExchangeRel_SingleBucketExpressionDefaultTypeInternal;
extern ExchangeRel_SingleBucketExpressionDefaultTypeInternal _ExchangeRel_SingleBucketExpression_default_instance_;
class Expression;
struct ExpressionDefaultTypeInternal;
extern ExpressionDefaultTypeInternal _Expression_default_instance_;
class Expression_Cast;
struct Expression_CastDefaultTypeInternal;
extern Expression_CastDefaultTypeInternal _Expression_Cast_default_instance_;
class Expression_EmbeddedFunction;
struct Expression_EmbeddedFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunctionDefaultTypeInternal _Expression_EmbeddedFunction_default_instance_;
class Expression_EmbeddedFunction_PythonPickleFunction;
struct Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunction_PythonPickleFunctionDefaultTypeInternal _Expression_EmbeddedFunction_PythonPickleFunction_default_instance_;
class Expression_EmbeddedFunction_WebAssemblyFunction;
struct Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal;
extern Expression_EmbeddedFunction_WebAssemblyFunctionDefaultTypeInternal _Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_;
class Expression_Enum;
struct Expression_EnumDefaultTypeInternal;
extern Expression_EnumDefaultTypeInternal _Expression_Enum_default_instance_;
class Expression_Enum_Empty;
struct Expression_Enum_EmptyDefaultTypeInternal;
extern Expression_Enum_EmptyDefaultTypeInternal _Expression_Enum_Empty_default_instance_;
class Expression_FieldReference;
struct Expression_FieldReferenceDefaultTypeInternal;
extern Expression_FieldReferenceDefaultTypeInternal _Expression_FieldReference_default_instance_;
class Expression_FieldReference_OuterReference;
struct Expression_FieldReference_OuterReferenceDefaultTypeInternal;
extern Expression_FieldReference_OuterReferenceDefaultTypeInternal _Expression_FieldReference_OuterReference_default_instance_;
class Expression_FieldReference_RootReference;
struct Expression_FieldReference_RootReferenceDefaultTypeInternal;
extern Expression_FieldReference_RootReferenceDefaultTypeInternal _Expression_FieldReference_RootReference_default_instance_;
class Expression_IfThen;
struct Expression_IfThenDefaultTypeInternal;
extern Expression_IfThenDefaultTypeInternal _Expression_IfThen_default_instance_;
class Expression_IfThen_IfClause;
struct Expression_IfThen_IfClauseDefaultTypeInternal;
extern Expression_IfThen_IfClauseDefaultTypeInternal _Expression_IfThen_IfClause_default_instance_;
class Expression_Literal;
struct Expression_LiteralDefaultTypeInternal;
extern Expression_LiteralDefaultTypeInternal _Expression_Literal_default_instance_;
class Expression_Literal_Decimal;
struct Expression_Literal_DecimalDefaultTypeInternal;
extern Expression_Literal_DecimalDefaultTypeInternal _Expression_Literal_Decimal_default_instance_;
class Expression_Literal_IntervalDayToSecond;
struct Expression_Literal_IntervalDayToSecondDefaultTypeInternal;
extern Expression_Literal_IntervalDayToSecondDefaultTypeInternal _Expression_Literal_IntervalDayToSecond_default_instance_;
class Expression_Literal_IntervalYearToMonth;
struct Expression_Literal_IntervalYearToMonthDefaultTypeInternal;
extern Expression_Literal_IntervalYearToMonthDefaultTypeInternal _Expression_Literal_IntervalYearToMonth_default_instance_;
class Expression_Literal_List;
struct Expression_Literal_ListDefaultTypeInternal;
extern Expression_Literal_ListDefaultTypeInternal _Expression_Literal_List_default_instance_;
class Expression_Literal_Map;
struct Expression_Literal_MapDefaultTypeInternal;
extern Expression_Literal_MapDefaultTypeInternal _Expression_Literal_Map_default_instance_;
class Expression_Literal_Map_KeyValue;
struct Expression_Literal_Map_KeyValueDefaultTypeInternal;
extern Expression_Literal_Map_KeyValueDefaultTypeInternal _Expression_Literal_Map_KeyValue_default_instance_;
class Expression_Literal_Struct;
struct Expression_Literal_StructDefaultTypeInternal;
extern Expression_Literal_StructDefaultTypeInternal _Expression_Literal_Struct_default_instance_;
class Expression_Literal_UserDefined;
struct Expression_Literal_UserDefinedDefaultTypeInternal;
extern Expression_Literal_UserDefinedDefaultTypeInternal _Expression_Literal_UserDefined_default_instance_;
class Expression_Literal_VarChar;
struct Expression_Literal_VarCharDefaultTypeInternal;
extern Expression_Literal_VarCharDefaultTypeInternal _Expression_Literal_VarChar_default_instance_;
class Expression_MaskExpression;
struct Expression_MaskExpressionDefaultTypeInternal;
extern Expression_MaskExpressionDefaultTypeInternal _Expression_MaskExpression_default_instance_;
class Expression_MaskExpression_ListSelect;
struct Expression_MaskExpression_ListSelectDefaultTypeInternal;
extern Expression_MaskExpression_ListSelectDefaultTypeInternal _Expression_MaskExpression_ListSelect_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem;
struct Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItemDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement;
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItem_ListElementDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_;
class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice;
struct Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal;
extern Expression_MaskExpression_ListSelect_ListSelectItem_ListSliceDefaultTypeInternal _Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_;
class Expression_MaskExpression_MapSelect;
struct Expression_MaskExpression_MapSelectDefaultTypeInternal;
extern Expression_MaskExpression_MapSelectDefaultTypeInternal _Expression_MaskExpression_MapSelect_default_instance_;
class Expression_MaskExpression_MapSelect_MapKey;
struct Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal;
extern Expression_MaskExpression_MapSelect_MapKeyDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKey_default_instance_;
class Expression_MaskExpression_MapSelect_MapKeyExpression;
struct Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal;
extern Expression_MaskExpression_MapSelect_MapKeyExpressionDefaultTypeInternal _Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_;
class Expression_MaskExpression_Select;
struct Expression_MaskExpression_SelectDefaultTypeInternal;
extern Expression_MaskExpression_SelectDefaultTypeInternal _Expression_MaskExpression_Select_default_instance_;
class Expression_MaskExpression_StructItem;
struct Expression_MaskExpression_StructItemDefaultTypeInternal;
extern Expression_MaskExpression_StructItemDefaultTypeInternal _Expression_MaskExpression_StructItem_default_instance_;
class Expression_MaskExpression_StructSelect;
struct Expression_MaskExpression_StructSelectDefaultTypeInternal;
extern Expression_MaskExpression_StructSelectDefaultTypeInternal _Expression_MaskExpression_StructSelect_default_instance_;
class Expression_MultiOrList;
struct Expression_MultiOrListDefaultTypeInternal;
extern Expression_MultiOrListDefaultTypeInternal _Expression_MultiOrList_default_instance_;
class Expression_MultiOrList_Record;
struct Expression_MultiOrList_RecordDefaultTypeInternal;
extern Expression_MultiOrList_RecordDefaultTypeInternal _Expression_MultiOrList_Record_default_instance_;
class Expression_Nested;
struct Expression_NestedDefaultTypeInternal;
extern Expression_NestedDefaultTypeInternal _Expression_Nested_default_instance_;
class Expression_Nested_List;
struct Expression_Nested_ListDefaultTypeInternal;
extern Expression_Nested_ListDefaultTypeInternal _Expression_Nested_List_default_instance_;
class Expression_Nested_Map;
struct Expression_Nested_MapDefaultTypeInternal;
extern Expression_Nested_MapDefaultTypeInternal _Expression_Nested_Map_default_instance_;
class Expression_Nested_Map_KeyValue;
struct Expression_Nested_Map_KeyValueDefaultTypeInternal;
extern Expression_Nested_Map_KeyValueDefaultTypeInternal _Expression_Nested_Map_KeyValue_default_instance_;
class Expression_Nested_Struct;
struct Expression_Nested_StructDefaultTypeInternal;
extern Expression_Nested_StructDefaultTypeInternal _Expression_Nested_Struct_default_instance_;
class Expression_ReferenceSegment;
struct Expression_ReferenceSegmentDefaultTypeInternal;
extern Expression_ReferenceSegmentDefaultTypeInternal _Expression_ReferenceSegment_default_instance_;
class Expression_ReferenceSegment_ListElement;
struct Expression_ReferenceSegment_ListElementDefaultTypeInternal;
extern Expression_ReferenceSegment_ListElementDefaultTypeInternal _Expression_ReferenceSegment_ListElement_default_instance_;
class Expression_ReferenceSegment_MapKey;
struct Expression_ReferenceSegment_MapKeyDefaultTypeInternal;
extern Expression_ReferenceSegment_MapKeyDefaultTypeInternal _Expression_ReferenceSegment_MapKey_default_instance_;
class Expression_ReferenceSegment_StructField;
struct Expression_ReferenceSegment_StructFieldDefaultTypeInternal;
extern Expression_ReferenceSegment_StructFieldDefaultTypeInternal _Expression_ReferenceSegment_StructField_default_instance_;
class Expression_ScalarFunction;
struct Expression_ScalarFunctionDefaultTypeInternal;
extern Expression_ScalarFunctionDefaultTypeInternal _Expression_ScalarFunction_default_instance_;
class Expression_SingularOrList;
struct Expression_SingularOrListDefaultTypeInternal;
extern Expression_SingularOrListDefaultTypeInternal _Expression_SingularOrList_default_instance_;
class Expression_Subquery;
struct Expression_SubqueryDefaultTypeInternal;
extern Expression_SubqueryDefaultTypeInternal _Expression_Subquery_default_instance_;
class Expression_Subquery_InPredicate;
struct Expression_Subquery_InPredicateDefaultTypeInternal;
extern Expression_Subquery_InPredicateDefaultTypeInternal _Expression_Subquery_InPredicate_default_instance_;
class Expression_Subquery_Scalar;
struct Expression_Subquery_ScalarDefaultTypeInternal;
extern Expression_Subquery_ScalarDefaultTypeInternal _Expression_Subquery_Scalar_default_instance_;
class Expression_Subquery_SetComparison;
struct Expression_Subquery_SetComparisonDefaultTypeInternal;
extern Expression_Subquery_SetComparisonDefaultTypeInternal _Expression_Subquery_SetComparison_default_instance_;
class Expression_Subquery_SetPredicate;
struct Expression_Subquery_SetPredicateDefaultTypeInternal;
extern Expression_Subquery_SetPredicateDefaultTypeInternal _Expression_Subquery_SetPredicate_default_instance_;
class Expression_SwitchExpression;
struct Expression_SwitchExpressionDefaultTypeInternal;
extern Expression_SwitchExpressionDefaultTypeInternal _Expression_SwitchExpression_default_instance_;
class Expression_SwitchExpression_IfValue;
struct Expression_SwitchExpression_IfValueDefaultTypeInternal;
extern Expression_SwitchExpression_IfValueDefaultTypeInternal _Expression_SwitchExpression_IfValue_default_instance_;
class Expression_WindowFunction;
struct Expression_WindowFunctionDefaultTypeInternal;
extern Expression_WindowFunctionDefaultTypeInternal _Expression_WindowFunction_default_instance_;
class Expression_WindowFunction_Bound;
struct Expression_WindowFunction_BoundDefaultTypeInternal;
extern Expression_WindowFunction_BoundDefaultTypeInternal _Expression_WindowFunction_Bound_default_instance_;
class Expression_WindowFunction_Bound_CurrentRow;
struct Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal;
extern Expression_WindowFunction_Bound_CurrentRowDefaultTypeInternal _Expression_WindowFunction_Bound_CurrentRow_default_instance_;
class Expression_WindowFunction_Bound_Following;
struct Expression_WindowFunction_Bound_FollowingDefaultTypeInternal;
extern Expression_WindowFunction_Bound_FollowingDefaultTypeInternal _Expression_WindowFunction_Bound_Following_default_instance_;
class Expression_WindowFunction_Bound_Preceding;
struct Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal;
extern Expression_WindowFunction_Bound_PrecedingDefaultTypeInternal _Expression_WindowFunction_Bound_Preceding_default_instance_;
class Expression_WindowFunction_Bound_Unbounded;
struct Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal;
extern Expression_WindowFunction_Bound_UnboundedDefaultTypeInternal _Expression_WindowFunction_Bound_Unbounded_default_instance_;
class ExtensionLeafRel;
struct ExtensionLeafRelDefaultTypeInternal;
extern ExtensionLeafRelDefaultTypeInternal _ExtensionLeafRel_default_instance_;
class ExtensionMultiRel;
struct ExtensionMultiRelDefaultTypeInternal;
extern ExtensionMultiRelDefaultTypeInternal _ExtensionMultiRel_default_instance_;
class ExtensionObject;
struct ExtensionObjectDefaultTypeInternal;
extern ExtensionObjectDefaultTypeInternal _ExtensionObject_default_instance_;
class ExtensionSingleRel;
struct ExtensionSingleRelDefaultTypeInternal;
extern ExtensionSingleRelDefaultTypeInternal _ExtensionSingleRel_default_instance_;
class FetchRel;
struct FetchRelDefaultTypeInternal;
extern FetchRelDefaultTypeInternal _FetchRel_default_instance_;
class FilterRel;
struct FilterRelDefaultTypeInternal;
extern FilterRelDefaultTypeInternal _FilterRel_default_instance_;
class FunctionArgument;
struct FunctionArgumentDefaultTypeInternal;
extern FunctionArgumentDefaultTypeInternal _FunctionArgument_default_instance_;
class FunctionOption;
struct FunctionOptionDefaultTypeInternal;
extern FunctionOptionDefaultTypeInternal _FunctionOption_default_instance_;
class HashJoinRel;
struct HashJoinRelDefaultTypeInternal;
extern HashJoinRelDefaultTypeInternal _HashJoinRel_default_instance_;
class JoinRel;
struct JoinRelDefaultTypeInternal;
extern JoinRelDefaultTypeInternal _JoinRel_default_instance_;
class MergeJoinRel;
struct MergeJoinRelDefaultTypeInternal;
extern MergeJoinRelDefaultTypeInternal _MergeJoinRel_default_instance_;
class NamedObjectWrite;
struct NamedObjectWriteDefaultTypeInternal;
extern NamedObjectWriteDefaultTypeInternal _NamedObjectWrite_default_instance_;
class ProjectRel;
struct ProjectRelDefaultTypeInternal;
extern ProjectRelDefaultTypeInternal _ProjectRel_default_instance_;
class ReadRel;
struct ReadRelDefaultTypeInternal;
extern ReadRelDefaultTypeInternal _ReadRel_default_instance_;
class ReadRel_ExtensionTable;
struct ReadRel_ExtensionTableDefaultTypeInternal;
extern ReadRel_ExtensionTableDefaultTypeInternal _ReadRel_ExtensionTable_default_instance_;
class ReadRel_LocalFiles;
struct ReadRel_LocalFilesDefaultTypeInternal;
extern ReadRel_LocalFilesDefaultTypeInternal _ReadRel_LocalFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles;
struct ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFilesDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions;
struct ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_ArrowReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions;
struct ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_DwrfReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions;
struct ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_OrcReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_;
class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions;
struct ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal;
extern ReadRel_LocalFiles_FileOrFiles_ParquetReadOptionsDefaultTypeInternal _ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_;
class ReadRel_NamedTable;
struct ReadRel_NamedTableDefaultTypeInternal;
extern ReadRel_NamedTableDefaultTypeInternal _ReadRel_NamedTable_default_instance_;
class ReadRel_VirtualTable;
struct ReadRel_VirtualTableDefaultTypeInternal;
extern ReadRel_VirtualTableDefaultTypeInternal _ReadRel_VirtualTable_default_instance_;
class Rel;
struct RelDefaultTypeInternal;
extern RelDefaultTypeInternal _Rel_default_instance_;
class RelCommon;
struct RelCommonDefaultTypeInternal;
extern RelCommonDefaultTypeInternal _RelCommon_default_instance_;
class RelCommon_Direct;
struct RelCommon_DirectDefaultTypeInternal;
extern RelCommon_DirectDefaultTypeInternal _RelCommon_Direct_default_instance_;
class RelCommon_Emit;
struct RelCommon_EmitDefaultTypeInternal;
extern RelCommon_EmitDefaultTypeInternal _RelCommon_Emit_default_instance_;
class RelCommon_Hint;
struct RelCommon_HintDefaultTypeInternal;
extern RelCommon_HintDefaultTypeInternal _RelCommon_Hint_default_instance_;
class RelCommon_Hint_RuntimeConstraint;
struct RelCommon_Hint_RuntimeConstraintDefaultTypeInternal;
extern RelCommon_Hint_RuntimeConstraintDefaultTypeInternal _RelCommon_Hint_RuntimeConstraint_default_instance_;
class RelCommon_Hint_Stats;
struct RelCommon_Hint_StatsDefaultTypeInternal;
extern RelCommon_Hint_StatsDefaultTypeInternal _RelCommon_Hint_Stats_default_instance_;
class RelRoot;
struct RelRootDefaultTypeInternal;
extern RelRootDefaultTypeInternal _RelRoot_default_instance_;
class SetRel;
struct SetRelDefaultTypeInternal;
extern SetRelDefaultTypeInternal _SetRel_default_instance_;
class SortField;
struct SortFieldDefaultTypeInternal;
extern SortFieldDefaultTypeInternal _SortField_default_instance_;
class SortRel;
struct SortRelDefaultTypeInternal;
extern SortRelDefaultTypeInternal _SortRel_default_instance_;
class WriteRel;
struct WriteRelDefaultTypeInternal;
extern WriteRelDefaultTypeInternal _WriteRel_default_instance_;
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template <>
::substrait::AggregateFunction* Arena::CreateMaybeMessage<::substrait::AggregateFunction>(Arena*);
template <>
::substrait::AggregateFunction_ReferenceRel* Arena::CreateMaybeMessage<::substrait::AggregateFunction_ReferenceRel>(Arena*);
template <>
::substrait::AggregateRel* Arena::CreateMaybeMessage<::substrait::AggregateRel>(Arena*);
template <>
::substrait::AggregateRel_Grouping* Arena::CreateMaybeMessage<::substrait::AggregateRel_Grouping>(Arena*);
template <>
::substrait::AggregateRel_Measure* Arena::CreateMaybeMessage<::substrait::AggregateRel_Measure>(Arena*);
template <>
::substrait::CrossRel* Arena::CreateMaybeMessage<::substrait::CrossRel>(Arena*);
template <>
::substrait::DdlRel* Arena::CreateMaybeMessage<::substrait::DdlRel>(Arena*);
template <>
::substrait::ExchangeRel* Arena::CreateMaybeMessage<::substrait::ExchangeRel>(Arena*);
template <>
::substrait::ExchangeRel_Broadcast* Arena::CreateMaybeMessage<::substrait::ExchangeRel_Broadcast>(Arena*);
template <>
::substrait::ExchangeRel_ExchangeTarget* Arena::CreateMaybeMessage<::substrait::ExchangeRel_ExchangeTarget>(Arena*);
template <>
::substrait::ExchangeRel_MultiBucketExpression* Arena::CreateMaybeMessage<::substrait::ExchangeRel_MultiBucketExpression>(Arena*);
template <>
::substrait::ExchangeRel_RoundRobin* Arena::CreateMaybeMessage<::substrait::ExchangeRel_RoundRobin>(Arena*);
template <>
::substrait::ExchangeRel_ScatterFields* Arena::CreateMaybeMessage<::substrait::ExchangeRel_ScatterFields>(Arena*);
template <>
::substrait::ExchangeRel_SingleBucketExpression* Arena::CreateMaybeMessage<::substrait::ExchangeRel_SingleBucketExpression>(Arena*);
template <>
::substrait::Expression* Arena::CreateMaybeMessage<::substrait::Expression>(Arena*);
template <>
::substrait::Expression_Cast* Arena::CreateMaybeMessage<::substrait::Expression_Cast>(Arena*);
template <>
::substrait::Expression_EmbeddedFunction* Arena::CreateMaybeMessage<::substrait::Expression_EmbeddedFunction>(Arena*);
template <>
::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Arena::CreateMaybeMessage<::substrait::Expression_EmbeddedFunction_PythonPickleFunction>(Arena*);
template <>
::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Arena::CreateMaybeMessage<::substrait::Expression_EmbeddedFunction_WebAssemblyFunction>(Arena*);
template <>
::substrait::Expression_Enum* Arena::CreateMaybeMessage<::substrait::Expression_Enum>(Arena*);
template <>
::substrait::Expression_Enum_Empty* Arena::CreateMaybeMessage<::substrait::Expression_Enum_Empty>(Arena*);
template <>
::substrait::Expression_FieldReference* Arena::CreateMaybeMessage<::substrait::Expression_FieldReference>(Arena*);
template <>
::substrait::Expression_FieldReference_OuterReference* Arena::CreateMaybeMessage<::substrait::Expression_FieldReference_OuterReference>(Arena*);
template <>
::substrait::Expression_FieldReference_RootReference* Arena::CreateMaybeMessage<::substrait::Expression_FieldReference_RootReference>(Arena*);
template <>
::substrait::Expression_IfThen* Arena::CreateMaybeMessage<::substrait::Expression_IfThen>(Arena*);
template <>
::substrait::Expression_IfThen_IfClause* Arena::CreateMaybeMessage<::substrait::Expression_IfThen_IfClause>(Arena*);
template <>
::substrait::Expression_Literal* Arena::CreateMaybeMessage<::substrait::Expression_Literal>(Arena*);
template <>
::substrait::Expression_Literal_Decimal* Arena::CreateMaybeMessage<::substrait::Expression_Literal_Decimal>(Arena*);
template <>
::substrait::Expression_Literal_IntervalDayToSecond* Arena::CreateMaybeMessage<::substrait::Expression_Literal_IntervalDayToSecond>(Arena*);
template <>
::substrait::Expression_Literal_IntervalYearToMonth* Arena::CreateMaybeMessage<::substrait::Expression_Literal_IntervalYearToMonth>(Arena*);
template <>
::substrait::Expression_Literal_List* Arena::CreateMaybeMessage<::substrait::Expression_Literal_List>(Arena*);
template <>
::substrait::Expression_Literal_Map* Arena::CreateMaybeMessage<::substrait::Expression_Literal_Map>(Arena*);
template <>
::substrait::Expression_Literal_Map_KeyValue* Arena::CreateMaybeMessage<::substrait::Expression_Literal_Map_KeyValue>(Arena*);
template <>
::substrait::Expression_Literal_Struct* Arena::CreateMaybeMessage<::substrait::Expression_Literal_Struct>(Arena*);
template <>
::substrait::Expression_Literal_UserDefined* Arena::CreateMaybeMessage<::substrait::Expression_Literal_UserDefined>(Arena*);
template <>
::substrait::Expression_Literal_VarChar* Arena::CreateMaybeMessage<::substrait::Expression_Literal_VarChar>(Arena*);
template <>
::substrait::Expression_MaskExpression* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression>(Arena*);
template <>
::substrait::Expression_MaskExpression_ListSelect* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_ListSelect>(Arena*);
template <>
::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem>(Arena*);
template <>
::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(Arena*);
template <>
::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(Arena*);
template <>
::substrait::Expression_MaskExpression_MapSelect* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_MapSelect>(Arena*);
template <>
::substrait::Expression_MaskExpression_MapSelect_MapKey* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_MapSelect_MapKey>(Arena*);
template <>
::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression>(Arena*);
template <>
::substrait::Expression_MaskExpression_Select* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_Select>(Arena*);
template <>
::substrait::Expression_MaskExpression_StructItem* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_StructItem>(Arena*);
template <>
::substrait::Expression_MaskExpression_StructSelect* Arena::CreateMaybeMessage<::substrait::Expression_MaskExpression_StructSelect>(Arena*);
template <>
::substrait::Expression_MultiOrList* Arena::CreateMaybeMessage<::substrait::Expression_MultiOrList>(Arena*);
template <>
::substrait::Expression_MultiOrList_Record* Arena::CreateMaybeMessage<::substrait::Expression_MultiOrList_Record>(Arena*);
template <>
::substrait::Expression_Nested* Arena::CreateMaybeMessage<::substrait::Expression_Nested>(Arena*);
template <>
::substrait::Expression_Nested_List* Arena::CreateMaybeMessage<::substrait::Expression_Nested_List>(Arena*);
template <>
::substrait::Expression_Nested_Map* Arena::CreateMaybeMessage<::substrait::Expression_Nested_Map>(Arena*);
template <>
::substrait::Expression_Nested_Map_KeyValue* Arena::CreateMaybeMessage<::substrait::Expression_Nested_Map_KeyValue>(Arena*);
template <>
::substrait::Expression_Nested_Struct* Arena::CreateMaybeMessage<::substrait::Expression_Nested_Struct>(Arena*);
template <>
::substrait::Expression_ReferenceSegment* Arena::CreateMaybeMessage<::substrait::Expression_ReferenceSegment>(Arena*);
template <>
::substrait::Expression_ReferenceSegment_ListElement* Arena::CreateMaybeMessage<::substrait::Expression_ReferenceSegment_ListElement>(Arena*);
template <>
::substrait::Expression_ReferenceSegment_MapKey* Arena::CreateMaybeMessage<::substrait::Expression_ReferenceSegment_MapKey>(Arena*);
template <>
::substrait::Expression_ReferenceSegment_StructField* Arena::CreateMaybeMessage<::substrait::Expression_ReferenceSegment_StructField>(Arena*);
template <>
::substrait::Expression_ScalarFunction* Arena::CreateMaybeMessage<::substrait::Expression_ScalarFunction>(Arena*);
template <>
::substrait::Expression_SingularOrList* Arena::CreateMaybeMessage<::substrait::Expression_SingularOrList>(Arena*);
template <>
::substrait::Expression_Subquery* Arena::CreateMaybeMessage<::substrait::Expression_Subquery>(Arena*);
template <>
::substrait::Expression_Subquery_InPredicate* Arena::CreateMaybeMessage<::substrait::Expression_Subquery_InPredicate>(Arena*);
template <>
::substrait::Expression_Subquery_Scalar* Arena::CreateMaybeMessage<::substrait::Expression_Subquery_Scalar>(Arena*);
template <>
::substrait::Expression_Subquery_SetComparison* Arena::CreateMaybeMessage<::substrait::Expression_Subquery_SetComparison>(Arena*);
template <>
::substrait::Expression_Subquery_SetPredicate* Arena::CreateMaybeMessage<::substrait::Expression_Subquery_SetPredicate>(Arena*);
template <>
::substrait::Expression_SwitchExpression* Arena::CreateMaybeMessage<::substrait::Expression_SwitchExpression>(Arena*);
template <>
::substrait::Expression_SwitchExpression_IfValue* Arena::CreateMaybeMessage<::substrait::Expression_SwitchExpression_IfValue>(Arena*);
template <>
::substrait::Expression_WindowFunction* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction>(Arena*);
template <>
::substrait::Expression_WindowFunction_Bound* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound>(Arena*);
template <>
::substrait::Expression_WindowFunction_Bound_CurrentRow* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound_CurrentRow>(Arena*);
template <>
::substrait::Expression_WindowFunction_Bound_Following* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound_Following>(Arena*);
template <>
::substrait::Expression_WindowFunction_Bound_Preceding* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound_Preceding>(Arena*);
template <>
::substrait::Expression_WindowFunction_Bound_Unbounded* Arena::CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound_Unbounded>(Arena*);
template <>
::substrait::ExtensionLeafRel* Arena::CreateMaybeMessage<::substrait::ExtensionLeafRel>(Arena*);
template <>
::substrait::ExtensionMultiRel* Arena::CreateMaybeMessage<::substrait::ExtensionMultiRel>(Arena*);
template <>
::substrait::ExtensionObject* Arena::CreateMaybeMessage<::substrait::ExtensionObject>(Arena*);
template <>
::substrait::ExtensionSingleRel* Arena::CreateMaybeMessage<::substrait::ExtensionSingleRel>(Arena*);
template <>
::substrait::FetchRel* Arena::CreateMaybeMessage<::substrait::FetchRel>(Arena*);
template <>
::substrait::FilterRel* Arena::CreateMaybeMessage<::substrait::FilterRel>(Arena*);
template <>
::substrait::FunctionArgument* Arena::CreateMaybeMessage<::substrait::FunctionArgument>(Arena*);
template <>
::substrait::FunctionOption* Arena::CreateMaybeMessage<::substrait::FunctionOption>(Arena*);
template <>
::substrait::HashJoinRel* Arena::CreateMaybeMessage<::substrait::HashJoinRel>(Arena*);
template <>
::substrait::JoinRel* Arena::CreateMaybeMessage<::substrait::JoinRel>(Arena*);
template <>
::substrait::MergeJoinRel* Arena::CreateMaybeMessage<::substrait::MergeJoinRel>(Arena*);
template <>
::substrait::NamedObjectWrite* Arena::CreateMaybeMessage<::substrait::NamedObjectWrite>(Arena*);
template <>
::substrait::ProjectRel* Arena::CreateMaybeMessage<::substrait::ProjectRel>(Arena*);
template <>
::substrait::ReadRel* Arena::CreateMaybeMessage<::substrait::ReadRel>(Arena*);
template <>
::substrait::ReadRel_ExtensionTable* Arena::CreateMaybeMessage<::substrait::ReadRel_ExtensionTable>(Arena*);
template <>
::substrait::ReadRel_LocalFiles* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles>(Arena*);
template <>
::substrait::ReadRel_LocalFiles_FileOrFiles* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles>(Arena*);
template <>
::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(Arena*);
template <>
::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(Arena*);
template <>
::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(Arena*);
template <>
::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* Arena::CreateMaybeMessage<::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(Arena*);
template <>
::substrait::ReadRel_NamedTable* Arena::CreateMaybeMessage<::substrait::ReadRel_NamedTable>(Arena*);
template <>
::substrait::ReadRel_VirtualTable* Arena::CreateMaybeMessage<::substrait::ReadRel_VirtualTable>(Arena*);
template <>
::substrait::Rel* Arena::CreateMaybeMessage<::substrait::Rel>(Arena*);
template <>
::substrait::RelCommon* Arena::CreateMaybeMessage<::substrait::RelCommon>(Arena*);
template <>
::substrait::RelCommon_Direct* Arena::CreateMaybeMessage<::substrait::RelCommon_Direct>(Arena*);
template <>
::substrait::RelCommon_Emit* Arena::CreateMaybeMessage<::substrait::RelCommon_Emit>(Arena*);
template <>
::substrait::RelCommon_Hint* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint>(Arena*);
template <>
::substrait::RelCommon_Hint_RuntimeConstraint* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint_RuntimeConstraint>(Arena*);
template <>
::substrait::RelCommon_Hint_Stats* Arena::CreateMaybeMessage<::substrait::RelCommon_Hint_Stats>(Arena*);
template <>
::substrait::RelRoot* Arena::CreateMaybeMessage<::substrait::RelRoot>(Arena*);
template <>
::substrait::SetRel* Arena::CreateMaybeMessage<::substrait::SetRel>(Arena*);
template <>
::substrait::SortField* Arena::CreateMaybeMessage<::substrait::SortField>(Arena*);
template <>
::substrait::SortRel* Arena::CreateMaybeMessage<::substrait::SortRel>(Arena*);
template <>
::substrait::WriteRel* Arena::CreateMaybeMessage<::substrait::WriteRel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace substrait {
enum JoinRel_JoinType : int {
  JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  JoinRel_JoinType_JOIN_TYPE_INNER = 1,
  JoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  JoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  JoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  JoinRel_JoinType_JOIN_TYPE_SEMI = 5,
  JoinRel_JoinType_JOIN_TYPE_ANTI = 6,
  JoinRel_JoinType_JOIN_TYPE_SINGLE = 7,
  JoinRel_JoinType_JoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JoinRel_JoinType_JoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JoinRel_JoinType_IsValid(int value);
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MIN = static_cast<JoinRel_JoinType>(0);
constexpr JoinRel_JoinType JoinRel_JoinType_JoinType_MAX = static_cast<JoinRel_JoinType>(7);
constexpr int JoinRel_JoinType_JoinType_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
JoinRel_JoinType_descriptor();
template <typename T>
const std::string& JoinRel_JoinType_Name(T value) {
  static_assert(std::is_same<T, JoinRel_JoinType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JoinType_Name().");
  return JoinRel_JoinType_Name(static_cast<JoinRel_JoinType>(value));
}
template <>
inline const std::string& JoinRel_JoinType_Name(JoinRel_JoinType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<JoinRel_JoinType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool JoinRel_JoinType_Parse(absl::string_view name, JoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinRel_JoinType>(
      JoinRel_JoinType_descriptor(), name, value);
}
enum SetRel_SetOp : int {
  SetRel_SetOp_SET_OP_UNSPECIFIED = 0,
  SetRel_SetOp_SET_OP_MINUS_PRIMARY = 1,
  SetRel_SetOp_SET_OP_MINUS_MULTISET = 2,
  SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY = 3,
  SetRel_SetOp_SET_OP_INTERSECTION_MULTISET = 4,
  SetRel_SetOp_SET_OP_UNION_DISTINCT = 5,
  SetRel_SetOp_SET_OP_UNION_ALL = 6,
  SetRel_SetOp_SetRel_SetOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SetRel_SetOp_SetRel_SetOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SetRel_SetOp_IsValid(int value);
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MIN = static_cast<SetRel_SetOp>(0);
constexpr SetRel_SetOp SetRel_SetOp_SetOp_MAX = static_cast<SetRel_SetOp>(6);
constexpr int SetRel_SetOp_SetOp_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SetRel_SetOp_descriptor();
template <typename T>
const std::string& SetRel_SetOp_Name(T value) {
  static_assert(std::is_same<T, SetRel_SetOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SetOp_Name().");
  return SetRel_SetOp_Name(static_cast<SetRel_SetOp>(value));
}
template <>
inline const std::string& SetRel_SetOp_Name(SetRel_SetOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SetRel_SetOp_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool SetRel_SetOp_Parse(absl::string_view name, SetRel_SetOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetRel_SetOp>(
      SetRel_SetOp_descriptor(), name, value);
}
enum DdlRel_DdlObject : int {
  DdlRel_DdlObject_DDL_OBJECT_UNSPECIFIED = 0,
  DdlRel_DdlObject_DDL_OBJECT_TABLE = 1,
  DdlRel_DdlObject_DDL_OBJECT_VIEW = 2,
  DdlRel_DdlObject_DdlRel_DdlObject_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DdlRel_DdlObject_DdlRel_DdlObject_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DdlRel_DdlObject_IsValid(int value);
constexpr DdlRel_DdlObject DdlRel_DdlObject_DdlObject_MIN = static_cast<DdlRel_DdlObject>(0);
constexpr DdlRel_DdlObject DdlRel_DdlObject_DdlObject_MAX = static_cast<DdlRel_DdlObject>(2);
constexpr int DdlRel_DdlObject_DdlObject_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DdlRel_DdlObject_descriptor();
template <typename T>
const std::string& DdlRel_DdlObject_Name(T value) {
  static_assert(std::is_same<T, DdlRel_DdlObject>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DdlObject_Name().");
  return DdlRel_DdlObject_Name(static_cast<DdlRel_DdlObject>(value));
}
template <>
inline const std::string& DdlRel_DdlObject_Name(DdlRel_DdlObject value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DdlRel_DdlObject_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool DdlRel_DdlObject_Parse(absl::string_view name, DdlRel_DdlObject* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DdlRel_DdlObject>(
      DdlRel_DdlObject_descriptor(), name, value);
}
enum DdlRel_DdlOp : int {
  DdlRel_DdlOp_DDL_OP_UNSPECIFIED = 0,
  DdlRel_DdlOp_DDL_OP_CREATE = 1,
  DdlRel_DdlOp_DDL_OP_CREATE_OR_REPLACE = 2,
  DdlRel_DdlOp_DDL_OP_ALTER = 3,
  DdlRel_DdlOp_DDL_OP_DROP = 4,
  DdlRel_DdlOp_DDL_OP_DROP_IF_EXIST = 5,
  DdlRel_DdlOp_DdlRel_DdlOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DdlRel_DdlOp_DdlRel_DdlOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DdlRel_DdlOp_IsValid(int value);
constexpr DdlRel_DdlOp DdlRel_DdlOp_DdlOp_MIN = static_cast<DdlRel_DdlOp>(0);
constexpr DdlRel_DdlOp DdlRel_DdlOp_DdlOp_MAX = static_cast<DdlRel_DdlOp>(5);
constexpr int DdlRel_DdlOp_DdlOp_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
DdlRel_DdlOp_descriptor();
template <typename T>
const std::string& DdlRel_DdlOp_Name(T value) {
  static_assert(std::is_same<T, DdlRel_DdlOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DdlOp_Name().");
  return DdlRel_DdlOp_Name(static_cast<DdlRel_DdlOp>(value));
}
template <>
inline const std::string& DdlRel_DdlOp_Name(DdlRel_DdlOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<DdlRel_DdlOp_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool DdlRel_DdlOp_Parse(absl::string_view name, DdlRel_DdlOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DdlRel_DdlOp>(
      DdlRel_DdlOp_descriptor(), name, value);
}
enum WriteRel_WriteOp : int {
  WriteRel_WriteOp_WRITE_OP_UNSPECIFIED = 0,
  WriteRel_WriteOp_WRITE_OP_INSERT = 1,
  WriteRel_WriteOp_WRITE_OP_DELETE = 2,
  WriteRel_WriteOp_WRITE_OP_UPDATE = 3,
  WriteRel_WriteOp_WRITE_OP_CTAS = 4,
  WriteRel_WriteOp_WriteRel_WriteOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WriteRel_WriteOp_WriteRel_WriteOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WriteRel_WriteOp_IsValid(int value);
constexpr WriteRel_WriteOp WriteRel_WriteOp_WriteOp_MIN = static_cast<WriteRel_WriteOp>(0);
constexpr WriteRel_WriteOp WriteRel_WriteOp_WriteOp_MAX = static_cast<WriteRel_WriteOp>(4);
constexpr int WriteRel_WriteOp_WriteOp_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WriteRel_WriteOp_descriptor();
template <typename T>
const std::string& WriteRel_WriteOp_Name(T value) {
  static_assert(std::is_same<T, WriteRel_WriteOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to WriteOp_Name().");
  return WriteRel_WriteOp_Name(static_cast<WriteRel_WriteOp>(value));
}
template <>
inline const std::string& WriteRel_WriteOp_Name(WriteRel_WriteOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WriteRel_WriteOp_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool WriteRel_WriteOp_Parse(absl::string_view name, WriteRel_WriteOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRel_WriteOp>(
      WriteRel_WriteOp_descriptor(), name, value);
}
enum WriteRel_OutputMode : int {
  WriteRel_OutputMode_OUTPUT_MODE_UNSPECIFIED = 0,
  WriteRel_OutputMode_OUTPUT_MODE_NO_OUTPUT = 1,
  WriteRel_OutputMode_OUTPUT_MODE_MODIFIED_TUPLES = 2,
  WriteRel_OutputMode_WriteRel_OutputMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  WriteRel_OutputMode_WriteRel_OutputMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool WriteRel_OutputMode_IsValid(int value);
constexpr WriteRel_OutputMode WriteRel_OutputMode_OutputMode_MIN = static_cast<WriteRel_OutputMode>(0);
constexpr WriteRel_OutputMode WriteRel_OutputMode_OutputMode_MAX = static_cast<WriteRel_OutputMode>(2);
constexpr int WriteRel_OutputMode_OutputMode_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
WriteRel_OutputMode_descriptor();
template <typename T>
const std::string& WriteRel_OutputMode_Name(T value) {
  static_assert(std::is_same<T, WriteRel_OutputMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OutputMode_Name().");
  return WriteRel_OutputMode_Name(static_cast<WriteRel_OutputMode>(value));
}
template <>
inline const std::string& WriteRel_OutputMode_Name(WriteRel_OutputMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WriteRel_OutputMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool WriteRel_OutputMode_Parse(absl::string_view name, WriteRel_OutputMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WriteRel_OutputMode>(
      WriteRel_OutputMode_descriptor(), name, value);
}
enum HashJoinRel_JoinType : int {
  HashJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  HashJoinRel_JoinType_JOIN_TYPE_INNER = 1,
  HashJoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI = 5,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI = 6,
  HashJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI = 7,
  HashJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI = 8,
  HashJoinRel_JoinType_HashJoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  HashJoinRel_JoinType_HashJoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool HashJoinRel_JoinType_IsValid(int value);
constexpr HashJoinRel_JoinType HashJoinRel_JoinType_JoinType_MIN = static_cast<HashJoinRel_JoinType>(0);
constexpr HashJoinRel_JoinType HashJoinRel_JoinType_JoinType_MAX = static_cast<HashJoinRel_JoinType>(8);
constexpr int HashJoinRel_JoinType_JoinType_ARRAYSIZE = 8 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
HashJoinRel_JoinType_descriptor();
template <typename T>
const std::string& HashJoinRel_JoinType_Name(T value) {
  static_assert(std::is_same<T, HashJoinRel_JoinType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JoinType_Name().");
  return HashJoinRel_JoinType_Name(static_cast<HashJoinRel_JoinType>(value));
}
template <>
inline const std::string& HashJoinRel_JoinType_Name(HashJoinRel_JoinType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<HashJoinRel_JoinType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool HashJoinRel_JoinType_Parse(absl::string_view name, HashJoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HashJoinRel_JoinType>(
      HashJoinRel_JoinType_descriptor(), name, value);
}
enum MergeJoinRel_JoinType : int {
  MergeJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED = 0,
  MergeJoinRel_JoinType_JOIN_TYPE_INNER = 1,
  MergeJoinRel_JoinType_JOIN_TYPE_OUTER = 2,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT = 3,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT = 4,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI = 5,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI = 6,
  MergeJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI = 7,
  MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI = 8,
  MergeJoinRel_JoinType_MergeJoinRel_JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MergeJoinRel_JoinType_MergeJoinRel_JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MergeJoinRel_JoinType_IsValid(int value);
constexpr MergeJoinRel_JoinType MergeJoinRel_JoinType_JoinType_MIN = static_cast<MergeJoinRel_JoinType>(0);
constexpr MergeJoinRel_JoinType MergeJoinRel_JoinType_JoinType_MAX = static_cast<MergeJoinRel_JoinType>(8);
constexpr int MergeJoinRel_JoinType_JoinType_ARRAYSIZE = 8 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MergeJoinRel_JoinType_descriptor();
template <typename T>
const std::string& MergeJoinRel_JoinType_Name(T value) {
  static_assert(std::is_same<T, MergeJoinRel_JoinType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JoinType_Name().");
  return MergeJoinRel_JoinType_Name(static_cast<MergeJoinRel_JoinType>(value));
}
template <>
inline const std::string& MergeJoinRel_JoinType_Name(MergeJoinRel_JoinType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MergeJoinRel_JoinType_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool MergeJoinRel_JoinType_Parse(absl::string_view name, MergeJoinRel_JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MergeJoinRel_JoinType>(
      MergeJoinRel_JoinType_descriptor(), name, value);
}
enum Expression_Cast_FailureBehavior : int {
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_UNSPECIFIED = 0,
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_RETURN_NULL = 1,
  Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_THROW_EXCEPTION = 2,
  Expression_Cast_FailureBehavior_Expression_Cast_FailureBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expression_Cast_FailureBehavior_Expression_Cast_FailureBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expression_Cast_FailureBehavior_IsValid(int value);
constexpr Expression_Cast_FailureBehavior Expression_Cast_FailureBehavior_FailureBehavior_MIN = static_cast<Expression_Cast_FailureBehavior>(0);
constexpr Expression_Cast_FailureBehavior Expression_Cast_FailureBehavior_FailureBehavior_MAX = static_cast<Expression_Cast_FailureBehavior>(2);
constexpr int Expression_Cast_FailureBehavior_FailureBehavior_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Expression_Cast_FailureBehavior_descriptor();
template <typename T>
const std::string& Expression_Cast_FailureBehavior_Name(T value) {
  static_assert(std::is_same<T, Expression_Cast_FailureBehavior>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FailureBehavior_Name().");
  return Expression_Cast_FailureBehavior_Name(static_cast<Expression_Cast_FailureBehavior>(value));
}
template <>
inline const std::string& Expression_Cast_FailureBehavior_Name(Expression_Cast_FailureBehavior value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Expression_Cast_FailureBehavior_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Expression_Cast_FailureBehavior_Parse(absl::string_view name, Expression_Cast_FailureBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Cast_FailureBehavior>(
      Expression_Cast_FailureBehavior_descriptor(), name, value);
}
enum Expression_Subquery_SetPredicate_PredicateOp : int {
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_EXISTS = 1,
  Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNIQUE = 2,
  Expression_Subquery_SetPredicate_PredicateOp_Expression_Subquery_SetPredicate_PredicateOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expression_Subquery_SetPredicate_PredicateOp_Expression_Subquery_SetPredicate_PredicateOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expression_Subquery_SetPredicate_PredicateOp_IsValid(int value);
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MIN = static_cast<Expression_Subquery_SetPredicate_PredicateOp>(0);
constexpr Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MAX = static_cast<Expression_Subquery_SetPredicate_PredicateOp>(2);
constexpr int Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Expression_Subquery_SetPredicate_PredicateOp_descriptor();
template <typename T>
const std::string& Expression_Subquery_SetPredicate_PredicateOp_Name(T value) {
  static_assert(std::is_same<T, Expression_Subquery_SetPredicate_PredicateOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PredicateOp_Name().");
  return Expression_Subquery_SetPredicate_PredicateOp_Name(static_cast<Expression_Subquery_SetPredicate_PredicateOp>(value));
}
template <>
inline const std::string& Expression_Subquery_SetPredicate_PredicateOp_Name(Expression_Subquery_SetPredicate_PredicateOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Expression_Subquery_SetPredicate_PredicateOp_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Expression_Subquery_SetPredicate_PredicateOp_Parse(absl::string_view name, Expression_Subquery_SetPredicate_PredicateOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetPredicate_PredicateOp>(
      Expression_Subquery_SetPredicate_PredicateOp_descriptor(), name, value);
}
enum Expression_Subquery_SetComparison_ComparisonOp : int {
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_EQ = 1,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_NE = 2,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LT = 3,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GT = 4,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LE = 5,
  Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GE = 6,
  Expression_Subquery_SetComparison_ComparisonOp_Expression_Subquery_SetComparison_ComparisonOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expression_Subquery_SetComparison_ComparisonOp_Expression_Subquery_SetComparison_ComparisonOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expression_Subquery_SetComparison_ComparisonOp_IsValid(int value);
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MIN = static_cast<Expression_Subquery_SetComparison_ComparisonOp>(0);
constexpr Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MAX = static_cast<Expression_Subquery_SetComparison_ComparisonOp>(6);
constexpr int Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_ARRAYSIZE = 6 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Expression_Subquery_SetComparison_ComparisonOp_descriptor();
template <typename T>
const std::string& Expression_Subquery_SetComparison_ComparisonOp_Name(T value) {
  static_assert(std::is_same<T, Expression_Subquery_SetComparison_ComparisonOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ComparisonOp_Name().");
  return Expression_Subquery_SetComparison_ComparisonOp_Name(static_cast<Expression_Subquery_SetComparison_ComparisonOp>(value));
}
template <>
inline const std::string& Expression_Subquery_SetComparison_ComparisonOp_Name(Expression_Subquery_SetComparison_ComparisonOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Expression_Subquery_SetComparison_ComparisonOp_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool Expression_Subquery_SetComparison_ComparisonOp_Parse(absl::string_view name, Expression_Subquery_SetComparison_ComparisonOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetComparison_ComparisonOp>(
      Expression_Subquery_SetComparison_ComparisonOp_descriptor(), name, value);
}
enum Expression_Subquery_SetComparison_ReductionOp : int {
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_UNSPECIFIED = 0,
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ANY = 1,
  Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ALL = 2,
  Expression_Subquery_SetComparison_ReductionOp_Expression_Subquery_SetComparison_ReductionOp_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Expression_Subquery_SetComparison_ReductionOp_Expression_Subquery_SetComparison_ReductionOp_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Expression_Subquery_SetComparison_ReductionOp_IsValid(int value);
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MIN = static_cast<Expression_Subquery_SetComparison_ReductionOp>(0);
constexpr Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MAX = static_cast<Expression_Subquery_SetComparison_ReductionOp>(2);
constexpr int Expression_Subquery_SetComparison_ReductionOp_ReductionOp_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Expression_Subquery_SetComparison_ReductionOp_descriptor();
template <typename T>
const std::string& Expression_Subquery_SetComparison_ReductionOp_Name(T value) {
  static_assert(std::is_same<T, Expression_Subquery_SetComparison_ReductionOp>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ReductionOp_Name().");
  return Expression_Subquery_SetComparison_ReductionOp_Name(static_cast<Expression_Subquery_SetComparison_ReductionOp>(value));
}
template <>
inline const std::string& Expression_Subquery_SetComparison_ReductionOp_Name(Expression_Subquery_SetComparison_ReductionOp value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Expression_Subquery_SetComparison_ReductionOp_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool Expression_Subquery_SetComparison_ReductionOp_Parse(absl::string_view name, Expression_Subquery_SetComparison_ReductionOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Expression_Subquery_SetComparison_ReductionOp>(
      Expression_Subquery_SetComparison_ReductionOp_descriptor(), name, value);
}
enum SortField_SortDirection : int {
  SortField_SortDirection_SORT_DIRECTION_UNSPECIFIED = 0,
  SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_FIRST = 1,
  SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_LAST = 2,
  SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_FIRST = 3,
  SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_LAST = 4,
  SortField_SortDirection_SORT_DIRECTION_CLUSTERED = 5,
  SortField_SortDirection_SortField_SortDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SortField_SortDirection_SortField_SortDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SortField_SortDirection_IsValid(int value);
constexpr SortField_SortDirection SortField_SortDirection_SortDirection_MIN = static_cast<SortField_SortDirection>(0);
constexpr SortField_SortDirection SortField_SortDirection_SortDirection_MAX = static_cast<SortField_SortDirection>(5);
constexpr int SortField_SortDirection_SortDirection_ARRAYSIZE = 5 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SortField_SortDirection_descriptor();
template <typename T>
const std::string& SortField_SortDirection_Name(T value) {
  static_assert(std::is_same<T, SortField_SortDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SortDirection_Name().");
  return SortField_SortDirection_Name(static_cast<SortField_SortDirection>(value));
}
template <>
inline const std::string& SortField_SortDirection_Name(SortField_SortDirection value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<SortField_SortDirection_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool SortField_SortDirection_Parse(absl::string_view name, SortField_SortDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortField_SortDirection>(
      SortField_SortDirection_descriptor(), name, value);
}
enum AggregateFunction_AggregationInvocation : int {
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_UNSPECIFIED = 0,
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_ALL = 1,
  AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_DISTINCT = 2,
  AggregateFunction_AggregationInvocation_AggregateFunction_AggregationInvocation_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregateFunction_AggregationInvocation_AggregateFunction_AggregationInvocation_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregateFunction_AggregationInvocation_IsValid(int value);
constexpr AggregateFunction_AggregationInvocation AggregateFunction_AggregationInvocation_AggregationInvocation_MIN = static_cast<AggregateFunction_AggregationInvocation>(0);
constexpr AggregateFunction_AggregationInvocation AggregateFunction_AggregationInvocation_AggregationInvocation_MAX = static_cast<AggregateFunction_AggregationInvocation>(2);
constexpr int AggregateFunction_AggregationInvocation_AggregationInvocation_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
AggregateFunction_AggregationInvocation_descriptor();
template <typename T>
const std::string& AggregateFunction_AggregationInvocation_Name(T value) {
  static_assert(std::is_same<T, AggregateFunction_AggregationInvocation>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationInvocation_Name().");
  return AggregateFunction_AggregationInvocation_Name(static_cast<AggregateFunction_AggregationInvocation>(value));
}
template <>
inline const std::string& AggregateFunction_AggregationInvocation_Name(AggregateFunction_AggregationInvocation value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<AggregateFunction_AggregationInvocation_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AggregateFunction_AggregationInvocation_Parse(absl::string_view name, AggregateFunction_AggregationInvocation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregateFunction_AggregationInvocation>(
      AggregateFunction_AggregationInvocation_descriptor(), name, value);
}
enum AggregationPhase : int {
  AGGREGATION_PHASE_UNSPECIFIED = 0,
  AGGREGATION_PHASE_INITIAL_TO_INTERMEDIATE = 1,
  AGGREGATION_PHASE_INTERMEDIATE_TO_INTERMEDIATE = 2,
  AGGREGATION_PHASE_INITIAL_TO_RESULT = 3,
  AGGREGATION_PHASE_INTERMEDIATE_TO_RESULT = 4,
  AggregationPhase_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregationPhase_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregationPhase_IsValid(int value);
constexpr AggregationPhase AggregationPhase_MIN = static_cast<AggregationPhase>(0);
constexpr AggregationPhase AggregationPhase_MAX = static_cast<AggregationPhase>(4);
constexpr int AggregationPhase_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
AggregationPhase_descriptor();
template <typename T>
const std::string& AggregationPhase_Name(T value) {
  static_assert(std::is_same<T, AggregationPhase>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationPhase_Name().");
  return AggregationPhase_Name(static_cast<AggregationPhase>(value));
}
template <>
inline const std::string& AggregationPhase_Name(AggregationPhase value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<AggregationPhase_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AggregationPhase_Parse(absl::string_view name, AggregationPhase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AggregationPhase>(
      AggregationPhase_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RelCommon_Direct final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Direct) */ {
 public:
  inline RelCommon_Direct() : RelCommon_Direct(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Direct(const RelCommon_Direct& from);
  RelCommon_Direct(RelCommon_Direct&& from) noexcept
    : RelCommon_Direct() {
    *this = ::std::move(from);
  }

  inline RelCommon_Direct& operator=(const RelCommon_Direct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Direct& operator=(RelCommon_Direct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Direct& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Direct* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Direct*>(
               &_RelCommon_Direct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RelCommon_Direct& a, RelCommon_Direct& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Direct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Direct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Direct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Direct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RelCommon_Direct& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RelCommon_Direct& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon.Direct";
  }
  protected:
  explicit RelCommon_Direct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Direct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelCommon_Emit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Emit) */ {
 public:
  inline RelCommon_Emit() : RelCommon_Emit(nullptr) {}
  ~RelCommon_Emit() override;
  explicit PROTOBUF_CONSTEXPR RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Emit(const RelCommon_Emit& from);
  RelCommon_Emit(RelCommon_Emit&& from) noexcept
    : RelCommon_Emit() {
    *this = ::std::move(from);
  }

  inline RelCommon_Emit& operator=(const RelCommon_Emit& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Emit& operator=(RelCommon_Emit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Emit& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Emit* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Emit*>(
               &_RelCommon_Emit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RelCommon_Emit& a, RelCommon_Emit& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Emit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Emit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Emit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Emit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Emit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelCommon_Emit& from) {
    RelCommon_Emit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Emit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon.Emit";
  }
  protected:
  explicit RelCommon_Emit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputMappingFieldNumber = 1,
  };
  // repeated int32 output_mapping = 1 [json_name = "outputMapping"];
  int output_mapping_size() const;
  private:
  int _internal_output_mapping_size() const;

  public:
  void clear_output_mapping() ;
  ::int32_t output_mapping(int index) const;
  void set_output_mapping(int index, ::int32_t value);
  void add_output_mapping(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& output_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_output_mapping();

  private:
  ::int32_t _internal_output_mapping(int index) const;
  void _internal_add_output_mapping(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_output_mapping() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_output_mapping();

  public:
  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Emit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> output_mapping_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _output_mapping_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelCommon_Hint_Stats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint.Stats) */ {
 public:
  inline RelCommon_Hint_Stats() : RelCommon_Hint_Stats(nullptr) {}
  ~RelCommon_Hint_Stats() override;
  explicit PROTOBUF_CONSTEXPR RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_Stats(const RelCommon_Hint_Stats& from);
  RelCommon_Hint_Stats(RelCommon_Hint_Stats&& from) noexcept
    : RelCommon_Hint_Stats() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_Stats& operator=(const RelCommon_Hint_Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_Stats& operator=(RelCommon_Hint_Stats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_Stats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_Stats* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_Stats*>(
               &_RelCommon_Hint_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RelCommon_Hint_Stats& a, RelCommon_Hint_Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_Stats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint_Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint_Stats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint_Stats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelCommon_Hint_Stats& from) {
    RelCommon_Hint_Stats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_Stats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon.Hint.Stats";
  }
  protected:
  explicit RelCommon_Hint_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
    kRowCountFieldNumber = 1,
    kRecordSizeFieldNumber = 2,
  };
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // double row_count = 1 [json_name = "rowCount"];
  void clear_row_count() ;
  double row_count() const;
  void set_row_count(double value);

  private:
  double _internal_row_count() const;
  void _internal_set_row_count(double value);

  public:
  // double record_size = 2 [json_name = "recordSize"];
  void clear_record_size() ;
  double record_size() const;
  void set_record_size(double value);

  private:
  double _internal_record_size() const;
  void _internal_set_record_size(double value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    double row_count_;
    double record_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelCommon_Hint_RuntimeConstraint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint.RuntimeConstraint) */ {
 public:
  inline RelCommon_Hint_RuntimeConstraint() : RelCommon_Hint_RuntimeConstraint(nullptr) {}
  ~RelCommon_Hint_RuntimeConstraint() override;
  explicit PROTOBUF_CONSTEXPR RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint_RuntimeConstraint(const RelCommon_Hint_RuntimeConstraint& from);
  RelCommon_Hint_RuntimeConstraint(RelCommon_Hint_RuntimeConstraint&& from) noexcept
    : RelCommon_Hint_RuntimeConstraint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint_RuntimeConstraint& operator=(const RelCommon_Hint_RuntimeConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint_RuntimeConstraint& operator=(RelCommon_Hint_RuntimeConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint_RuntimeConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint_RuntimeConstraint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint_RuntimeConstraint*>(
               &_RelCommon_Hint_RuntimeConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RelCommon_Hint_RuntimeConstraint& a, RelCommon_Hint_RuntimeConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint_RuntimeConstraint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint_RuntimeConstraint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint_RuntimeConstraint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint_RuntimeConstraint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelCommon_Hint_RuntimeConstraint& from) {
    RelCommon_Hint_RuntimeConstraint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint_RuntimeConstraint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon.Hint.RuntimeConstraint";
  }
  protected:
  explicit RelCommon_Hint_RuntimeConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint.RuntimeConstraint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelCommon_Hint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon.Hint) */ {
 public:
  inline RelCommon_Hint() : RelCommon_Hint(nullptr) {}
  ~RelCommon_Hint() override;
  explicit PROTOBUF_CONSTEXPR RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon_Hint(const RelCommon_Hint& from);
  RelCommon_Hint(RelCommon_Hint&& from) noexcept
    : RelCommon_Hint() {
    *this = ::std::move(from);
  }

  inline RelCommon_Hint& operator=(const RelCommon_Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon_Hint& operator=(RelCommon_Hint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon_Hint& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelCommon_Hint* internal_default_instance() {
    return reinterpret_cast<const RelCommon_Hint*>(
               &_RelCommon_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RelCommon_Hint& a, RelCommon_Hint& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon_Hint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon_Hint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon_Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon_Hint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon_Hint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelCommon_Hint& from) {
    RelCommon_Hint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon_Hint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon.Hint";
  }
  protected:
  explicit RelCommon_Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Hint_Stats Stats;
  typedef RelCommon_Hint_RuntimeConstraint RuntimeConstraint;

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
    kConstraintFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
  bool has_stats() const;
  void clear_stats() ;
  const ::substrait::RelCommon_Hint_Stats& stats() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint_Stats* release_stats();
  ::substrait::RelCommon_Hint_Stats* mutable_stats();
  void set_allocated_stats(::substrait::RelCommon_Hint_Stats* stats);
  private:
  const ::substrait::RelCommon_Hint_Stats& _internal_stats() const;
  ::substrait::RelCommon_Hint_Stats* _internal_mutable_stats();
  public:
  void unsafe_arena_set_allocated_stats(
      ::substrait::RelCommon_Hint_Stats* stats);
  ::substrait::RelCommon_Hint_Stats* unsafe_arena_release_stats();
  // .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
  bool has_constraint() const;
  void clear_constraint() ;
  const ::substrait::RelCommon_Hint_RuntimeConstraint& constraint() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint_RuntimeConstraint* release_constraint();
  ::substrait::RelCommon_Hint_RuntimeConstraint* mutable_constraint();
  void set_allocated_constraint(::substrait::RelCommon_Hint_RuntimeConstraint* constraint);
  private:
  const ::substrait::RelCommon_Hint_RuntimeConstraint& _internal_constraint() const;
  ::substrait::RelCommon_Hint_RuntimeConstraint* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::substrait::RelCommon_Hint_RuntimeConstraint* constraint);
  ::substrait::RelCommon_Hint_RuntimeConstraint* unsafe_arena_release_constraint();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.RelCommon.Hint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon_Hint_Stats* stats_;
    ::substrait::RelCommon_Hint_RuntimeConstraint* constraint_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelCommon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelCommon) */ {
 public:
  inline RelCommon() : RelCommon(nullptr) {}
  ~RelCommon() override;
  explicit PROTOBUF_CONSTEXPR RelCommon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelCommon(const RelCommon& from);
  RelCommon(RelCommon&& from) noexcept
    : RelCommon() {
    *this = ::std::move(from);
  }

  inline RelCommon& operator=(const RelCommon& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelCommon& operator=(RelCommon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelCommon& default_instance() {
    return *internal_default_instance();
  }
  enum EmitKindCase {
    kDirect = 1,
    kEmit = 2,
    EMIT_KIND_NOT_SET = 0,
  };

  static inline const RelCommon* internal_default_instance() {
    return reinterpret_cast<const RelCommon*>(
               &_RelCommon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RelCommon& a, RelCommon& b) {
    a.Swap(&b);
  }
  inline void Swap(RelCommon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelCommon* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelCommon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelCommon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelCommon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelCommon& from) {
    RelCommon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelCommon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelCommon";
  }
  protected:
  explicit RelCommon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RelCommon_Direct Direct;
  typedef RelCommon_Emit Emit;
  typedef RelCommon_Hint Hint;

  // accessors -------------------------------------------------------

  enum : int {
    kHintFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 4,
    kDirectFieldNumber = 1,
    kEmitFieldNumber = 2,
  };
  // .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
  bool has_hint() const;
  void clear_hint() ;
  const ::substrait::RelCommon_Hint& hint() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Hint* release_hint();
  ::substrait::RelCommon_Hint* mutable_hint();
  void set_allocated_hint(::substrait::RelCommon_Hint* hint);
  private:
  const ::substrait::RelCommon_Hint& _internal_hint() const;
  ::substrait::RelCommon_Hint* _internal_mutable_hint();
  public:
  void unsafe_arena_set_allocated_hint(
      ::substrait::RelCommon_Hint* hint);
  ::substrait::RelCommon_Hint* unsafe_arena_release_hint();
  // .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
  bool has_direct() const;
  private:
  bool _internal_has_direct() const;

  public:
  void clear_direct() ;
  const ::substrait::RelCommon_Direct& direct() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Direct* release_direct();
  ::substrait::RelCommon_Direct* mutable_direct();
  void set_allocated_direct(::substrait::RelCommon_Direct* direct);
  private:
  const ::substrait::RelCommon_Direct& _internal_direct() const;
  ::substrait::RelCommon_Direct* _internal_mutable_direct();
  public:
  void unsafe_arena_set_allocated_direct(
      ::substrait::RelCommon_Direct* direct);
  ::substrait::RelCommon_Direct* unsafe_arena_release_direct();
  // .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
  bool has_emit() const;
  private:
  bool _internal_has_emit() const;

  public:
  void clear_emit() ;
  const ::substrait::RelCommon_Emit& emit() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon_Emit* release_emit();
  ::substrait::RelCommon_Emit* mutable_emit();
  void set_allocated_emit(::substrait::RelCommon_Emit* emit);
  private:
  const ::substrait::RelCommon_Emit& _internal_emit() const;
  ::substrait::RelCommon_Emit* _internal_mutable_emit();
  public:
  void unsafe_arena_set_allocated_emit(
      ::substrait::RelCommon_Emit* emit);
  ::substrait::RelCommon_Emit* unsafe_arena_release_emit();
  void clear_emit_kind();
  EmitKindCase emit_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.RelCommon)
 private:
  class _Internal;
  void set_has_direct();
  void set_has_emit();

  inline bool has_emit_kind() const;
  inline void clear_has_emit_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon_Hint* hint_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    union EmitKindUnion {
      constexpr EmitKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::RelCommon_Direct* direct_;
      ::substrait::RelCommon_Emit* emit_;
    } emit_kind_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_NamedTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.NamedTable) */ {
 public:
  inline ReadRel_NamedTable() : ReadRel_NamedTable(nullptr) {}
  ~ReadRel_NamedTable() override;
  explicit PROTOBUF_CONSTEXPR ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_NamedTable(const ReadRel_NamedTable& from);
  ReadRel_NamedTable(ReadRel_NamedTable&& from) noexcept
    : ReadRel_NamedTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_NamedTable& operator=(const ReadRel_NamedTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_NamedTable& operator=(ReadRel_NamedTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_NamedTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_NamedTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_NamedTable*>(
               &_ReadRel_NamedTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReadRel_NamedTable& a, ReadRel_NamedTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_NamedTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_NamedTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_NamedTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_NamedTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_NamedTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel_NamedTable& from) {
    ReadRel_NamedTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_NamedTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.NamedTable";
  }
  protected:
  explicit ReadRel_NamedTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated string names = 1 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();

  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.NamedTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_VirtualTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.VirtualTable) */ {
 public:
  inline ReadRel_VirtualTable() : ReadRel_VirtualTable(nullptr) {}
  ~ReadRel_VirtualTable() override;
  explicit PROTOBUF_CONSTEXPR ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_VirtualTable(const ReadRel_VirtualTable& from);
  ReadRel_VirtualTable(ReadRel_VirtualTable&& from) noexcept
    : ReadRel_VirtualTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_VirtualTable& operator=(const ReadRel_VirtualTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_VirtualTable& operator=(ReadRel_VirtualTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_VirtualTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_VirtualTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_VirtualTable*>(
               &_ReadRel_VirtualTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRel_VirtualTable& a, ReadRel_VirtualTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_VirtualTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_VirtualTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_VirtualTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_VirtualTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_VirtualTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel_VirtualTable& from) {
    ReadRel_VirtualTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_VirtualTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.VirtualTable";
  }
  protected:
  explicit ReadRel_VirtualTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::substrait::Expression_Literal_Struct* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >*
      mutable_values();
  private:
  const ::substrait::Expression_Literal_Struct& _internal_values(int index) const;
  ::substrait::Expression_Literal_Struct* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Struct>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Struct>* _internal_mutable_values();
  public:
  const ::substrait::Expression_Literal_Struct& values(int index) const;
  ::substrait::Expression_Literal_Struct* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >&
      values() const;
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.VirtualTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_ExtensionTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.ExtensionTable) */ {
 public:
  inline ReadRel_ExtensionTable() : ReadRel_ExtensionTable(nullptr) {}
  ~ReadRel_ExtensionTable() override;
  explicit PROTOBUF_CONSTEXPR ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_ExtensionTable(const ReadRel_ExtensionTable& from);
  ReadRel_ExtensionTable(ReadRel_ExtensionTable&& from) noexcept
    : ReadRel_ExtensionTable() {
    *this = ::std::move(from);
  }

  inline ReadRel_ExtensionTable& operator=(const ReadRel_ExtensionTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_ExtensionTable& operator=(ReadRel_ExtensionTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_ExtensionTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_ExtensionTable* internal_default_instance() {
    return reinterpret_cast<const ReadRel_ExtensionTable*>(
               &_ReadRel_ExtensionTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadRel_ExtensionTable& a, ReadRel_ExtensionTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_ExtensionTable* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_ExtensionTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_ExtensionTable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_ExtensionTable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel_ExtensionTable& from) {
    ReadRel_ExtensionTable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_ExtensionTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.ExtensionTable";
  }
  protected:
  explicit ReadRel_ExtensionTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // .google.protobuf.Any detail = 1 [json_name = "detail"];
  bool has_detail() const;
  void clear_detail() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.ExtensionTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions() : ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& a, ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions() : ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& a, ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_OrcReadOptions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions() : ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_OrcReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& a, ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_OrcReadOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_OrcReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions() : ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from);
  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& operator=(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& operator=(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions*>(
               &_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& a, ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles_FileOrFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles.FileOrFiles) */ {
 public:
  inline ReadRel_LocalFiles_FileOrFiles() : ReadRel_LocalFiles_FileOrFiles(nullptr) {}
  ~ReadRel_LocalFiles_FileOrFiles() override;
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles_FileOrFiles(const ReadRel_LocalFiles_FileOrFiles& from);
  ReadRel_LocalFiles_FileOrFiles(ReadRel_LocalFiles_FileOrFiles&& from) noexcept
    : ReadRel_LocalFiles_FileOrFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles_FileOrFiles& operator=(const ReadRel_LocalFiles_FileOrFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles_FileOrFiles& operator=(ReadRel_LocalFiles_FileOrFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles_FileOrFiles& default_instance() {
    return *internal_default_instance();
  }
  enum PathTypeCase {
    kUriPath = 1,
    kUriPathGlob = 2,
    kUriFile = 3,
    kUriFolder = 4,
    PATH_TYPE_NOT_SET = 0,
  };

  enum FileFormatCase {
    kParquet = 9,
    kArrow = 10,
    kOrc = 11,
    kExtension = 12,
    kDwrf = 13,
    FILE_FORMAT_NOT_SET = 0,
  };

  static inline const ReadRel_LocalFiles_FileOrFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles_FileOrFiles*>(
               &_ReadRel_LocalFiles_FileOrFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReadRel_LocalFiles_FileOrFiles& a, ReadRel_LocalFiles_FileOrFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles_FileOrFiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles_FileOrFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles_FileOrFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_LocalFiles_FileOrFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel_LocalFiles_FileOrFiles& from) {
    ReadRel_LocalFiles_FileOrFiles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles_FileOrFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles.FileOrFiles";
  }
  protected:
  explicit ReadRel_LocalFiles_FileOrFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions ParquetReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions ArrowReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_OrcReadOptions OrcReadOptions;
  typedef ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions DwrfReadOptions;

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIndexFieldNumber = 6,
    kStartFieldNumber = 7,
    kLengthFieldNumber = 8,
    kUriPathFieldNumber = 1,
    kUriPathGlobFieldNumber = 2,
    kUriFileFieldNumber = 3,
    kUriFolderFieldNumber = 4,
    kParquetFieldNumber = 9,
    kArrowFieldNumber = 10,
    kOrcFieldNumber = 11,
    kExtensionFieldNumber = 12,
    kDwrfFieldNumber = 13,
  };
  // uint64 partition_index = 6 [json_name = "partitionIndex"];
  void clear_partition_index() ;
  ::uint64_t partition_index() const;
  void set_partition_index(::uint64_t value);

  private:
  ::uint64_t _internal_partition_index() const;
  void _internal_set_partition_index(::uint64_t value);

  public:
  // uint64 start = 7 [json_name = "start"];
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // uint64 length = 8 [json_name = "length"];
  void clear_length() ;
  ::uint64_t length() const;
  void set_length(::uint64_t value);

  private:
  ::uint64_t _internal_length() const;
  void _internal_set_length(::uint64_t value);

  public:
  // string uri_path = 1 [json_name = "uriPath"];
  bool has_uri_path() const;
  void clear_uri_path() ;
  const std::string& uri_path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_path(Arg_&& arg, Args_... args);
  std::string* mutable_uri_path();
  PROTOBUF_NODISCARD std::string* release_uri_path();
  void set_allocated_uri_path(std::string* ptr);

  private:
  const std::string& _internal_uri_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_path(
      const std::string& value);
  std::string* _internal_mutable_uri_path();

  public:
  // string uri_path_glob = 2 [json_name = "uriPathGlob"];
  bool has_uri_path_glob() const;
  void clear_uri_path_glob() ;
  const std::string& uri_path_glob() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_path_glob(Arg_&& arg, Args_... args);
  std::string* mutable_uri_path_glob();
  PROTOBUF_NODISCARD std::string* release_uri_path_glob();
  void set_allocated_uri_path_glob(std::string* ptr);

  private:
  const std::string& _internal_uri_path_glob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_path_glob(
      const std::string& value);
  std::string* _internal_mutable_uri_path_glob();

  public:
  // string uri_file = 3 [json_name = "uriFile"];
  bool has_uri_file() const;
  void clear_uri_file() ;
  const std::string& uri_file() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_file(Arg_&& arg, Args_... args);
  std::string* mutable_uri_file();
  PROTOBUF_NODISCARD std::string* release_uri_file();
  void set_allocated_uri_file(std::string* ptr);

  private:
  const std::string& _internal_uri_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_file(
      const std::string& value);
  std::string* _internal_mutable_uri_file();

  public:
  // string uri_folder = 4 [json_name = "uriFolder"];
  bool has_uri_folder() const;
  void clear_uri_folder() ;
  const std::string& uri_folder() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri_folder(Arg_&& arg, Args_... args);
  std::string* mutable_uri_folder();
  PROTOBUF_NODISCARD std::string* release_uri_folder();
  void set_allocated_uri_folder(std::string* ptr);

  private:
  const std::string& _internal_uri_folder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri_folder(
      const std::string& value);
  std::string* _internal_mutable_uri_folder();

  public:
  // .substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9 [json_name = "parquet"];
  bool has_parquet() const;
  private:
  bool _internal_has_parquet() const;

  public:
  void clear_parquet() ;
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& parquet() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* release_parquet();
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* mutable_parquet();
  void set_allocated_parquet(::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet);
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& _internal_parquet() const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* _internal_mutable_parquet();
  public:
  void unsafe_arena_set_allocated_parquet(
      ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet);
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* unsafe_arena_release_parquet();
  // .substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10 [json_name = "arrow"];
  bool has_arrow() const;
  private:
  bool _internal_has_arrow() const;

  public:
  void clear_arrow() ;
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& arrow() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* release_arrow();
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* mutable_arrow();
  void set_allocated_arrow(::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow);
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& _internal_arrow() const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* _internal_mutable_arrow();
  public:
  void unsafe_arena_set_allocated_arrow(
      ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow);
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* unsafe_arena_release_arrow();
  // .substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11 [json_name = "orc"];
  bool has_orc() const;
  private:
  bool _internal_has_orc() const;

  public:
  void clear_orc() ;
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& orc() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* release_orc();
  ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* mutable_orc();
  void set_allocated_orc(::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc);
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& _internal_orc() const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* _internal_mutable_orc();
  public:
  void unsafe_arena_set_allocated_orc(
      ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc);
  ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* unsafe_arena_release_orc();
  // .google.protobuf.Any extension = 12 [json_name = "extension"];
  bool has_extension() const;
  private:
  bool _internal_has_extension() const;

  public:
  void clear_extension() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& extension() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_extension();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_extension();
  void set_allocated_extension(::PROTOBUF_NAMESPACE_ID::Any* extension);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_extension() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extension();
  public:
  void unsafe_arena_set_allocated_extension(
      ::PROTOBUF_NAMESPACE_ID::Any* extension);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extension();
  // .substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13 [json_name = "dwrf"];
  bool has_dwrf() const;
  private:
  bool _internal_has_dwrf() const;

  public:
  void clear_dwrf() ;
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& dwrf() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* release_dwrf();
  ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* mutable_dwrf();
  void set_allocated_dwrf(::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf);
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& _internal_dwrf() const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* _internal_mutable_dwrf();
  public:
  void unsafe_arena_set_allocated_dwrf(
      ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf);
  ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* unsafe_arena_release_dwrf();
  void clear_path_type();
  PathTypeCase path_type_case() const;
  void clear_file_format();
  FileFormatCase file_format_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles.FileOrFiles)
 private:
  class _Internal;
  void set_has_uri_path();
  void set_has_uri_path_glob();
  void set_has_uri_file();
  void set_has_uri_folder();
  void set_has_parquet();
  void set_has_arrow();
  void set_has_orc();
  void set_has_extension();
  void set_has_dwrf();

  inline bool has_path_type() const;
  inline void clear_has_path_type();

  inline bool has_file_format() const;
  inline void clear_has_file_format();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t partition_index_;
    ::uint64_t start_;
    ::uint64_t length_;
    union PathTypeUnion {
      constexpr PathTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_path_glob_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_file_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_folder_;
    } path_type_;
    union FileFormatUnion {
      constexpr FileFormatUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet_;
      ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow_;
      ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc_;
      ::PROTOBUF_NAMESPACE_ID::Any* extension_;
      ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf_;
    } file_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel_LocalFiles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel.LocalFiles) */ {
 public:
  inline ReadRel_LocalFiles() : ReadRel_LocalFiles(nullptr) {}
  ~ReadRel_LocalFiles() override;
  explicit PROTOBUF_CONSTEXPR ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel_LocalFiles(const ReadRel_LocalFiles& from);
  ReadRel_LocalFiles(ReadRel_LocalFiles&& from) noexcept
    : ReadRel_LocalFiles() {
    *this = ::std::move(from);
  }

  inline ReadRel_LocalFiles& operator=(const ReadRel_LocalFiles& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel_LocalFiles& operator=(ReadRel_LocalFiles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel_LocalFiles& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadRel_LocalFiles* internal_default_instance() {
    return reinterpret_cast<const ReadRel_LocalFiles*>(
               &_ReadRel_LocalFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadRel_LocalFiles& a, ReadRel_LocalFiles& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel_LocalFiles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel_LocalFiles* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel_LocalFiles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel_LocalFiles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel_LocalFiles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel_LocalFiles& from) {
    ReadRel_LocalFiles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel_LocalFiles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel.LocalFiles";
  }
  protected:
  explicit ReadRel_LocalFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_LocalFiles_FileOrFiles FileOrFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;

  public:
  void clear_items() ;
  ::substrait::ReadRel_LocalFiles_FileOrFiles* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >*
      mutable_items();
  private:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles& _internal_items(int index) const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles* _internal_add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ReadRel_LocalFiles_FileOrFiles>& _internal_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ReadRel_LocalFiles_FileOrFiles>* _internal_mutable_items();
  public:
  const ::substrait::ReadRel_LocalFiles_FileOrFiles& items(int index) const;
  ::substrait::ReadRel_LocalFiles_FileOrFiles* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >&
      items() const;
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.ReadRel.LocalFiles)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles > items_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ReadRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ReadRel) */ {
 public:
  inline ReadRel() : ReadRel(nullptr) {}
  ~ReadRel() override;
  explicit PROTOBUF_CONSTEXPR ReadRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadRel(const ReadRel& from);
  ReadRel(ReadRel&& from) noexcept
    : ReadRel() {
    *this = ::std::move(from);
  }

  inline ReadRel& operator=(const ReadRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRel& operator=(ReadRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadRel& default_instance() {
    return *internal_default_instance();
  }
  enum ReadTypeCase {
    kVirtualTable = 5,
    kLocalFiles = 6,
    kNamedTable = 7,
    kExtensionTable = 8,
    READ_TYPE_NOT_SET = 0,
  };

  static inline const ReadRel* internal_default_instance() {
    return reinterpret_cast<const ReadRel*>(
               &_ReadRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadRel& a, ReadRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReadRel& from) {
    ReadRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ReadRel";
  }
  protected:
  explicit ReadRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReadRel_NamedTable NamedTable;
  typedef ReadRel_VirtualTable VirtualTable;
  typedef ReadRel_ExtensionTable ExtensionTable;
  typedef ReadRel_LocalFiles LocalFiles;

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kBaseSchemaFieldNumber = 2,
    kFilterFieldNumber = 3,
    kProjectionFieldNumber = 4,
    kAdvancedExtensionFieldNumber = 10,
    kBestEffortFilterFieldNumber = 11,
    kVirtualTableFieldNumber = 5,
    kLocalFilesFieldNumber = 6,
    kNamedTableFieldNumber = 7,
    kExtensionTableFieldNumber = 8,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
  bool has_base_schema() const;
  void clear_base_schema() ;
  const ::substrait::NamedStruct& base_schema() const;
  PROTOBUF_NODISCARD ::substrait::NamedStruct* release_base_schema();
  ::substrait::NamedStruct* mutable_base_schema();
  void set_allocated_base_schema(::substrait::NamedStruct* base_schema);
  private:
  const ::substrait::NamedStruct& _internal_base_schema() const;
  ::substrait::NamedStruct* _internal_mutable_base_schema();
  public:
  void unsafe_arena_set_allocated_base_schema(
      ::substrait::NamedStruct* base_schema);
  ::substrait::NamedStruct* unsafe_arena_release_base_schema();
  // .substrait.Expression filter = 3 [json_name = "filter"];
  bool has_filter() const;
  void clear_filter() ;
  const ::substrait::Expression& filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_filter();
  ::substrait::Expression* mutable_filter();
  void set_allocated_filter(::substrait::Expression* filter);
  private:
  const ::substrait::Expression& _internal_filter() const;
  ::substrait::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::Expression* filter);
  ::substrait::Expression* unsafe_arena_release_filter();
  // .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
  bool has_projection() const;
  void clear_projection() ;
  const ::substrait::Expression_MaskExpression& projection() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression* release_projection();
  ::substrait::Expression_MaskExpression* mutable_projection();
  void set_allocated_projection(::substrait::Expression_MaskExpression* projection);
  private:
  const ::substrait::Expression_MaskExpression& _internal_projection() const;
  ::substrait::Expression_MaskExpression* _internal_mutable_projection();
  public:
  void unsafe_arena_set_allocated_projection(
      ::substrait::Expression_MaskExpression* projection);
  ::substrait::Expression_MaskExpression* unsafe_arena_release_projection();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.Expression best_effort_filter = 11 [json_name = "bestEffortFilter"];
  bool has_best_effort_filter() const;
  void clear_best_effort_filter() ;
  const ::substrait::Expression& best_effort_filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_best_effort_filter();
  ::substrait::Expression* mutable_best_effort_filter();
  void set_allocated_best_effort_filter(::substrait::Expression* best_effort_filter);
  private:
  const ::substrait::Expression& _internal_best_effort_filter() const;
  ::substrait::Expression* _internal_mutable_best_effort_filter();
  public:
  void unsafe_arena_set_allocated_best_effort_filter(
      ::substrait::Expression* best_effort_filter);
  ::substrait::Expression* unsafe_arena_release_best_effort_filter();
  // .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
  bool has_virtual_table() const;
  private:
  bool _internal_has_virtual_table() const;

  public:
  void clear_virtual_table() ;
  const ::substrait::ReadRel_VirtualTable& virtual_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_VirtualTable* release_virtual_table();
  ::substrait::ReadRel_VirtualTable* mutable_virtual_table();
  void set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table);
  private:
  const ::substrait::ReadRel_VirtualTable& _internal_virtual_table() const;
  ::substrait::ReadRel_VirtualTable* _internal_mutable_virtual_table();
  public:
  void unsafe_arena_set_allocated_virtual_table(
      ::substrait::ReadRel_VirtualTable* virtual_table);
  ::substrait::ReadRel_VirtualTable* unsafe_arena_release_virtual_table();
  // .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
  bool has_local_files() const;
  private:
  bool _internal_has_local_files() const;

  public:
  void clear_local_files() ;
  const ::substrait::ReadRel_LocalFiles& local_files() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_LocalFiles* release_local_files();
  ::substrait::ReadRel_LocalFiles* mutable_local_files();
  void set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files);
  private:
  const ::substrait::ReadRel_LocalFiles& _internal_local_files() const;
  ::substrait::ReadRel_LocalFiles* _internal_mutable_local_files();
  public:
  void unsafe_arena_set_allocated_local_files(
      ::substrait::ReadRel_LocalFiles* local_files);
  ::substrait::ReadRel_LocalFiles* unsafe_arena_release_local_files();
  // .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;

  public:
  void clear_named_table() ;
  const ::substrait::ReadRel_NamedTable& named_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_NamedTable* release_named_table();
  ::substrait::ReadRel_NamedTable* mutable_named_table();
  void set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table);
  private:
  const ::substrait::ReadRel_NamedTable& _internal_named_table() const;
  ::substrait::ReadRel_NamedTable* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::substrait::ReadRel_NamedTable* named_table);
  ::substrait::ReadRel_NamedTable* unsafe_arena_release_named_table();
  // .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
  bool has_extension_table() const;
  private:
  bool _internal_has_extension_table() const;

  public:
  void clear_extension_table() ;
  const ::substrait::ReadRel_ExtensionTable& extension_table() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel_ExtensionTable* release_extension_table();
  ::substrait::ReadRel_ExtensionTable* mutable_extension_table();
  void set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table);
  private:
  const ::substrait::ReadRel_ExtensionTable& _internal_extension_table() const;
  ::substrait::ReadRel_ExtensionTable* _internal_mutable_extension_table();
  public:
  void unsafe_arena_set_allocated_extension_table(
      ::substrait::ReadRel_ExtensionTable* extension_table);
  ::substrait::ReadRel_ExtensionTable* unsafe_arena_release_extension_table();
  void clear_read_type();
  ReadTypeCase read_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ReadRel)
 private:
  class _Internal;
  void set_has_virtual_table();
  void set_has_local_files();
  void set_has_named_table();
  void set_has_extension_table();

  inline bool has_read_type() const;
  inline void clear_has_read_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::NamedStruct* base_schema_;
    ::substrait::Expression* filter_;
    ::substrait::Expression_MaskExpression* projection_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    ::substrait::Expression* best_effort_filter_;
    union ReadTypeUnion {
      constexpr ReadTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::ReadRel_VirtualTable* virtual_table_;
      ::substrait::ReadRel_LocalFiles* local_files_;
      ::substrait::ReadRel_NamedTable* named_table_;
      ::substrait::ReadRel_ExtensionTable* extension_table_;
    } read_type_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ProjectRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ProjectRel) */ {
 public:
  inline ProjectRel() : ProjectRel(nullptr) {}
  ~ProjectRel() override;
  explicit PROTOBUF_CONSTEXPR ProjectRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectRel(const ProjectRel& from);
  ProjectRel(ProjectRel&& from) noexcept
    : ProjectRel() {
    *this = ::std::move(from);
  }

  inline ProjectRel& operator=(const ProjectRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectRel& operator=(ProjectRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectRel* internal_default_instance() {
    return reinterpret_cast<const ProjectRel*>(
               &_ProjectRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ProjectRel& a, ProjectRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectRel& from) {
    ProjectRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ProjectRel";
  }
  protected:
  explicit ProjectRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
  int expressions_size() const;
  private:
  int _internal_expressions_size() const;

  public:
  void clear_expressions() ;
  ::substrait::Expression* mutable_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_expressions();
  private:
  const ::substrait::Expression& _internal_expressions(int index) const;
  ::substrait::Expression* _internal_add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_expressions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_expressions();
  public:
  const ::substrait::Expression& expressions(int index) const;
  ::substrait::Expression* add_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      expressions() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.ProjectRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > expressions_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class JoinRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.JoinRel) */ {
 public:
  inline JoinRel() : JoinRel(nullptr) {}
  ~JoinRel() override;
  explicit PROTOBUF_CONSTEXPR JoinRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinRel(const JoinRel& from);
  JoinRel(JoinRel&& from) noexcept
    : JoinRel() {
    *this = ::std::move(from);
  }

  inline JoinRel& operator=(const JoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinRel& operator=(JoinRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinRel* internal_default_instance() {
    return reinterpret_cast<const JoinRel*>(
               &_JoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(JoinRel& a, JoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinRel& from) {
    JoinRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.JoinRel";
  }
  protected:
  explicit JoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using JoinType = JoinRel_JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED = JoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER = JoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER = JoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT = JoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT = JoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_SEMI = JoinRel_JoinType_JOIN_TYPE_SEMI;
  static constexpr JoinType JOIN_TYPE_ANTI = JoinRel_JoinType_JOIN_TYPE_ANTI;
  static constexpr JoinType JOIN_TYPE_SINGLE = JoinRel_JoinType_JOIN_TYPE_SINGLE;
  static inline bool JoinType_IsValid(int value) {
    return JoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN = JoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX = JoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE = JoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinType_descriptor() {
    return JoinRel_JoinType_descriptor();
  }
  template <typename T>
  static inline const std::string& JoinType_Name(T value) {
    return JoinRel_JoinType_Name(value);
  }
  static inline bool JoinType_Parse(absl::string_view name, JoinType* value) {
    return JoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kExpressionFieldNumber = 4,
    kPostJoinFilterFieldNumber = 5,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 6,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  void clear_left() ;
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();
  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  void clear_right() ;
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();
  // .substrait.Expression expression = 4 [json_name = "expression"];
  bool has_expression() const;
  void clear_expression() ;
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();
  // .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
  bool has_post_join_filter() const;
  void clear_post_join_filter() ;
  const ::substrait::Expression& post_join_filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_post_join_filter();
  ::substrait::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::Expression* post_join_filter);
  private:
  const ::substrait::Expression& _internal_post_join_filter() const;
  ::substrait::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::Expression* post_join_filter);
  ::substrait::Expression* unsafe_arena_release_post_join_filter();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
  void clear_type() ;
  ::substrait::JoinRel_JoinType type() const;
  void set_type(::substrait::JoinRel_JoinType value);

  private:
  ::substrait::JoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::JoinRel_JoinType value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.JoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* left_;
    ::substrait::Rel* right_;
    ::substrait::Expression* expression_;
    ::substrait::Expression* post_join_filter_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class CrossRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.CrossRel) */ {
 public:
  inline CrossRel() : CrossRel(nullptr) {}
  ~CrossRel() override;
  explicit PROTOBUF_CONSTEXPR CrossRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrossRel(const CrossRel& from);
  CrossRel(CrossRel&& from) noexcept
    : CrossRel() {
    *this = ::std::move(from);
  }

  inline CrossRel& operator=(const CrossRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrossRel& operator=(CrossRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CrossRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrossRel* internal_default_instance() {
    return reinterpret_cast<const CrossRel*>(
               &_CrossRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CrossRel& a, CrossRel& b) {
    a.Swap(&b);
  }
  inline void Swap(CrossRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrossRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CrossRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CrossRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CrossRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CrossRel& from) {
    CrossRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrossRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.CrossRel";
  }
  protected:
  explicit CrossRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  void clear_left() ;
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();
  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  void clear_right() ;
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.CrossRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* left_;
    ::substrait::Rel* right_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class FetchRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FetchRel) */ {
 public:
  inline FetchRel() : FetchRel(nullptr) {}
  ~FetchRel() override;
  explicit PROTOBUF_CONSTEXPR FetchRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchRel(const FetchRel& from);
  FetchRel(FetchRel&& from) noexcept
    : FetchRel() {
    *this = ::std::move(from);
  }

  inline FetchRel& operator=(const FetchRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchRel& operator=(FetchRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchRel* internal_default_instance() {
    return reinterpret_cast<const FetchRel*>(
               &_FetchRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FetchRel& a, FetchRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchRel& from) {
    FetchRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.FetchRel";
  }
  protected:
  explicit FetchRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
    kOffsetFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // int64 offset = 3 [json_name = "offset"];
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int64 count = 4 [json_name = "count"];
  void clear_count() ;
  ::int64_t count() const;
  void set_count(::int64_t value);

  private:
  ::int64_t _internal_count() const;
  void _internal_set_count(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.FetchRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    ::int64_t offset_;
    ::int64_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class AggregateRel_Grouping final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel.Grouping) */ {
 public:
  inline AggregateRel_Grouping() : AggregateRel_Grouping(nullptr) {}
  ~AggregateRel_Grouping() override;
  explicit PROTOBUF_CONSTEXPR AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Grouping(const AggregateRel_Grouping& from);
  AggregateRel_Grouping(AggregateRel_Grouping&& from) noexcept
    : AggregateRel_Grouping() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Grouping& operator=(const AggregateRel_Grouping& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Grouping& operator=(AggregateRel_Grouping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Grouping& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Grouping* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Grouping*>(
               &_AggregateRel_Grouping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AggregateRel_Grouping& a, AggregateRel_Grouping& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Grouping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Grouping* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel_Grouping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel_Grouping>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel_Grouping& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggregateRel_Grouping& from) {
    AggregateRel_Grouping::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Grouping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.AggregateRel.Grouping";
  }
  protected:
  explicit AggregateRel_Grouping(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingExpressionsFieldNumber = 1,
  };
  // repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
  int grouping_expressions_size() const;
  private:
  int _internal_grouping_expressions_size() const;

  public:
  void clear_grouping_expressions() ;
  ::substrait::Expression* mutable_grouping_expressions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_grouping_expressions();
  private:
  const ::substrait::Expression& _internal_grouping_expressions(int index) const;
  ::substrait::Expression* _internal_add_grouping_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_grouping_expressions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_grouping_expressions();
  public:
  const ::substrait::Expression& grouping_expressions(int index) const;
  ::substrait::Expression* add_grouping_expressions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      grouping_expressions() const;
  // @@protoc_insertion_point(class_scope:substrait.AggregateRel.Grouping)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > grouping_expressions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class AggregateRel_Measure final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel.Measure) */ {
 public:
  inline AggregateRel_Measure() : AggregateRel_Measure(nullptr) {}
  ~AggregateRel_Measure() override;
  explicit PROTOBUF_CONSTEXPR AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel_Measure(const AggregateRel_Measure& from);
  AggregateRel_Measure(AggregateRel_Measure&& from) noexcept
    : AggregateRel_Measure() {
    *this = ::std::move(from);
  }

  inline AggregateRel_Measure& operator=(const AggregateRel_Measure& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel_Measure& operator=(AggregateRel_Measure&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel_Measure& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel_Measure* internal_default_instance() {
    return reinterpret_cast<const AggregateRel_Measure*>(
               &_AggregateRel_Measure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AggregateRel_Measure& a, AggregateRel_Measure& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel_Measure* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel_Measure* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel_Measure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel_Measure>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel_Measure& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggregateRel_Measure& from) {
    AggregateRel_Measure::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel_Measure* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.AggregateRel.Measure";
  }
  protected:
  explicit AggregateRel_Measure(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasureFieldNumber = 1,
    kFilterFieldNumber = 2,
  };
  // .substrait.AggregateFunction measure = 1 [json_name = "measure"];
  bool has_measure() const;
  void clear_measure() ;
  const ::substrait::AggregateFunction& measure() const;
  PROTOBUF_NODISCARD ::substrait::AggregateFunction* release_measure();
  ::substrait::AggregateFunction* mutable_measure();
  void set_allocated_measure(::substrait::AggregateFunction* measure);
  private:
  const ::substrait::AggregateFunction& _internal_measure() const;
  ::substrait::AggregateFunction* _internal_mutable_measure();
  public:
  void unsafe_arena_set_allocated_measure(
      ::substrait::AggregateFunction* measure);
  ::substrait::AggregateFunction* unsafe_arena_release_measure();
  // .substrait.Expression filter = 2 [json_name = "filter"];
  bool has_filter() const;
  void clear_filter() ;
  const ::substrait::Expression& filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_filter();
  ::substrait::Expression* mutable_filter();
  void set_allocated_filter(::substrait::Expression* filter);
  private:
  const ::substrait::Expression& _internal_filter() const;
  ::substrait::Expression* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::Expression* filter);
  ::substrait::Expression* unsafe_arena_release_filter();
  // @@protoc_insertion_point(class_scope:substrait.AggregateRel.Measure)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::AggregateFunction* measure_;
    ::substrait::Expression* filter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class AggregateRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateRel) */ {
 public:
  inline AggregateRel() : AggregateRel(nullptr) {}
  ~AggregateRel() override;
  explicit PROTOBUF_CONSTEXPR AggregateRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateRel(const AggregateRel& from);
  AggregateRel(AggregateRel&& from) noexcept
    : AggregateRel() {
    *this = ::std::move(from);
  }

  inline AggregateRel& operator=(const AggregateRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateRel& operator=(AggregateRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateRel* internal_default_instance() {
    return reinterpret_cast<const AggregateRel*>(
               &_AggregateRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AggregateRel& a, AggregateRel& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggregateRel& from) {
    AggregateRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.AggregateRel";
  }
  protected:
  explicit AggregateRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AggregateRel_Grouping Grouping;
  typedef AggregateRel_Measure Measure;

  // accessors -------------------------------------------------------

  enum : int {
    kGroupingsFieldNumber = 3,
    kMeasuresFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
  int groupings_size() const;
  private:
  int _internal_groupings_size() const;

  public:
  void clear_groupings() ;
  ::substrait::AggregateRel_Grouping* mutable_groupings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >*
      mutable_groupings();
  private:
  const ::substrait::AggregateRel_Grouping& _internal_groupings(int index) const;
  ::substrait::AggregateRel_Grouping* _internal_add_groupings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Grouping>& _internal_groupings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Grouping>* _internal_mutable_groupings();
  public:
  const ::substrait::AggregateRel_Grouping& groupings(int index) const;
  ::substrait::AggregateRel_Grouping* add_groupings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >&
      groupings() const;
  // repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
  int measures_size() const;
  private:
  int _internal_measures_size() const;

  public:
  void clear_measures() ;
  ::substrait::AggregateRel_Measure* mutable_measures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >*
      mutable_measures();
  private:
  const ::substrait::AggregateRel_Measure& _internal_measures(int index) const;
  ::substrait::AggregateRel_Measure* _internal_add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Measure>& _internal_measures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Measure>* _internal_mutable_measures();
  public:
  const ::substrait::AggregateRel_Measure& measures(int index) const;
  ::substrait::AggregateRel_Measure* add_measures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >&
      measures() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.AggregateRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping > groupings_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure > measures_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class SortRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.SortRel) */ {
 public:
  inline SortRel() : SortRel(nullptr) {}
  ~SortRel() override;
  explicit PROTOBUF_CONSTEXPR SortRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortRel(const SortRel& from);
  SortRel(SortRel&& from) noexcept
    : SortRel() {
    *this = ::std::move(from);
  }

  inline SortRel& operator=(const SortRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortRel& operator=(SortRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortRel* internal_default_instance() {
    return reinterpret_cast<const SortRel*>(
               &_SortRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SortRel& a, SortRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SortRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SortRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SortRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SortRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SortRel& from) {
    SortRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.SortRel";
  }
  protected:
  explicit SortRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSortsFieldNumber = 3,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;

  public:
  void clear_sorts() ;
  ::substrait::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
      mutable_sorts();
  private:
  const ::substrait::SortField& _internal_sorts(int index) const;
  ::substrait::SortField* _internal_add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>& _internal_sorts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>* _internal_mutable_sorts();
  public:
  const ::substrait::SortField& sorts(int index) const;
  ::substrait::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
      sorts() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.SortRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField > sorts_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class FilterRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FilterRel) */ {
 public:
  inline FilterRel() : FilterRel(nullptr) {}
  ~FilterRel() override;
  explicit PROTOBUF_CONSTEXPR FilterRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterRel(const FilterRel& from);
  FilterRel(FilterRel&& from) noexcept
    : FilterRel() {
    *this = ::std::move(from);
  }

  inline FilterRel& operator=(const FilterRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterRel& operator=(FilterRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterRel* internal_default_instance() {
    return reinterpret_cast<const FilterRel*>(
               &_FilterRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FilterRel& a, FilterRel& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FilterRel& from) {
    FilterRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.FilterRel";
  }
  protected:
  explicit FilterRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kConditionFieldNumber = 3,
    kAdvancedExtensionFieldNumber = 10,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.Expression condition = 3 [json_name = "condition"];
  bool has_condition() const;
  void clear_condition() ;
  const ::substrait::Expression& condition() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_condition();
  ::substrait::Expression* mutable_condition();
  void set_allocated_condition(::substrait::Expression* condition);
  private:
  const ::substrait::Expression& _internal_condition() const;
  ::substrait::Expression* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::substrait::Expression* condition);
  ::substrait::Expression* unsafe_arena_release_condition();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.FilterRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::Expression* condition_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class SetRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.SetRel) */ {
 public:
  inline SetRel() : SetRel(nullptr) {}
  ~SetRel() override;
  explicit PROTOBUF_CONSTEXPR SetRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRel(const SetRel& from);
  SetRel(SetRel&& from) noexcept
    : SetRel() {
    *this = ::std::move(from);
  }

  inline SetRel& operator=(const SetRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRel& operator=(SetRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRel* internal_default_instance() {
    return reinterpret_cast<const SetRel*>(
               &_SetRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SetRel& a, SetRel& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetRel& from) {
    SetRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.SetRel";
  }
  protected:
  explicit SetRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SetOp = SetRel_SetOp;
  static constexpr SetOp SET_OP_UNSPECIFIED = SetRel_SetOp_SET_OP_UNSPECIFIED;
  static constexpr SetOp SET_OP_MINUS_PRIMARY = SetRel_SetOp_SET_OP_MINUS_PRIMARY;
  static constexpr SetOp SET_OP_MINUS_MULTISET = SetRel_SetOp_SET_OP_MINUS_MULTISET;
  static constexpr SetOp SET_OP_INTERSECTION_PRIMARY = SetRel_SetOp_SET_OP_INTERSECTION_PRIMARY;
  static constexpr SetOp SET_OP_INTERSECTION_MULTISET = SetRel_SetOp_SET_OP_INTERSECTION_MULTISET;
  static constexpr SetOp SET_OP_UNION_DISTINCT = SetRel_SetOp_SET_OP_UNION_DISTINCT;
  static constexpr SetOp SET_OP_UNION_ALL = SetRel_SetOp_SET_OP_UNION_ALL;
  static inline bool SetOp_IsValid(int value) {
    return SetRel_SetOp_IsValid(value);
  }
  static constexpr SetOp SetOp_MIN = SetRel_SetOp_SetOp_MIN;
  static constexpr SetOp SetOp_MAX = SetRel_SetOp_SetOp_MAX;
  static constexpr int SetOp_ARRAYSIZE = SetRel_SetOp_SetOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetOp_descriptor() {
    return SetRel_SetOp_descriptor();
  }
  template <typename T>
  static inline const std::string& SetOp_Name(T value) {
    return SetRel_SetOp_Name(value);
  }
  static inline bool SetOp_Parse(absl::string_view name, SetOp* value) {
    return SetRel_SetOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
    kOpFieldNumber = 3,
  };
  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;

  public:
  void clear_inputs() ;
  ::substrait::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
      mutable_inputs();
  private:
  const ::substrait::Rel& _internal_inputs(int index) const;
  ::substrait::Rel* _internal_add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>& _internal_inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>* _internal_mutable_inputs();
  public:
  const ::substrait::Rel& inputs(int index) const;
  ::substrait::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
      inputs() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.SetRel.SetOp op = 3 [json_name = "op"];
  void clear_op() ;
  ::substrait::SetRel_SetOp op() const;
  void set_op(::substrait::SetRel_SetOp value);

  private:
  ::substrait::SetRel_SetOp _internal_op() const;
  void _internal_set_op(::substrait::SetRel_SetOp value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.SetRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel > inputs_;
    ::substrait::RelCommon* common_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    int op_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExtensionSingleRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionSingleRel) */ {
 public:
  inline ExtensionSingleRel() : ExtensionSingleRel(nullptr) {}
  ~ExtensionSingleRel() override;
  explicit PROTOBUF_CONSTEXPR ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionSingleRel(const ExtensionSingleRel& from);
  ExtensionSingleRel(ExtensionSingleRel&& from) noexcept
    : ExtensionSingleRel() {
    *this = ::std::move(from);
  }

  inline ExtensionSingleRel& operator=(const ExtensionSingleRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionSingleRel& operator=(ExtensionSingleRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionSingleRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionSingleRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionSingleRel*>(
               &_ExtensionSingleRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExtensionSingleRel& a, ExtensionSingleRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionSingleRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionSingleRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionSingleRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionSingleRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionSingleRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionSingleRel& from) {
    ExtensionSingleRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionSingleRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExtensionSingleRel";
  }
  protected:
  explicit ExtensionSingleRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kDetailFieldNumber = 3,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  bool has_detail() const;
  void clear_detail() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();
  // @@protoc_insertion_point(class_scope:substrait.ExtensionSingleRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExtensionLeafRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionLeafRel) */ {
 public:
  inline ExtensionLeafRel() : ExtensionLeafRel(nullptr) {}
  ~ExtensionLeafRel() override;
  explicit PROTOBUF_CONSTEXPR ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionLeafRel(const ExtensionLeafRel& from);
  ExtensionLeafRel(ExtensionLeafRel&& from) noexcept
    : ExtensionLeafRel() {
    *this = ::std::move(from);
  }

  inline ExtensionLeafRel& operator=(const ExtensionLeafRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionLeafRel& operator=(ExtensionLeafRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionLeafRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionLeafRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionLeafRel*>(
               &_ExtensionLeafRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ExtensionLeafRel& a, ExtensionLeafRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionLeafRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionLeafRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionLeafRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionLeafRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionLeafRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionLeafRel& from) {
    ExtensionLeafRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionLeafRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExtensionLeafRel";
  }
  protected:
  explicit ExtensionLeafRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 2,
  };
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .google.protobuf.Any detail = 2 [json_name = "detail"];
  bool has_detail() const;
  void clear_detail() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();
  // @@protoc_insertion_point(class_scope:substrait.ExtensionLeafRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::RelCommon* common_;
    ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExtensionMultiRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionMultiRel) */ {
 public:
  inline ExtensionMultiRel() : ExtensionMultiRel(nullptr) {}
  ~ExtensionMultiRel() override;
  explicit PROTOBUF_CONSTEXPR ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionMultiRel(const ExtensionMultiRel& from);
  ExtensionMultiRel(ExtensionMultiRel&& from) noexcept
    : ExtensionMultiRel() {
    *this = ::std::move(from);
  }

  inline ExtensionMultiRel& operator=(const ExtensionMultiRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionMultiRel& operator=(ExtensionMultiRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionMultiRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionMultiRel* internal_default_instance() {
    return reinterpret_cast<const ExtensionMultiRel*>(
               &_ExtensionMultiRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ExtensionMultiRel& a, ExtensionMultiRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionMultiRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionMultiRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionMultiRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionMultiRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionMultiRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionMultiRel& from) {
    ExtensionMultiRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionMultiRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExtensionMultiRel";
  }
  protected:
  explicit ExtensionMultiRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kCommonFieldNumber = 1,
    kDetailFieldNumber = 3,
  };
  // repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;

  public:
  void clear_inputs() ;
  ::substrait::Rel* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
      mutable_inputs();
  private:
  const ::substrait::Rel& _internal_inputs(int index) const;
  ::substrait::Rel* _internal_add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>& _internal_inputs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>* _internal_mutable_inputs();
  public:
  const ::substrait::Rel& inputs(int index) const;
  ::substrait::Rel* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
      inputs() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .google.protobuf.Any detail = 3 [json_name = "detail"];
  bool has_detail() const;
  void clear_detail() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();
  // @@protoc_insertion_point(class_scope:substrait.ExtensionMultiRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel > inputs_;
    ::substrait::RelCommon* common_;
    ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_ScatterFields final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.ScatterFields) */ {
 public:
  inline ExchangeRel_ScatterFields() : ExchangeRel_ScatterFields(nullptr) {}
  ~ExchangeRel_ScatterFields() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel_ScatterFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_ScatterFields(const ExchangeRel_ScatterFields& from);
  ExchangeRel_ScatterFields(ExchangeRel_ScatterFields&& from) noexcept
    : ExchangeRel_ScatterFields() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_ScatterFields& operator=(const ExchangeRel_ScatterFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_ScatterFields& operator=(ExchangeRel_ScatterFields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_ScatterFields& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRel_ScatterFields* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_ScatterFields*>(
               &_ExchangeRel_ScatterFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ExchangeRel_ScatterFields& a, ExchangeRel_ScatterFields& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_ScatterFields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_ScatterFields* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_ScatterFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_ScatterFields>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel_ScatterFields& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel_ScatterFields& from) {
    ExchangeRel_ScatterFields::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_ScatterFields* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.ScatterFields";
  }
  protected:
  explicit ExchangeRel_ScatterFields(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.Expression.FieldReference fields = 1 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::substrait::Expression_FieldReference* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
      mutable_fields();
  private:
  const ::substrait::Expression_FieldReference& _internal_fields(int index) const;
  ::substrait::Expression_FieldReference* _internal_add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>& _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>* _internal_mutable_fields();
  public:
  const ::substrait::Expression_FieldReference& fields(int index) const;
  ::substrait::Expression_FieldReference* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
      fields() const;
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.ScatterFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_SingleBucketExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.SingleBucketExpression) */ {
 public:
  inline ExchangeRel_SingleBucketExpression() : ExchangeRel_SingleBucketExpression(nullptr) {}
  ~ExchangeRel_SingleBucketExpression() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel_SingleBucketExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_SingleBucketExpression(const ExchangeRel_SingleBucketExpression& from);
  ExchangeRel_SingleBucketExpression(ExchangeRel_SingleBucketExpression&& from) noexcept
    : ExchangeRel_SingleBucketExpression() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_SingleBucketExpression& operator=(const ExchangeRel_SingleBucketExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_SingleBucketExpression& operator=(ExchangeRel_SingleBucketExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_SingleBucketExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRel_SingleBucketExpression* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_SingleBucketExpression*>(
               &_ExchangeRel_SingleBucketExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ExchangeRel_SingleBucketExpression& a, ExchangeRel_SingleBucketExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_SingleBucketExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_SingleBucketExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_SingleBucketExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_SingleBucketExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel_SingleBucketExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel_SingleBucketExpression& from) {
    ExchangeRel_SingleBucketExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_SingleBucketExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.SingleBucketExpression";
  }
  protected:
  explicit ExchangeRel_SingleBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
  };
  // .substrait.Expression expression = 1 [json_name = "expression"];
  bool has_expression() const;
  void clear_expression() ;
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.SingleBucketExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* expression_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_MultiBucketExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.MultiBucketExpression) */ {
 public:
  inline ExchangeRel_MultiBucketExpression() : ExchangeRel_MultiBucketExpression(nullptr) {}
  ~ExchangeRel_MultiBucketExpression() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel_MultiBucketExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_MultiBucketExpression(const ExchangeRel_MultiBucketExpression& from);
  ExchangeRel_MultiBucketExpression(ExchangeRel_MultiBucketExpression&& from) noexcept
    : ExchangeRel_MultiBucketExpression() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_MultiBucketExpression& operator=(const ExchangeRel_MultiBucketExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_MultiBucketExpression& operator=(ExchangeRel_MultiBucketExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_MultiBucketExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRel_MultiBucketExpression* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_MultiBucketExpression*>(
               &_ExchangeRel_MultiBucketExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ExchangeRel_MultiBucketExpression& a, ExchangeRel_MultiBucketExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_MultiBucketExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_MultiBucketExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_MultiBucketExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_MultiBucketExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel_MultiBucketExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel_MultiBucketExpression& from) {
    ExchangeRel_MultiBucketExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_MultiBucketExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.MultiBucketExpression";
  }
  protected:
  explicit ExchangeRel_MultiBucketExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
    kConstrainedToCountFieldNumber = 2,
  };
  // .substrait.Expression expression = 1 [json_name = "expression"];
  bool has_expression() const;
  void clear_expression() ;
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();
  // bool constrained_to_count = 2 [json_name = "constrainedToCount"];
  void clear_constrained_to_count() ;
  bool constrained_to_count() const;
  void set_constrained_to_count(bool value);

  private:
  bool _internal_constrained_to_count() const;
  void _internal_set_constrained_to_count(bool value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.MultiBucketExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* expression_;
    bool constrained_to_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_Broadcast final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.Broadcast) */ {
 public:
  inline ExchangeRel_Broadcast() : ExchangeRel_Broadcast(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ExchangeRel_Broadcast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_Broadcast(const ExchangeRel_Broadcast& from);
  ExchangeRel_Broadcast(ExchangeRel_Broadcast&& from) noexcept
    : ExchangeRel_Broadcast() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_Broadcast& operator=(const ExchangeRel_Broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_Broadcast& operator=(ExchangeRel_Broadcast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_Broadcast& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRel_Broadcast* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_Broadcast*>(
               &_ExchangeRel_Broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ExchangeRel_Broadcast& a, ExchangeRel_Broadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_Broadcast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_Broadcast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_Broadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_Broadcast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ExchangeRel_Broadcast& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ExchangeRel_Broadcast& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.Broadcast";
  }
  protected:
  explicit ExchangeRel_Broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.Broadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_RoundRobin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.RoundRobin) */ {
 public:
  inline ExchangeRel_RoundRobin() : ExchangeRel_RoundRobin(nullptr) {}
  ~ExchangeRel_RoundRobin() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel_RoundRobin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_RoundRobin(const ExchangeRel_RoundRobin& from);
  ExchangeRel_RoundRobin(ExchangeRel_RoundRobin&& from) noexcept
    : ExchangeRel_RoundRobin() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_RoundRobin& operator=(const ExchangeRel_RoundRobin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_RoundRobin& operator=(ExchangeRel_RoundRobin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_RoundRobin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeRel_RoundRobin* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_RoundRobin*>(
               &_ExchangeRel_RoundRobin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ExchangeRel_RoundRobin& a, ExchangeRel_RoundRobin& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_RoundRobin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_RoundRobin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_RoundRobin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_RoundRobin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel_RoundRobin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel_RoundRobin& from) {
    ExchangeRel_RoundRobin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_RoundRobin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.RoundRobin";
  }
  protected:
  explicit ExchangeRel_RoundRobin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExactFieldNumber = 1,
  };
  // bool exact = 1 [json_name = "exact"];
  void clear_exact() ;
  bool exact() const;
  void set_exact(bool value);

  private:
  bool _internal_exact() const;
  void _internal_set_exact(bool value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.RoundRobin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool exact_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel_ExchangeTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel.ExchangeTarget) */ {
 public:
  inline ExchangeRel_ExchangeTarget() : ExchangeRel_ExchangeTarget(nullptr) {}
  ~ExchangeRel_ExchangeTarget() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel_ExchangeTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel_ExchangeTarget(const ExchangeRel_ExchangeTarget& from);
  ExchangeRel_ExchangeTarget(ExchangeRel_ExchangeTarget&& from) noexcept
    : ExchangeRel_ExchangeTarget() {
    *this = ::std::move(from);
  }

  inline ExchangeRel_ExchangeTarget& operator=(const ExchangeRel_ExchangeTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel_ExchangeTarget& operator=(ExchangeRel_ExchangeTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel_ExchangeTarget& default_instance() {
    return *internal_default_instance();
  }
  enum TargetTypeCase {
    kUri = 2,
    kExtended = 3,
    TARGET_TYPE_NOT_SET = 0,
  };

  static inline const ExchangeRel_ExchangeTarget* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel_ExchangeTarget*>(
               &_ExchangeRel_ExchangeTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ExchangeRel_ExchangeTarget& a, ExchangeRel_ExchangeTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel_ExchangeTarget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel_ExchangeTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel_ExchangeTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel_ExchangeTarget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel_ExchangeTarget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel_ExchangeTarget& from) {
    ExchangeRel_ExchangeTarget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel_ExchangeTarget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel.ExchangeTarget";
  }
  protected:
  explicit ExchangeRel_ExchangeTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionIdFieldNumber = 1,
    kUriFieldNumber = 2,
    kExtendedFieldNumber = 3,
  };
  // repeated int32 partition_id = 1 [json_name = "partitionId"];
  int partition_id_size() const;
  private:
  int _internal_partition_id_size() const;

  public:
  void clear_partition_id() ;
  ::int32_t partition_id(int index) const;
  void set_partition_id(int index, ::int32_t value);
  void add_partition_id(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& partition_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_partition_id();

  private:
  ::int32_t _internal_partition_id(int index) const;
  void _internal_add_partition_id(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_partition_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_partition_id();

  public:
  // string uri = 2 [json_name = "uri"];
  bool has_uri() const;
  void clear_uri() ;
  const std::string& uri() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // .google.protobuf.Any extended = 3 [json_name = "extended"];
  bool has_extended() const;
  private:
  bool _internal_has_extended() const;

  public:
  void clear_extended() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& extended() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_extended();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_extended();
  void set_allocated_extended(::PROTOBUF_NAMESPACE_ID::Any* extended);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_extended() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_extended();
  public:
  void unsafe_arena_set_allocated_extended(
      ::PROTOBUF_NAMESPACE_ID::Any* extended);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_extended();
  void clear_target_type();
  TargetTypeCase target_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel.ExchangeTarget)
 private:
  class _Internal;
  void set_has_uri();
  void set_has_extended();

  inline bool has_target_type() const;
  inline void clear_has_target_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> partition_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _partition_id_cached_byte_size_;
    union TargetTypeUnion {
      constexpr TargetTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
      ::PROTOBUF_NAMESPACE_ID::Any* extended_;
    } target_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExchangeRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExchangeRel) */ {
 public:
  inline ExchangeRel() : ExchangeRel(nullptr) {}
  ~ExchangeRel() override;
  explicit PROTOBUF_CONSTEXPR ExchangeRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeRel(const ExchangeRel& from);
  ExchangeRel(ExchangeRel&& from) noexcept
    : ExchangeRel() {
    *this = ::std::move(from);
  }

  inline ExchangeRel& operator=(const ExchangeRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeRel& operator=(ExchangeRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeRel& default_instance() {
    return *internal_default_instance();
  }
  enum ExchangeKindCase {
    kScatterByFields = 5,
    kSingleTarget = 6,
    kMultiTarget = 7,
    kRoundRobin = 8,
    kBroadcast = 9,
    EXCHANGE_KIND_NOT_SET = 0,
  };

  static inline const ExchangeRel* internal_default_instance() {
    return reinterpret_cast<const ExchangeRel*>(
               &_ExchangeRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ExchangeRel& a, ExchangeRel& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExchangeRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExchangeRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExchangeRel& from) {
    ExchangeRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExchangeRel";
  }
  protected:
  explicit ExchangeRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ExchangeRel_ScatterFields ScatterFields;
  typedef ExchangeRel_SingleBucketExpression SingleBucketExpression;
  typedef ExchangeRel_MultiBucketExpression MultiBucketExpression;
  typedef ExchangeRel_Broadcast Broadcast;
  typedef ExchangeRel_RoundRobin RoundRobin;
  typedef ExchangeRel_ExchangeTarget ExchangeTarget;

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 4,
    kCommonFieldNumber = 1,
    kInputFieldNumber = 2,
    kAdvancedExtensionFieldNumber = 10,
    kPartitionCountFieldNumber = 3,
    kScatterByFieldsFieldNumber = 5,
    kSingleTargetFieldNumber = 6,
    kMultiTargetFieldNumber = 7,
    kRoundRobinFieldNumber = 8,
    kBroadcastFieldNumber = 9,
  };
  // repeated .substrait.ExchangeRel.ExchangeTarget targets = 4 [json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;

  public:
  void clear_targets() ;
  ::substrait::ExchangeRel_ExchangeTarget* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExchangeRel_ExchangeTarget >*
      mutable_targets();
  private:
  const ::substrait::ExchangeRel_ExchangeTarget& _internal_targets(int index) const;
  ::substrait::ExchangeRel_ExchangeTarget* _internal_add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ExchangeRel_ExchangeTarget>& _internal_targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ExchangeRel_ExchangeTarget>* _internal_mutable_targets();
  public:
  const ::substrait::ExchangeRel_ExchangeTarget& targets(int index) const;
  ::substrait::ExchangeRel_ExchangeTarget* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExchangeRel_ExchangeTarget >&
      targets() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // int32 partition_count = 3 [json_name = "partitionCount"];
  void clear_partition_count() ;
  ::int32_t partition_count() const;
  void set_partition_count(::int32_t value);

  private:
  ::int32_t _internal_partition_count() const;
  void _internal_set_partition_count(::int32_t value);

  public:
  // .substrait.ExchangeRel.ScatterFields scatter_by_fields = 5 [json_name = "scatterByFields"];
  bool has_scatter_by_fields() const;
  private:
  bool _internal_has_scatter_by_fields() const;

  public:
  void clear_scatter_by_fields() ;
  const ::substrait::ExchangeRel_ScatterFields& scatter_by_fields() const;
  PROTOBUF_NODISCARD ::substrait::ExchangeRel_ScatterFields* release_scatter_by_fields();
  ::substrait::ExchangeRel_ScatterFields* mutable_scatter_by_fields();
  void set_allocated_scatter_by_fields(::substrait::ExchangeRel_ScatterFields* scatter_by_fields);
  private:
  const ::substrait::ExchangeRel_ScatterFields& _internal_scatter_by_fields() const;
  ::substrait::ExchangeRel_ScatterFields* _internal_mutable_scatter_by_fields();
  public:
  void unsafe_arena_set_allocated_scatter_by_fields(
      ::substrait::ExchangeRel_ScatterFields* scatter_by_fields);
  ::substrait::ExchangeRel_ScatterFields* unsafe_arena_release_scatter_by_fields();
  // .substrait.ExchangeRel.SingleBucketExpression single_target = 6 [json_name = "singleTarget"];
  bool has_single_target() const;
  private:
  bool _internal_has_single_target() const;

  public:
  void clear_single_target() ;
  const ::substrait::ExchangeRel_SingleBucketExpression& single_target() const;
  PROTOBUF_NODISCARD ::substrait::ExchangeRel_SingleBucketExpression* release_single_target();
  ::substrait::ExchangeRel_SingleBucketExpression* mutable_single_target();
  void set_allocated_single_target(::substrait::ExchangeRel_SingleBucketExpression* single_target);
  private:
  const ::substrait::ExchangeRel_SingleBucketExpression& _internal_single_target() const;
  ::substrait::ExchangeRel_SingleBucketExpression* _internal_mutable_single_target();
  public:
  void unsafe_arena_set_allocated_single_target(
      ::substrait::ExchangeRel_SingleBucketExpression* single_target);
  ::substrait::ExchangeRel_SingleBucketExpression* unsafe_arena_release_single_target();
  // .substrait.ExchangeRel.MultiBucketExpression multi_target = 7 [json_name = "multiTarget"];
  bool has_multi_target() const;
  private:
  bool _internal_has_multi_target() const;

  public:
  void clear_multi_target() ;
  const ::substrait::ExchangeRel_MultiBucketExpression& multi_target() const;
  PROTOBUF_NODISCARD ::substrait::ExchangeRel_MultiBucketExpression* release_multi_target();
  ::substrait::ExchangeRel_MultiBucketExpression* mutable_multi_target();
  void set_allocated_multi_target(::substrait::ExchangeRel_MultiBucketExpression* multi_target);
  private:
  const ::substrait::ExchangeRel_MultiBucketExpression& _internal_multi_target() const;
  ::substrait::ExchangeRel_MultiBucketExpression* _internal_mutable_multi_target();
  public:
  void unsafe_arena_set_allocated_multi_target(
      ::substrait::ExchangeRel_MultiBucketExpression* multi_target);
  ::substrait::ExchangeRel_MultiBucketExpression* unsafe_arena_release_multi_target();
  // .substrait.ExchangeRel.RoundRobin round_robin = 8 [json_name = "roundRobin"];
  bool has_round_robin() const;
  private:
  bool _internal_has_round_robin() const;

  public:
  void clear_round_robin() ;
  const ::substrait::ExchangeRel_RoundRobin& round_robin() const;
  PROTOBUF_NODISCARD ::substrait::ExchangeRel_RoundRobin* release_round_robin();
  ::substrait::ExchangeRel_RoundRobin* mutable_round_robin();
  void set_allocated_round_robin(::substrait::ExchangeRel_RoundRobin* round_robin);
  private:
  const ::substrait::ExchangeRel_RoundRobin& _internal_round_robin() const;
  ::substrait::ExchangeRel_RoundRobin* _internal_mutable_round_robin();
  public:
  void unsafe_arena_set_allocated_round_robin(
      ::substrait::ExchangeRel_RoundRobin* round_robin);
  ::substrait::ExchangeRel_RoundRobin* unsafe_arena_release_round_robin();
  // .substrait.ExchangeRel.Broadcast broadcast = 9 [json_name = "broadcast"];
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;

  public:
  void clear_broadcast() ;
  const ::substrait::ExchangeRel_Broadcast& broadcast() const;
  PROTOBUF_NODISCARD ::substrait::ExchangeRel_Broadcast* release_broadcast();
  ::substrait::ExchangeRel_Broadcast* mutable_broadcast();
  void set_allocated_broadcast(::substrait::ExchangeRel_Broadcast* broadcast);
  private:
  const ::substrait::ExchangeRel_Broadcast& _internal_broadcast() const;
  ::substrait::ExchangeRel_Broadcast* _internal_mutable_broadcast();
  public:
  void unsafe_arena_set_allocated_broadcast(
      ::substrait::ExchangeRel_Broadcast* broadcast);
  ::substrait::ExchangeRel_Broadcast* unsafe_arena_release_broadcast();
  void clear_exchange_kind();
  ExchangeKindCase exchange_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ExchangeRel)
 private:
  class _Internal;
  void set_has_scatter_by_fields();
  void set_has_single_target();
  void set_has_multi_target();
  void set_has_round_robin();
  void set_has_broadcast();

  inline bool has_exchange_kind() const;
  inline void clear_has_exchange_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExchangeRel_ExchangeTarget > targets_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* input_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    ::int32_t partition_count_;
    union ExchangeKindUnion {
      constexpr ExchangeKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::ExchangeRel_ScatterFields* scatter_by_fields_;
      ::substrait::ExchangeRel_SingleBucketExpression* single_target_;
      ::substrait::ExchangeRel_MultiBucketExpression* multi_target_;
      ::substrait::ExchangeRel_RoundRobin* round_robin_;
      ::substrait::ExchangeRel_Broadcast* broadcast_;
    } exchange_kind_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class RelRoot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.RelRoot) */ {
 public:
  inline RelRoot() : RelRoot(nullptr) {}
  ~RelRoot() override;
  explicit PROTOBUF_CONSTEXPR RelRoot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RelRoot(const RelRoot& from);
  RelRoot(RelRoot&& from) noexcept
    : RelRoot() {
    *this = ::std::move(from);
  }

  inline RelRoot& operator=(const RelRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RelRoot& operator=(RelRoot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RelRoot& default_instance() {
    return *internal_default_instance();
  }
  static inline const RelRoot* internal_default_instance() {
    return reinterpret_cast<const RelRoot*>(
               &_RelRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RelRoot& a, RelRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(RelRoot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RelRoot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RelRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RelRoot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RelRoot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RelRoot& from) {
    RelRoot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RelRoot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.RelRoot";
  }
  protected:
  explicit RelRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 2,
    kInputFieldNumber = 1,
  };
  // repeated string names = 2 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();

  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // .substrait.Rel input = 1 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // @@protoc_insertion_point(class_scope:substrait.RelRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::substrait::Rel* input_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Rel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Rel) */ {
 public:
  inline Rel() : Rel(nullptr) {}
  ~Rel() override;
  explicit PROTOBUF_CONSTEXPR Rel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rel(const Rel& from);
  Rel(Rel&& from) noexcept
    : Rel() {
    *this = ::std::move(from);
  }

  inline Rel& operator=(const Rel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rel& operator=(Rel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rel& default_instance() {
    return *internal_default_instance();
  }
  enum RelTypeCase {
    kRead = 1,
    kFilter = 2,
    kFetch = 3,
    kAggregate = 4,
    kSort = 5,
    kJoin = 6,
    kProject = 7,
    kSet = 8,
    kExtensionSingle = 9,
    kExtensionMulti = 10,
    kExtensionLeaf = 11,
    kCross = 12,
    kHashJoin = 13,
    kMergeJoin = 14,
    REL_TYPE_NOT_SET = 0,
  };

  static inline const Rel* internal_default_instance() {
    return reinterpret_cast<const Rel*>(
               &_Rel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Rel& a, Rel& b) {
    a.Swap(&b);
  }
  inline void Swap(Rel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rel& from) {
    Rel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Rel";
  }
  protected:
  explicit Rel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
    kFilterFieldNumber = 2,
    kFetchFieldNumber = 3,
    kAggregateFieldNumber = 4,
    kSortFieldNumber = 5,
    kJoinFieldNumber = 6,
    kProjectFieldNumber = 7,
    kSetFieldNumber = 8,
    kExtensionSingleFieldNumber = 9,
    kExtensionMultiFieldNumber = 10,
    kExtensionLeafFieldNumber = 11,
    kCrossFieldNumber = 12,
    kHashJoinFieldNumber = 13,
    kMergeJoinFieldNumber = 14,
  };
  // .substrait.ReadRel read = 1 [json_name = "read"];
  bool has_read() const;
  private:
  bool _internal_has_read() const;

  public:
  void clear_read() ;
  const ::substrait::ReadRel& read() const;
  PROTOBUF_NODISCARD ::substrait::ReadRel* release_read();
  ::substrait::ReadRel* mutable_read();
  void set_allocated_read(::substrait::ReadRel* read);
  private:
  const ::substrait::ReadRel& _internal_read() const;
  ::substrait::ReadRel* _internal_mutable_read();
  public:
  void unsafe_arena_set_allocated_read(
      ::substrait::ReadRel* read);
  ::substrait::ReadRel* unsafe_arena_release_read();
  // .substrait.FilterRel filter = 2 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;

  public:
  void clear_filter() ;
  const ::substrait::FilterRel& filter() const;
  PROTOBUF_NODISCARD ::substrait::FilterRel* release_filter();
  ::substrait::FilterRel* mutable_filter();
  void set_allocated_filter(::substrait::FilterRel* filter);
  private:
  const ::substrait::FilterRel& _internal_filter() const;
  ::substrait::FilterRel* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::substrait::FilterRel* filter);
  ::substrait::FilterRel* unsafe_arena_release_filter();
  // .substrait.FetchRel fetch = 3 [json_name = "fetch"];
  bool has_fetch() const;
  private:
  bool _internal_has_fetch() const;

  public:
  void clear_fetch() ;
  const ::substrait::FetchRel& fetch() const;
  PROTOBUF_NODISCARD ::substrait::FetchRel* release_fetch();
  ::substrait::FetchRel* mutable_fetch();
  void set_allocated_fetch(::substrait::FetchRel* fetch);
  private:
  const ::substrait::FetchRel& _internal_fetch() const;
  ::substrait::FetchRel* _internal_mutable_fetch();
  public:
  void unsafe_arena_set_allocated_fetch(
      ::substrait::FetchRel* fetch);
  ::substrait::FetchRel* unsafe_arena_release_fetch();
  // .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
  bool has_aggregate() const;
  private:
  bool _internal_has_aggregate() const;

  public:
  void clear_aggregate() ;
  const ::substrait::AggregateRel& aggregate() const;
  PROTOBUF_NODISCARD ::substrait::AggregateRel* release_aggregate();
  ::substrait::AggregateRel* mutable_aggregate();
  void set_allocated_aggregate(::substrait::AggregateRel* aggregate);
  private:
  const ::substrait::AggregateRel& _internal_aggregate() const;
  ::substrait::AggregateRel* _internal_mutable_aggregate();
  public:
  void unsafe_arena_set_allocated_aggregate(
      ::substrait::AggregateRel* aggregate);
  ::substrait::AggregateRel* unsafe_arena_release_aggregate();
  // .substrait.SortRel sort = 5 [json_name = "sort"];
  bool has_sort() const;
  private:
  bool _internal_has_sort() const;

  public:
  void clear_sort() ;
  const ::substrait::SortRel& sort() const;
  PROTOBUF_NODISCARD ::substrait::SortRel* release_sort();
  ::substrait::SortRel* mutable_sort();
  void set_allocated_sort(::substrait::SortRel* sort);
  private:
  const ::substrait::SortRel& _internal_sort() const;
  ::substrait::SortRel* _internal_mutable_sort();
  public:
  void unsafe_arena_set_allocated_sort(
      ::substrait::SortRel* sort);
  ::substrait::SortRel* unsafe_arena_release_sort();
  // .substrait.JoinRel join = 6 [json_name = "join"];
  bool has_join() const;
  private:
  bool _internal_has_join() const;

  public:
  void clear_join() ;
  const ::substrait::JoinRel& join() const;
  PROTOBUF_NODISCARD ::substrait::JoinRel* release_join();
  ::substrait::JoinRel* mutable_join();
  void set_allocated_join(::substrait::JoinRel* join);
  private:
  const ::substrait::JoinRel& _internal_join() const;
  ::substrait::JoinRel* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::substrait::JoinRel* join);
  ::substrait::JoinRel* unsafe_arena_release_join();
  // .substrait.ProjectRel project = 7 [json_name = "project"];
  bool has_project() const;
  private:
  bool _internal_has_project() const;

  public:
  void clear_project() ;
  const ::substrait::ProjectRel& project() const;
  PROTOBUF_NODISCARD ::substrait::ProjectRel* release_project();
  ::substrait::ProjectRel* mutable_project();
  void set_allocated_project(::substrait::ProjectRel* project);
  private:
  const ::substrait::ProjectRel& _internal_project() const;
  ::substrait::ProjectRel* _internal_mutable_project();
  public:
  void unsafe_arena_set_allocated_project(
      ::substrait::ProjectRel* project);
  ::substrait::ProjectRel* unsafe_arena_release_project();
  // .substrait.SetRel set = 8 [json_name = "set"];
  bool has_set() const;
  private:
  bool _internal_has_set() const;

  public:
  void clear_set() ;
  const ::substrait::SetRel& set() const;
  PROTOBUF_NODISCARD ::substrait::SetRel* release_set();
  ::substrait::SetRel* mutable_set();
  void set_allocated_set(::substrait::SetRel* set);
  private:
  const ::substrait::SetRel& _internal_set() const;
  ::substrait::SetRel* _internal_mutable_set();
  public:
  void unsafe_arena_set_allocated_set(
      ::substrait::SetRel* set);
  ::substrait::SetRel* unsafe_arena_release_set();
  // .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
  bool has_extension_single() const;
  private:
  bool _internal_has_extension_single() const;

  public:
  void clear_extension_single() ;
  const ::substrait::ExtensionSingleRel& extension_single() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionSingleRel* release_extension_single();
  ::substrait::ExtensionSingleRel* mutable_extension_single();
  void set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single);
  private:
  const ::substrait::ExtensionSingleRel& _internal_extension_single() const;
  ::substrait::ExtensionSingleRel* _internal_mutable_extension_single();
  public:
  void unsafe_arena_set_allocated_extension_single(
      ::substrait::ExtensionSingleRel* extension_single);
  ::substrait::ExtensionSingleRel* unsafe_arena_release_extension_single();
  // .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
  bool has_extension_multi() const;
  private:
  bool _internal_has_extension_multi() const;

  public:
  void clear_extension_multi() ;
  const ::substrait::ExtensionMultiRel& extension_multi() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionMultiRel* release_extension_multi();
  ::substrait::ExtensionMultiRel* mutable_extension_multi();
  void set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi);
  private:
  const ::substrait::ExtensionMultiRel& _internal_extension_multi() const;
  ::substrait::ExtensionMultiRel* _internal_mutable_extension_multi();
  public:
  void unsafe_arena_set_allocated_extension_multi(
      ::substrait::ExtensionMultiRel* extension_multi);
  ::substrait::ExtensionMultiRel* unsafe_arena_release_extension_multi();
  // .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
  bool has_extension_leaf() const;
  private:
  bool _internal_has_extension_leaf() const;

  public:
  void clear_extension_leaf() ;
  const ::substrait::ExtensionLeafRel& extension_leaf() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionLeafRel* release_extension_leaf();
  ::substrait::ExtensionLeafRel* mutable_extension_leaf();
  void set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf);
  private:
  const ::substrait::ExtensionLeafRel& _internal_extension_leaf() const;
  ::substrait::ExtensionLeafRel* _internal_mutable_extension_leaf();
  public:
  void unsafe_arena_set_allocated_extension_leaf(
      ::substrait::ExtensionLeafRel* extension_leaf);
  ::substrait::ExtensionLeafRel* unsafe_arena_release_extension_leaf();
  // .substrait.CrossRel cross = 12 [json_name = "cross"];
  bool has_cross() const;
  private:
  bool _internal_has_cross() const;

  public:
  void clear_cross() ;
  const ::substrait::CrossRel& cross() const;
  PROTOBUF_NODISCARD ::substrait::CrossRel* release_cross();
  ::substrait::CrossRel* mutable_cross();
  void set_allocated_cross(::substrait::CrossRel* cross);
  private:
  const ::substrait::CrossRel& _internal_cross() const;
  ::substrait::CrossRel* _internal_mutable_cross();
  public:
  void unsafe_arena_set_allocated_cross(
      ::substrait::CrossRel* cross);
  ::substrait::CrossRel* unsafe_arena_release_cross();
  // .substrait.HashJoinRel hash_join = 13 [json_name = "hashJoin"];
  bool has_hash_join() const;
  private:
  bool _internal_has_hash_join() const;

  public:
  void clear_hash_join() ;
  const ::substrait::HashJoinRel& hash_join() const;
  PROTOBUF_NODISCARD ::substrait::HashJoinRel* release_hash_join();
  ::substrait::HashJoinRel* mutable_hash_join();
  void set_allocated_hash_join(::substrait::HashJoinRel* hash_join);
  private:
  const ::substrait::HashJoinRel& _internal_hash_join() const;
  ::substrait::HashJoinRel* _internal_mutable_hash_join();
  public:
  void unsafe_arena_set_allocated_hash_join(
      ::substrait::HashJoinRel* hash_join);
  ::substrait::HashJoinRel* unsafe_arena_release_hash_join();
  // .substrait.MergeJoinRel merge_join = 14 [json_name = "mergeJoin"];
  bool has_merge_join() const;
  private:
  bool _internal_has_merge_join() const;

  public:
  void clear_merge_join() ;
  const ::substrait::MergeJoinRel& merge_join() const;
  PROTOBUF_NODISCARD ::substrait::MergeJoinRel* release_merge_join();
  ::substrait::MergeJoinRel* mutable_merge_join();
  void set_allocated_merge_join(::substrait::MergeJoinRel* merge_join);
  private:
  const ::substrait::MergeJoinRel& _internal_merge_join() const;
  ::substrait::MergeJoinRel* _internal_mutable_merge_join();
  public:
  void unsafe_arena_set_allocated_merge_join(
      ::substrait::MergeJoinRel* merge_join);
  ::substrait::MergeJoinRel* unsafe_arena_release_merge_join();
  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Rel)
 private:
  class _Internal;
  void set_has_read();
  void set_has_filter();
  void set_has_fetch();
  void set_has_aggregate();
  void set_has_sort();
  void set_has_join();
  void set_has_project();
  void set_has_set();
  void set_has_extension_single();
  void set_has_extension_multi();
  void set_has_extension_leaf();
  void set_has_cross();
  void set_has_hash_join();
  void set_has_merge_join();

  inline bool has_rel_type() const;
  inline void clear_has_rel_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RelTypeUnion {
      constexpr RelTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::ReadRel* read_;
      ::substrait::FilterRel* filter_;
      ::substrait::FetchRel* fetch_;
      ::substrait::AggregateRel* aggregate_;
      ::substrait::SortRel* sort_;
      ::substrait::JoinRel* join_;
      ::substrait::ProjectRel* project_;
      ::substrait::SetRel* set_;
      ::substrait::ExtensionSingleRel* extension_single_;
      ::substrait::ExtensionMultiRel* extension_multi_;
      ::substrait::ExtensionLeafRel* extension_leaf_;
      ::substrait::CrossRel* cross_;
      ::substrait::HashJoinRel* hash_join_;
      ::substrait::MergeJoinRel* merge_join_;
    } rel_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class NamedObjectWrite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.NamedObjectWrite) */ {
 public:
  inline NamedObjectWrite() : NamedObjectWrite(nullptr) {}
  ~NamedObjectWrite() override;
  explicit PROTOBUF_CONSTEXPR NamedObjectWrite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedObjectWrite(const NamedObjectWrite& from);
  NamedObjectWrite(NamedObjectWrite&& from) noexcept
    : NamedObjectWrite() {
    *this = ::std::move(from);
  }

  inline NamedObjectWrite& operator=(const NamedObjectWrite& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedObjectWrite& operator=(NamedObjectWrite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamedObjectWrite& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedObjectWrite* internal_default_instance() {
    return reinterpret_cast<const NamedObjectWrite*>(
               &_NamedObjectWrite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(NamedObjectWrite& a, NamedObjectWrite& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedObjectWrite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedObjectWrite* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamedObjectWrite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamedObjectWrite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamedObjectWrite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamedObjectWrite& from) {
    NamedObjectWrite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedObjectWrite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.NamedObjectWrite";
  }
  protected:
  explicit NamedObjectWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
    kAdvancedExtensionFieldNumber = 10,
  };
  // repeated string names = 1 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();

  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // @@protoc_insertion_point(class_scope:substrait.NamedObjectWrite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class ExtensionObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtensionObject) */ {
 public:
  inline ExtensionObject() : ExtensionObject(nullptr) {}
  ~ExtensionObject() override;
  explicit PROTOBUF_CONSTEXPR ExtensionObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtensionObject(const ExtensionObject& from);
  ExtensionObject(ExtensionObject&& from) noexcept
    : ExtensionObject() {
    *this = ::std::move(from);
  }

  inline ExtensionObject& operator=(const ExtensionObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionObject& operator=(ExtensionObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtensionObject* internal_default_instance() {
    return reinterpret_cast<const ExtensionObject*>(
               &_ExtensionObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ExtensionObject& a, ExtensionObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtensionObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtensionObject& from) {
    ExtensionObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.ExtensionObject";
  }
  protected:
  explicit ExtensionObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 1,
  };
  // .google.protobuf.Any detail = 1 [json_name = "detail"];
  bool has_detail() const;
  void clear_detail() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& detail() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_detail();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_detail();
  void set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_detail();
  public:
  void unsafe_arena_set_allocated_detail(
      ::PROTOBUF_NAMESPACE_ID::Any* detail);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_detail();
  // @@protoc_insertion_point(class_scope:substrait.ExtensionObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* detail_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class DdlRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.DdlRel) */ {
 public:
  inline DdlRel() : DdlRel(nullptr) {}
  ~DdlRel() override;
  explicit PROTOBUF_CONSTEXPR DdlRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DdlRel(const DdlRel& from);
  DdlRel(DdlRel&& from) noexcept
    : DdlRel() {
    *this = ::std::move(from);
  }

  inline DdlRel& operator=(const DdlRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdlRel& operator=(DdlRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DdlRel& default_instance() {
    return *internal_default_instance();
  }
  enum WriteTypeCase {
    kNamedObject = 1,
    kExtensionObject = 2,
    WRITE_TYPE_NOT_SET = 0,
  };

  static inline const DdlRel* internal_default_instance() {
    return reinterpret_cast<const DdlRel*>(
               &_DdlRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DdlRel& a, DdlRel& b) {
    a.Swap(&b);
  }
  inline void Swap(DdlRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DdlRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DdlRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DdlRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DdlRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DdlRel& from) {
    DdlRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdlRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.DdlRel";
  }
  protected:
  explicit DdlRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DdlObject = DdlRel_DdlObject;
  static constexpr DdlObject DDL_OBJECT_UNSPECIFIED = DdlRel_DdlObject_DDL_OBJECT_UNSPECIFIED;
  static constexpr DdlObject DDL_OBJECT_TABLE = DdlRel_DdlObject_DDL_OBJECT_TABLE;
  static constexpr DdlObject DDL_OBJECT_VIEW = DdlRel_DdlObject_DDL_OBJECT_VIEW;
  static inline bool DdlObject_IsValid(int value) {
    return DdlRel_DdlObject_IsValid(value);
  }
  static constexpr DdlObject DdlObject_MIN = DdlRel_DdlObject_DdlObject_MIN;
  static constexpr DdlObject DdlObject_MAX = DdlRel_DdlObject_DdlObject_MAX;
  static constexpr int DdlObject_ARRAYSIZE = DdlRel_DdlObject_DdlObject_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlObject_descriptor() {
    return DdlRel_DdlObject_descriptor();
  }
  template <typename T>
  static inline const std::string& DdlObject_Name(T value) {
    return DdlRel_DdlObject_Name(value);
  }
  static inline bool DdlObject_Parse(absl::string_view name, DdlObject* value) {
    return DdlRel_DdlObject_Parse(name, value);
  }

  using DdlOp = DdlRel_DdlOp;
  static constexpr DdlOp DDL_OP_UNSPECIFIED = DdlRel_DdlOp_DDL_OP_UNSPECIFIED;
  static constexpr DdlOp DDL_OP_CREATE = DdlRel_DdlOp_DDL_OP_CREATE;
  static constexpr DdlOp DDL_OP_CREATE_OR_REPLACE = DdlRel_DdlOp_DDL_OP_CREATE_OR_REPLACE;
  static constexpr DdlOp DDL_OP_ALTER = DdlRel_DdlOp_DDL_OP_ALTER;
  static constexpr DdlOp DDL_OP_DROP = DdlRel_DdlOp_DDL_OP_DROP;
  static constexpr DdlOp DDL_OP_DROP_IF_EXIST = DdlRel_DdlOp_DDL_OP_DROP_IF_EXIST;
  static inline bool DdlOp_IsValid(int value) {
    return DdlRel_DdlOp_IsValid(value);
  }
  static constexpr DdlOp DdlOp_MIN = DdlRel_DdlOp_DdlOp_MIN;
  static constexpr DdlOp DdlOp_MAX = DdlRel_DdlOp_DdlOp_MAX;
  static constexpr int DdlOp_ARRAYSIZE = DdlRel_DdlOp_DdlOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DdlOp_descriptor() {
    return DdlRel_DdlOp_descriptor();
  }
  template <typename T>
  static inline const std::string& DdlOp_Name(T value) {
    return DdlRel_DdlOp_Name(value);
  }
  static inline bool DdlOp_Parse(absl::string_view name, DdlOp* value) {
    return DdlRel_DdlOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableSchemaFieldNumber = 3,
    kTableDefaultsFieldNumber = 4,
    kViewDefinitionFieldNumber = 7,
    kObjectFieldNumber = 5,
    kOpFieldNumber = 6,
    kNamedObjectFieldNumber = 1,
    kExtensionObjectFieldNumber = 2,
  };
  // .substrait.NamedStruct table_schema = 3 [json_name = "tableSchema"];
  bool has_table_schema() const;
  void clear_table_schema() ;
  const ::substrait::NamedStruct& table_schema() const;
  PROTOBUF_NODISCARD ::substrait::NamedStruct* release_table_schema();
  ::substrait::NamedStruct* mutable_table_schema();
  void set_allocated_table_schema(::substrait::NamedStruct* table_schema);
  private:
  const ::substrait::NamedStruct& _internal_table_schema() const;
  ::substrait::NamedStruct* _internal_mutable_table_schema();
  public:
  void unsafe_arena_set_allocated_table_schema(
      ::substrait::NamedStruct* table_schema);
  ::substrait::NamedStruct* unsafe_arena_release_table_schema();
  // .substrait.Expression.Literal.Struct table_defaults = 4 [json_name = "tableDefaults"];
  bool has_table_defaults() const;
  void clear_table_defaults() ;
  const ::substrait::Expression_Literal_Struct& table_defaults() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_Struct* release_table_defaults();
  ::substrait::Expression_Literal_Struct* mutable_table_defaults();
  void set_allocated_table_defaults(::substrait::Expression_Literal_Struct* table_defaults);
  private:
  const ::substrait::Expression_Literal_Struct& _internal_table_defaults() const;
  ::substrait::Expression_Literal_Struct* _internal_mutable_table_defaults();
  public:
  void unsafe_arena_set_allocated_table_defaults(
      ::substrait::Expression_Literal_Struct* table_defaults);
  ::substrait::Expression_Literal_Struct* unsafe_arena_release_table_defaults();
  // .substrait.Rel view_definition = 7 [json_name = "viewDefinition"];
  bool has_view_definition() const;
  void clear_view_definition() ;
  const ::substrait::Rel& view_definition() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_view_definition();
  ::substrait::Rel* mutable_view_definition();
  void set_allocated_view_definition(::substrait::Rel* view_definition);
  private:
  const ::substrait::Rel& _internal_view_definition() const;
  ::substrait::Rel* _internal_mutable_view_definition();
  public:
  void unsafe_arena_set_allocated_view_definition(
      ::substrait::Rel* view_definition);
  ::substrait::Rel* unsafe_arena_release_view_definition();
  // .substrait.DdlRel.DdlObject object = 5 [json_name = "object"];
  void clear_object() ;
  ::substrait::DdlRel_DdlObject object() const;
  void set_object(::substrait::DdlRel_DdlObject value);

  private:
  ::substrait::DdlRel_DdlObject _internal_object() const;
  void _internal_set_object(::substrait::DdlRel_DdlObject value);

  public:
  // .substrait.DdlRel.DdlOp op = 6 [json_name = "op"];
  void clear_op() ;
  ::substrait::DdlRel_DdlOp op() const;
  void set_op(::substrait::DdlRel_DdlOp value);

  private:
  ::substrait::DdlRel_DdlOp _internal_op() const;
  void _internal_set_op(::substrait::DdlRel_DdlOp value);

  public:
  // .substrait.NamedObjectWrite named_object = 1 [json_name = "namedObject"];
  bool has_named_object() const;
  private:
  bool _internal_has_named_object() const;

  public:
  void clear_named_object() ;
  const ::substrait::NamedObjectWrite& named_object() const;
  PROTOBUF_NODISCARD ::substrait::NamedObjectWrite* release_named_object();
  ::substrait::NamedObjectWrite* mutable_named_object();
  void set_allocated_named_object(::substrait::NamedObjectWrite* named_object);
  private:
  const ::substrait::NamedObjectWrite& _internal_named_object() const;
  ::substrait::NamedObjectWrite* _internal_mutable_named_object();
  public:
  void unsafe_arena_set_allocated_named_object(
      ::substrait::NamedObjectWrite* named_object);
  ::substrait::NamedObjectWrite* unsafe_arena_release_named_object();
  // .substrait.ExtensionObject extension_object = 2 [json_name = "extensionObject"];
  bool has_extension_object() const;
  private:
  bool _internal_has_extension_object() const;

  public:
  void clear_extension_object() ;
  const ::substrait::ExtensionObject& extension_object() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionObject* release_extension_object();
  ::substrait::ExtensionObject* mutable_extension_object();
  void set_allocated_extension_object(::substrait::ExtensionObject* extension_object);
  private:
  const ::substrait::ExtensionObject& _internal_extension_object() const;
  ::substrait::ExtensionObject* _internal_mutable_extension_object();
  public:
  void unsafe_arena_set_allocated_extension_object(
      ::substrait::ExtensionObject* extension_object);
  ::substrait::ExtensionObject* unsafe_arena_release_extension_object();
  void clear_write_type();
  WriteTypeCase write_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.DdlRel)
 private:
  class _Internal;
  void set_has_named_object();
  void set_has_extension_object();

  inline bool has_write_type() const;
  inline void clear_has_write_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::NamedStruct* table_schema_;
    ::substrait::Expression_Literal_Struct* table_defaults_;
    ::substrait::Rel* view_definition_;
    int object_;
    int op_;
    union WriteTypeUnion {
      constexpr WriteTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::NamedObjectWrite* named_object_;
      ::substrait::ExtensionObject* extension_object_;
    } write_type_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class WriteRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.WriteRel) */ {
 public:
  inline WriteRel() : WriteRel(nullptr) {}
  ~WriteRel() override;
  explicit PROTOBUF_CONSTEXPR WriteRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRel(const WriteRel& from);
  WriteRel(WriteRel&& from) noexcept
    : WriteRel() {
    *this = ::std::move(from);
  }

  inline WriteRel& operator=(const WriteRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRel& operator=(WriteRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRel& default_instance() {
    return *internal_default_instance();
  }
  enum WriteTypeCase {
    kNamedTable = 1,
    kExtensionTable = 2,
    WRITE_TYPE_NOT_SET = 0,
  };

  static inline const WriteRel* internal_default_instance() {
    return reinterpret_cast<const WriteRel*>(
               &_WriteRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(WriteRel& a, WriteRel& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WriteRel& from) {
    WriteRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.WriteRel";
  }
  protected:
  explicit WriteRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using WriteOp = WriteRel_WriteOp;
  static constexpr WriteOp WRITE_OP_UNSPECIFIED = WriteRel_WriteOp_WRITE_OP_UNSPECIFIED;
  static constexpr WriteOp WRITE_OP_INSERT = WriteRel_WriteOp_WRITE_OP_INSERT;
  static constexpr WriteOp WRITE_OP_DELETE = WriteRel_WriteOp_WRITE_OP_DELETE;
  static constexpr WriteOp WRITE_OP_UPDATE = WriteRel_WriteOp_WRITE_OP_UPDATE;
  static constexpr WriteOp WRITE_OP_CTAS = WriteRel_WriteOp_WRITE_OP_CTAS;
  static inline bool WriteOp_IsValid(int value) {
    return WriteRel_WriteOp_IsValid(value);
  }
  static constexpr WriteOp WriteOp_MIN = WriteRel_WriteOp_WriteOp_MIN;
  static constexpr WriteOp WriteOp_MAX = WriteRel_WriteOp_WriteOp_MAX;
  static constexpr int WriteOp_ARRAYSIZE = WriteRel_WriteOp_WriteOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WriteOp_descriptor() {
    return WriteRel_WriteOp_descriptor();
  }
  template <typename T>
  static inline const std::string& WriteOp_Name(T value) {
    return WriteRel_WriteOp_Name(value);
  }
  static inline bool WriteOp_Parse(absl::string_view name, WriteOp* value) {
    return WriteRel_WriteOp_Parse(name, value);
  }

  using OutputMode = WriteRel_OutputMode;
  static constexpr OutputMode OUTPUT_MODE_UNSPECIFIED = WriteRel_OutputMode_OUTPUT_MODE_UNSPECIFIED;
  static constexpr OutputMode OUTPUT_MODE_NO_OUTPUT = WriteRel_OutputMode_OUTPUT_MODE_NO_OUTPUT;
  static constexpr OutputMode OUTPUT_MODE_MODIFIED_TUPLES = WriteRel_OutputMode_OUTPUT_MODE_MODIFIED_TUPLES;
  static inline bool OutputMode_IsValid(int value) {
    return WriteRel_OutputMode_IsValid(value);
  }
  static constexpr OutputMode OutputMode_MIN = WriteRel_OutputMode_OutputMode_MIN;
  static constexpr OutputMode OutputMode_MAX = WriteRel_OutputMode_OutputMode_MAX;
  static constexpr int OutputMode_ARRAYSIZE = WriteRel_OutputMode_OutputMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutputMode_descriptor() {
    return WriteRel_OutputMode_descriptor();
  }
  template <typename T>
  static inline const std::string& OutputMode_Name(T value) {
    return WriteRel_OutputMode_Name(value);
  }
  static inline bool OutputMode_Parse(absl::string_view name, OutputMode* value) {
    return WriteRel_OutputMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTableSchemaFieldNumber = 3,
    kInputFieldNumber = 5,
    kOpFieldNumber = 4,
    kOutputFieldNumber = 6,
    kNamedTableFieldNumber = 1,
    kExtensionTableFieldNumber = 2,
  };
  // .substrait.NamedStruct table_schema = 3 [json_name = "tableSchema"];
  bool has_table_schema() const;
  void clear_table_schema() ;
  const ::substrait::NamedStruct& table_schema() const;
  PROTOBUF_NODISCARD ::substrait::NamedStruct* release_table_schema();
  ::substrait::NamedStruct* mutable_table_schema();
  void set_allocated_table_schema(::substrait::NamedStruct* table_schema);
  private:
  const ::substrait::NamedStruct& _internal_table_schema() const;
  ::substrait::NamedStruct* _internal_mutable_table_schema();
  public:
  void unsafe_arena_set_allocated_table_schema(
      ::substrait::NamedStruct* table_schema);
  ::substrait::NamedStruct* unsafe_arena_release_table_schema();
  // .substrait.Rel input = 5 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // .substrait.WriteRel.WriteOp op = 4 [json_name = "op"];
  void clear_op() ;
  ::substrait::WriteRel_WriteOp op() const;
  void set_op(::substrait::WriteRel_WriteOp value);

  private:
  ::substrait::WriteRel_WriteOp _internal_op() const;
  void _internal_set_op(::substrait::WriteRel_WriteOp value);

  public:
  // .substrait.WriteRel.OutputMode output = 6 [json_name = "output"];
  void clear_output() ;
  ::substrait::WriteRel_OutputMode output() const;
  void set_output(::substrait::WriteRel_OutputMode value);

  private:
  ::substrait::WriteRel_OutputMode _internal_output() const;
  void _internal_set_output(::substrait::WriteRel_OutputMode value);

  public:
  // .substrait.NamedObjectWrite named_table = 1 [json_name = "namedTable"];
  bool has_named_table() const;
  private:
  bool _internal_has_named_table() const;

  public:
  void clear_named_table() ;
  const ::substrait::NamedObjectWrite& named_table() const;
  PROTOBUF_NODISCARD ::substrait::NamedObjectWrite* release_named_table();
  ::substrait::NamedObjectWrite* mutable_named_table();
  void set_allocated_named_table(::substrait::NamedObjectWrite* named_table);
  private:
  const ::substrait::NamedObjectWrite& _internal_named_table() const;
  ::substrait::NamedObjectWrite* _internal_mutable_named_table();
  public:
  void unsafe_arena_set_allocated_named_table(
      ::substrait::NamedObjectWrite* named_table);
  ::substrait::NamedObjectWrite* unsafe_arena_release_named_table();
  // .substrait.ExtensionObject extension_table = 2 [json_name = "extensionTable"];
  bool has_extension_table() const;
  private:
  bool _internal_has_extension_table() const;

  public:
  void clear_extension_table() ;
  const ::substrait::ExtensionObject& extension_table() const;
  PROTOBUF_NODISCARD ::substrait::ExtensionObject* release_extension_table();
  ::substrait::ExtensionObject* mutable_extension_table();
  void set_allocated_extension_table(::substrait::ExtensionObject* extension_table);
  private:
  const ::substrait::ExtensionObject& _internal_extension_table() const;
  ::substrait::ExtensionObject* _internal_mutable_extension_table();
  public:
  void unsafe_arena_set_allocated_extension_table(
      ::substrait::ExtensionObject* extension_table);
  ::substrait::ExtensionObject* unsafe_arena_release_extension_table();
  void clear_write_type();
  WriteTypeCase write_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.WriteRel)
 private:
  class _Internal;
  void set_has_named_table();
  void set_has_extension_table();

  inline bool has_write_type() const;
  inline void clear_has_write_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::NamedStruct* table_schema_;
    ::substrait::Rel* input_;
    int op_;
    int output_;
    union WriteTypeUnion {
      constexpr WriteTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::NamedObjectWrite* named_table_;
      ::substrait::ExtensionObject* extension_table_;
    } write_type_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class HashJoinRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.HashJoinRel) */ {
 public:
  inline HashJoinRel() : HashJoinRel(nullptr) {}
  ~HashJoinRel() override;
  explicit PROTOBUF_CONSTEXPR HashJoinRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashJoinRel(const HashJoinRel& from);
  HashJoinRel(HashJoinRel&& from) noexcept
    : HashJoinRel() {
    *this = ::std::move(from);
  }

  inline HashJoinRel& operator=(const HashJoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashJoinRel& operator=(HashJoinRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashJoinRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashJoinRel* internal_default_instance() {
    return reinterpret_cast<const HashJoinRel*>(
               &_HashJoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(HashJoinRel& a, HashJoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(HashJoinRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashJoinRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashJoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashJoinRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashJoinRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HashJoinRel& from) {
    HashJoinRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashJoinRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.HashJoinRel";
  }
  protected:
  explicit HashJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using JoinType = HashJoinRel_JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED = HashJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER = HashJoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER = HashJoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT = HashJoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT = HashJoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_LEFT_SEMI = HashJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI;
  static constexpr JoinType JOIN_TYPE_RIGHT_SEMI = HashJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI;
  static constexpr JoinType JOIN_TYPE_LEFT_ANTI = HashJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI;
  static constexpr JoinType JOIN_TYPE_RIGHT_ANTI = HashJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
  static inline bool JoinType_IsValid(int value) {
    return HashJoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN = HashJoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX = HashJoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE = HashJoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinType_descriptor() {
    return HashJoinRel_JoinType_descriptor();
  }
  template <typename T>
  static inline const std::string& JoinType_Name(T value) {
    return HashJoinRel_JoinType_Name(value);
  }
  static inline bool JoinType_Parse(absl::string_view name, JoinType* value) {
    return HashJoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftKeysFieldNumber = 4,
    kRightKeysFieldNumber = 5,
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kPostJoinFilterFieldNumber = 6,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 7,
  };
  // repeated .substrait.Expression.FieldReference left_keys = 4 [json_name = "leftKeys"];
  int left_keys_size() const;
  private:
  int _internal_left_keys_size() const;

  public:
  void clear_left_keys() ;
  ::substrait::Expression_FieldReference* mutable_left_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
      mutable_left_keys();
  private:
  const ::substrait::Expression_FieldReference& _internal_left_keys(int index) const;
  ::substrait::Expression_FieldReference* _internal_add_left_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>& _internal_left_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>* _internal_mutable_left_keys();
  public:
  const ::substrait::Expression_FieldReference& left_keys(int index) const;
  ::substrait::Expression_FieldReference* add_left_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
      left_keys() const;
  // repeated .substrait.Expression.FieldReference right_keys = 5 [json_name = "rightKeys"];
  int right_keys_size() const;
  private:
  int _internal_right_keys_size() const;

  public:
  void clear_right_keys() ;
  ::substrait::Expression_FieldReference* mutable_right_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
      mutable_right_keys();
  private:
  const ::substrait::Expression_FieldReference& _internal_right_keys(int index) const;
  ::substrait::Expression_FieldReference* _internal_add_right_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>& _internal_right_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>* _internal_mutable_right_keys();
  public:
  const ::substrait::Expression_FieldReference& right_keys(int index) const;
  ::substrait::Expression_FieldReference* add_right_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
      right_keys() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  void clear_left() ;
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();
  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  void clear_right() ;
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();
  // .substrait.Expression post_join_filter = 6 [json_name = "postJoinFilter"];
  bool has_post_join_filter() const;
  void clear_post_join_filter() ;
  const ::substrait::Expression& post_join_filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_post_join_filter();
  ::substrait::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::Expression* post_join_filter);
  private:
  const ::substrait::Expression& _internal_post_join_filter() const;
  ::substrait::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::Expression* post_join_filter);
  ::substrait::Expression* unsafe_arena_release_post_join_filter();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.HashJoinRel.JoinType type = 7 [json_name = "type"];
  void clear_type() ;
  ::substrait::HashJoinRel_JoinType type() const;
  void set_type(::substrait::HashJoinRel_JoinType value);

  private:
  ::substrait::HashJoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::HashJoinRel_JoinType value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.HashJoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference > left_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference > right_keys_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* left_;
    ::substrait::Rel* right_;
    ::substrait::Expression* post_join_filter_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class MergeJoinRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.MergeJoinRel) */ {
 public:
  inline MergeJoinRel() : MergeJoinRel(nullptr) {}
  ~MergeJoinRel() override;
  explicit PROTOBUF_CONSTEXPR MergeJoinRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MergeJoinRel(const MergeJoinRel& from);
  MergeJoinRel(MergeJoinRel&& from) noexcept
    : MergeJoinRel() {
    *this = ::std::move(from);
  }

  inline MergeJoinRel& operator=(const MergeJoinRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline MergeJoinRel& operator=(MergeJoinRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MergeJoinRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const MergeJoinRel* internal_default_instance() {
    return reinterpret_cast<const MergeJoinRel*>(
               &_MergeJoinRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(MergeJoinRel& a, MergeJoinRel& b) {
    a.Swap(&b);
  }
  inline void Swap(MergeJoinRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MergeJoinRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MergeJoinRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MergeJoinRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MergeJoinRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MergeJoinRel& from) {
    MergeJoinRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MergeJoinRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.MergeJoinRel";
  }
  protected:
  explicit MergeJoinRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using JoinType = MergeJoinRel_JoinType;
  static constexpr JoinType JOIN_TYPE_UNSPECIFIED = MergeJoinRel_JoinType_JOIN_TYPE_UNSPECIFIED;
  static constexpr JoinType JOIN_TYPE_INNER = MergeJoinRel_JoinType_JOIN_TYPE_INNER;
  static constexpr JoinType JOIN_TYPE_OUTER = MergeJoinRel_JoinType_JOIN_TYPE_OUTER;
  static constexpr JoinType JOIN_TYPE_LEFT = MergeJoinRel_JoinType_JOIN_TYPE_LEFT;
  static constexpr JoinType JOIN_TYPE_RIGHT = MergeJoinRel_JoinType_JOIN_TYPE_RIGHT;
  static constexpr JoinType JOIN_TYPE_LEFT_SEMI = MergeJoinRel_JoinType_JOIN_TYPE_LEFT_SEMI;
  static constexpr JoinType JOIN_TYPE_RIGHT_SEMI = MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_SEMI;
  static constexpr JoinType JOIN_TYPE_LEFT_ANTI = MergeJoinRel_JoinType_JOIN_TYPE_LEFT_ANTI;
  static constexpr JoinType JOIN_TYPE_RIGHT_ANTI = MergeJoinRel_JoinType_JOIN_TYPE_RIGHT_ANTI;
  static inline bool JoinType_IsValid(int value) {
    return MergeJoinRel_JoinType_IsValid(value);
  }
  static constexpr JoinType JoinType_MIN = MergeJoinRel_JoinType_JoinType_MIN;
  static constexpr JoinType JoinType_MAX = MergeJoinRel_JoinType_JoinType_MAX;
  static constexpr int JoinType_ARRAYSIZE = MergeJoinRel_JoinType_JoinType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinType_descriptor() {
    return MergeJoinRel_JoinType_descriptor();
  }
  template <typename T>
  static inline const std::string& JoinType_Name(T value) {
    return MergeJoinRel_JoinType_Name(value);
  }
  static inline bool JoinType_Parse(absl::string_view name, JoinType* value) {
    return MergeJoinRel_JoinType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftKeysFieldNumber = 4,
    kRightKeysFieldNumber = 5,
    kCommonFieldNumber = 1,
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kPostJoinFilterFieldNumber = 6,
    kAdvancedExtensionFieldNumber = 10,
    kTypeFieldNumber = 7,
  };
  // repeated .substrait.Expression.FieldReference left_keys = 4 [json_name = "leftKeys"];
  int left_keys_size() const;
  private:
  int _internal_left_keys_size() const;

  public:
  void clear_left_keys() ;
  ::substrait::Expression_FieldReference* mutable_left_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
      mutable_left_keys();
  private:
  const ::substrait::Expression_FieldReference& _internal_left_keys(int index) const;
  ::substrait::Expression_FieldReference* _internal_add_left_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>& _internal_left_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>* _internal_mutable_left_keys();
  public:
  const ::substrait::Expression_FieldReference& left_keys(int index) const;
  ::substrait::Expression_FieldReference* add_left_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
      left_keys() const;
  // repeated .substrait.Expression.FieldReference right_keys = 5 [json_name = "rightKeys"];
  int right_keys_size() const;
  private:
  int _internal_right_keys_size() const;

  public:
  void clear_right_keys() ;
  ::substrait::Expression_FieldReference* mutable_right_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
      mutable_right_keys();
  private:
  const ::substrait::Expression_FieldReference& _internal_right_keys(int index) const;
  ::substrait::Expression_FieldReference* _internal_add_right_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>& _internal_right_keys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>* _internal_mutable_right_keys();
  public:
  const ::substrait::Expression_FieldReference& right_keys(int index) const;
  ::substrait::Expression_FieldReference* add_right_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
      right_keys() const;
  // .substrait.RelCommon common = 1 [json_name = "common"];
  bool has_common() const;
  void clear_common() ;
  const ::substrait::RelCommon& common() const;
  PROTOBUF_NODISCARD ::substrait::RelCommon* release_common();
  ::substrait::RelCommon* mutable_common();
  void set_allocated_common(::substrait::RelCommon* common);
  private:
  const ::substrait::RelCommon& _internal_common() const;
  ::substrait::RelCommon* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::substrait::RelCommon* common);
  ::substrait::RelCommon* unsafe_arena_release_common();
  // .substrait.Rel left = 2 [json_name = "left"];
  bool has_left() const;
  void clear_left() ;
  const ::substrait::Rel& left() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_left();
  ::substrait::Rel* mutable_left();
  void set_allocated_left(::substrait::Rel* left);
  private:
  const ::substrait::Rel& _internal_left() const;
  ::substrait::Rel* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Rel* left);
  ::substrait::Rel* unsafe_arena_release_left();
  // .substrait.Rel right = 3 [json_name = "right"];
  bool has_right() const;
  void clear_right() ;
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();
  // .substrait.Expression post_join_filter = 6 [json_name = "postJoinFilter"];
  bool has_post_join_filter() const;
  void clear_post_join_filter() ;
  const ::substrait::Expression& post_join_filter() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_post_join_filter();
  ::substrait::Expression* mutable_post_join_filter();
  void set_allocated_post_join_filter(::substrait::Expression* post_join_filter);
  private:
  const ::substrait::Expression& _internal_post_join_filter() const;
  ::substrait::Expression* _internal_mutable_post_join_filter();
  public:
  void unsafe_arena_set_allocated_post_join_filter(
      ::substrait::Expression* post_join_filter);
  ::substrait::Expression* unsafe_arena_release_post_join_filter();
  // .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
  bool has_advanced_extension() const;
  void clear_advanced_extension() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extension() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extension();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extension();
  void set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extension() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extension();
  public:
  void unsafe_arena_set_allocated_advanced_extension(
      ::substrait::extensions::AdvancedExtension* advanced_extension);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extension();
  // .substrait.MergeJoinRel.JoinType type = 7 [json_name = "type"];
  void clear_type() ;
  ::substrait::MergeJoinRel_JoinType type() const;
  void set_type(::substrait::MergeJoinRel_JoinType value);

  private:
  ::substrait::MergeJoinRel_JoinType _internal_type() const;
  void _internal_set_type(::substrait::MergeJoinRel_JoinType value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.MergeJoinRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference > left_keys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference > right_keys_;
    ::substrait::RelCommon* common_;
    ::substrait::Rel* left_;
    ::substrait::Rel* right_;
    ::substrait::Expression* post_join_filter_;
    ::substrait::extensions::AdvancedExtension* advanced_extension_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class FunctionArgument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FunctionArgument) */ {
 public:
  inline FunctionArgument() : FunctionArgument(nullptr) {}
  ~FunctionArgument() override;
  explicit PROTOBUF_CONSTEXPR FunctionArgument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionArgument(const FunctionArgument& from);
  FunctionArgument(FunctionArgument&& from) noexcept
    : FunctionArgument() {
    *this = ::std::move(from);
  }

  inline FunctionArgument& operator=(const FunctionArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionArgument& operator=(FunctionArgument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionArgument& default_instance() {
    return *internal_default_instance();
  }
  enum ArgTypeCase {
    kEnum = 1,
    kType = 2,
    kValue = 3,
    ARG_TYPE_NOT_SET = 0,
  };

  static inline const FunctionArgument* internal_default_instance() {
    return reinterpret_cast<const FunctionArgument*>(
               &_FunctionArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FunctionArgument& a, FunctionArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionArgument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionArgument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionArgument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionArgument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionArgument& from) {
    FunctionArgument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionArgument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.FunctionArgument";
  }
  protected:
  explicit FunctionArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnumFieldNumber = 1,
    kTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string enum = 1 [json_name = "enum"];
  bool has_enum_() const;
  void clear_enum_() ;
  const std::string& enum_() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enum_(Arg_&& arg, Args_... args);
  std::string* mutable_enum_();
  PROTOBUF_NODISCARD std::string* release_enum_();
  void set_allocated_enum_(std::string* ptr);

  private:
  const std::string& _internal_enum_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enum_(
      const std::string& value);
  std::string* _internal_mutable_enum_();

  public:
  // .substrait.Type type = 2 [json_name = "type"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;

  public:
  void clear_type() ;
  const ::substrait::Type& type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_type();
  ::substrait::Type* mutable_type();
  void set_allocated_type(::substrait::Type* type);
  private:
  const ::substrait::Type& _internal_type() const;
  ::substrait::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::substrait::Type* type);
  ::substrait::Type* unsafe_arena_release_type();
  // .substrait.Expression value = 3 [json_name = "value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;

  public:
  void clear_value() ;
  const ::substrait::Expression& value() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_value();
  ::substrait::Expression* mutable_value();
  void set_allocated_value(::substrait::Expression* value);
  private:
  const ::substrait::Expression& _internal_value() const;
  ::substrait::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::Expression* value);
  ::substrait::Expression* unsafe_arena_release_value();
  void clear_arg_type();
  ArgTypeCase arg_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.FunctionArgument)
 private:
  class _Internal;
  void set_has_enum_();
  void set_has_type();
  void set_has_value();

  inline bool has_arg_type() const;
  inline void clear_has_arg_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ArgTypeUnion {
      constexpr ArgTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enum__;
      ::substrait::Type* type_;
      ::substrait::Expression* value_;
    } arg_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class FunctionOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.FunctionOption) */ {
 public:
  inline FunctionOption() : FunctionOption(nullptr) {}
  ~FunctionOption() override;
  explicit PROTOBUF_CONSTEXPR FunctionOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionOption(const FunctionOption& from);
  FunctionOption(FunctionOption&& from) noexcept
    : FunctionOption() {
    *this = ::std::move(from);
  }

  inline FunctionOption& operator=(const FunctionOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionOption& operator=(FunctionOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionOption* internal_default_instance() {
    return reinterpret_cast<const FunctionOption*>(
               &_FunctionOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FunctionOption& a, FunctionOption& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionOption* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionOption& from) {
    FunctionOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.FunctionOption";
  }
  protected:
  explicit FunctionOption(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferenceFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string preference = 2 [json_name = "preference"];
  int preference_size() const;
  private:
  int _internal_preference_size() const;

  public:
  void clear_preference() ;
  const std::string& preference(int index) const;
  std::string* mutable_preference(int index);
  void set_preference(int index, const std::string& value);
  void set_preference(int index, std::string&& value);
  void set_preference(int index, const char* value);
  void set_preference(int index, const char* value, std::size_t size);
  void set_preference(int index, absl::string_view value);
  std::string* add_preference();
  void add_preference(const std::string& value);
  void add_preference(std::string&& value);
  void add_preference(const char* value);
  void add_preference(const char* value, std::size_t size);
  void add_preference(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& preference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_preference();

  private:
  const std::string& _internal_preference(int index) const;
  std::string* _internal_add_preference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_preference() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_preference();

  public:
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:substrait.FunctionOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> preference_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Enum_Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.Expression.Enum.Empty) */ {
 public:
  inline Expression_Enum_Empty() : Expression_Enum_Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Enum_Empty(const Expression_Enum_Empty& from);
  Expression_Enum_Empty(Expression_Enum_Empty&& from) noexcept
    : Expression_Enum_Empty() {
    *this = ::std::move(from);
  }

  inline Expression_Enum_Empty& operator=(const Expression_Enum_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Enum_Empty& operator=(Expression_Enum_Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Enum_Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Enum_Empty* internal_default_instance() {
    return reinterpret_cast<const Expression_Enum_Empty*>(
               &_Expression_Enum_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Expression_Enum_Empty& a, Expression_Enum_Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Enum_Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Enum_Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Enum_Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Enum_Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Expression_Enum_Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Expression_Enum_Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Enum.Empty";
  }
  protected:
  explicit Expression_Enum_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.Expression.Enum.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Enum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Enum) */ {
 public:
  inline Expression_Enum() : Expression_Enum(nullptr) {}
  ~Expression_Enum() override;
  explicit PROTOBUF_CONSTEXPR Expression_Enum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Enum(const Expression_Enum& from);
  Expression_Enum(Expression_Enum&& from) noexcept
    : Expression_Enum() {
    *this = ::std::move(from);
  }

  inline Expression_Enum& operator=(const Expression_Enum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Enum& operator=(Expression_Enum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Enum& default_instance() {
    return *internal_default_instance();
  }
  enum EnumKindCase {
    kSpecified = 1,
    kUnspecified = 2,
    ENUM_KIND_NOT_SET = 0,
  };

  static inline const Expression_Enum* internal_default_instance() {
    return reinterpret_cast<const Expression_Enum*>(
               &_Expression_Enum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Expression_Enum& a, Expression_Enum& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Enum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Enum* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Enum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Enum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Enum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Enum& from) {
    Expression_Enum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Enum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Enum";
  }
  protected:
  explicit Expression_Enum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Enum_Empty Empty;

  // accessors -------------------------------------------------------

  enum : int {
    kSpecifiedFieldNumber = 1,
    kUnspecifiedFieldNumber = 2,
  };
  // string specified = 1 [json_name = "specified"];
  bool has_specified() const;
  void clear_specified() ;
  const std::string& specified() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_specified(Arg_&& arg, Args_... args);
  std::string* mutable_specified();
  PROTOBUF_NODISCARD std::string* release_specified();
  void set_allocated_specified(std::string* ptr);

  private:
  const std::string& _internal_specified() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_specified(
      const std::string& value);
  std::string* _internal_mutable_specified();

  public:
  // .substrait.Expression.Enum.Empty unspecified = 2 [json_name = "unspecified"];
  bool has_unspecified() const;
  private:
  bool _internal_has_unspecified() const;

  public:
  void clear_unspecified() ;
  const ::substrait::Expression_Enum_Empty& unspecified() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Enum_Empty* release_unspecified();
  ::substrait::Expression_Enum_Empty* mutable_unspecified();
  void set_allocated_unspecified(::substrait::Expression_Enum_Empty* unspecified);
  private:
  const ::substrait::Expression_Enum_Empty& _internal_unspecified() const;
  ::substrait::Expression_Enum_Empty* _internal_mutable_unspecified();
  public:
  void unsafe_arena_set_allocated_unspecified(
      ::substrait::Expression_Enum_Empty* unspecified);
  ::substrait::Expression_Enum_Empty* unsafe_arena_release_unspecified();
  void clear_enum_kind();
  EnumKindCase enum_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Enum)
 private:
  class _Internal;
  void set_has_specified();
  void set_has_unspecified();

  inline bool has_enum_kind() const;
  inline void clear_has_enum_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union EnumKindUnion {
      constexpr EnumKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr specified_;
      ::substrait::Expression_Enum_Empty* unspecified_;
    } enum_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_VarChar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.VarChar) */ {
 public:
  inline Expression_Literal_VarChar() : Expression_Literal_VarChar(nullptr) {}
  ~Expression_Literal_VarChar() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_VarChar(const Expression_Literal_VarChar& from);
  Expression_Literal_VarChar(Expression_Literal_VarChar&& from) noexcept
    : Expression_Literal_VarChar() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_VarChar& operator=(const Expression_Literal_VarChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_VarChar& operator=(Expression_Literal_VarChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_VarChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_VarChar* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_VarChar*>(
               &_Expression_Literal_VarChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(Expression_Literal_VarChar& a, Expression_Literal_VarChar& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_VarChar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_VarChar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_VarChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_VarChar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_VarChar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_VarChar& from) {
    Expression_Literal_VarChar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_VarChar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.VarChar";
  }
  protected:
  explicit Expression_Literal_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // string value = 1 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // uint32 length = 2 [json_name = "length"];
  void clear_length() ;
  ::uint32_t length() const;
  void set_length(::uint32_t value);

  private:
  ::uint32_t _internal_length() const;
  void _internal_set_length(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.VarChar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::uint32_t length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_Decimal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.Decimal) */ {
 public:
  inline Expression_Literal_Decimal() : Expression_Literal_Decimal(nullptr) {}
  ~Expression_Literal_Decimal() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_Decimal(const Expression_Literal_Decimal& from);
  Expression_Literal_Decimal(Expression_Literal_Decimal&& from) noexcept
    : Expression_Literal_Decimal() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Decimal& operator=(const Expression_Literal_Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Decimal& operator=(Expression_Literal_Decimal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_Decimal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_Decimal* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Decimal*>(
               &_Expression_Literal_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(Expression_Literal_Decimal& a, Expression_Literal_Decimal& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Decimal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Decimal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_Decimal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_Decimal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_Decimal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_Decimal& from) {
    Expression_Literal_Decimal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Decimal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.Decimal";
  }
  protected:
  explicit Expression_Literal_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kPrecisionFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // bytes value = 1 [json_name = "value"];
  void clear_value() ;
  const std::string& value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* ptr);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // int32 precision = 2 [json_name = "precision"];
  void clear_precision() ;
  ::int32_t precision() const;
  void set_precision(::int32_t value);

  private:
  ::int32_t _internal_precision() const;
  void _internal_set_precision(::int32_t value);

  public:
  // int32 scale = 3 [json_name = "scale"];
  void clear_scale() ;
  ::int32_t scale() const;
  void set_scale(::int32_t value);

  private:
  ::int32_t _internal_scale() const;
  void _internal_set_scale(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.Decimal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::int32_t precision_;
    ::int32_t scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_Map_KeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.Map.KeyValue) */ {
 public:
  inline Expression_Literal_Map_KeyValue() : Expression_Literal_Map_KeyValue(nullptr) {}
  ~Expression_Literal_Map_KeyValue() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_Map_KeyValue(const Expression_Literal_Map_KeyValue& from);
  Expression_Literal_Map_KeyValue(Expression_Literal_Map_KeyValue&& from) noexcept
    : Expression_Literal_Map_KeyValue() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Map_KeyValue& operator=(const Expression_Literal_Map_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Map_KeyValue& operator=(Expression_Literal_Map_KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_Map_KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_Map_KeyValue* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Map_KeyValue*>(
               &_Expression_Literal_Map_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(Expression_Literal_Map_KeyValue& a, Expression_Literal_Map_KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Map_KeyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Map_KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_Map_KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_Map_KeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_Map_KeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_Map_KeyValue& from) {
    Expression_Literal_Map_KeyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Map_KeyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.Map.KeyValue";
  }
  protected:
  explicit Expression_Literal_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .substrait.Expression.Literal key = 1 [json_name = "key"];
  bool has_key() const;
  void clear_key() ;
  const ::substrait::Expression_Literal& key() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_key();
  ::substrait::Expression_Literal* mutable_key();
  void set_allocated_key(::substrait::Expression_Literal* key);
  private:
  const ::substrait::Expression_Literal& _internal_key() const;
  ::substrait::Expression_Literal* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::Expression_Literal* key);
  ::substrait::Expression_Literal* unsafe_arena_release_key();
  // .substrait.Expression.Literal value = 2 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::substrait::Expression_Literal& value() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_value();
  ::substrait::Expression_Literal* mutable_value();
  void set_allocated_value(::substrait::Expression_Literal* value);
  private:
  const ::substrait::Expression_Literal& _internal_value() const;
  ::substrait::Expression_Literal* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::Expression_Literal* value);
  ::substrait::Expression_Literal* unsafe_arena_release_value();
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.Map.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_Literal* key_;
    ::substrait::Expression_Literal* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.Map) */ {
 public:
  inline Expression_Literal_Map() : Expression_Literal_Map(nullptr) {}
  ~Expression_Literal_Map() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_Map(const Expression_Literal_Map& from);
  Expression_Literal_Map(Expression_Literal_Map&& from) noexcept
    : Expression_Literal_Map() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Map& operator=(const Expression_Literal_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Map& operator=(Expression_Literal_Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_Map* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Map*>(
               &_Expression_Literal_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Expression_Literal_Map& a, Expression_Literal_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Map* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_Map& from) {
    Expression_Literal_Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.Map";
  }
  protected:
  explicit Expression_Literal_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Literal_Map_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression.Literal.Map.KeyValue key_values = 1 [json_name = "keyValues"];
  int key_values_size() const;
  private:
  int _internal_key_values_size() const;

  public:
  void clear_key_values() ;
  ::substrait::Expression_Literal_Map_KeyValue* mutable_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Map_KeyValue >*
      mutable_key_values();
  private:
  const ::substrait::Expression_Literal_Map_KeyValue& _internal_key_values(int index) const;
  ::substrait::Expression_Literal_Map_KeyValue* _internal_add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Map_KeyValue>& _internal_key_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Map_KeyValue>* _internal_mutable_key_values();
  public:
  const ::substrait::Expression_Literal_Map_KeyValue& key_values(int index) const;
  ::substrait::Expression_Literal_Map_KeyValue* add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Map_KeyValue >&
      key_values() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Map_KeyValue > key_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_IntervalYearToMonth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.IntervalYearToMonth) */ {
 public:
  inline Expression_Literal_IntervalYearToMonth() : Expression_Literal_IntervalYearToMonth(nullptr) {}
  ~Expression_Literal_IntervalYearToMonth() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_IntervalYearToMonth(const Expression_Literal_IntervalYearToMonth& from);
  Expression_Literal_IntervalYearToMonth(Expression_Literal_IntervalYearToMonth&& from) noexcept
    : Expression_Literal_IntervalYearToMonth() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_IntervalYearToMonth& operator=(const Expression_Literal_IntervalYearToMonth& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_IntervalYearToMonth& operator=(Expression_Literal_IntervalYearToMonth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_IntervalYearToMonth& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_IntervalYearToMonth* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_IntervalYearToMonth*>(
               &_Expression_Literal_IntervalYearToMonth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Expression_Literal_IntervalYearToMonth& a, Expression_Literal_IntervalYearToMonth& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_IntervalYearToMonth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_IntervalYearToMonth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_IntervalYearToMonth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_IntervalYearToMonth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_IntervalYearToMonth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_IntervalYearToMonth& from) {
    Expression_Literal_IntervalYearToMonth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_IntervalYearToMonth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.IntervalYearToMonth";
  }
  protected:
  explicit Expression_Literal_IntervalYearToMonth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYearsFieldNumber = 1,
    kMonthsFieldNumber = 2,
  };
  // int32 years = 1 [json_name = "years"];
  void clear_years() ;
  ::int32_t years() const;
  void set_years(::int32_t value);

  private:
  ::int32_t _internal_years() const;
  void _internal_set_years(::int32_t value);

  public:
  // int32 months = 2 [json_name = "months"];
  void clear_months() ;
  ::int32_t months() const;
  void set_months(::int32_t value);

  private:
  ::int32_t _internal_months() const;
  void _internal_set_months(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.IntervalYearToMonth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t years_;
    ::int32_t months_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_IntervalDayToSecond final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.IntervalDayToSecond) */ {
 public:
  inline Expression_Literal_IntervalDayToSecond() : Expression_Literal_IntervalDayToSecond(nullptr) {}
  ~Expression_Literal_IntervalDayToSecond() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_IntervalDayToSecond(const Expression_Literal_IntervalDayToSecond& from);
  Expression_Literal_IntervalDayToSecond(Expression_Literal_IntervalDayToSecond&& from) noexcept
    : Expression_Literal_IntervalDayToSecond() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_IntervalDayToSecond& operator=(const Expression_Literal_IntervalDayToSecond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_IntervalDayToSecond& operator=(Expression_Literal_IntervalDayToSecond&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_IntervalDayToSecond& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_IntervalDayToSecond* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_IntervalDayToSecond*>(
               &_Expression_Literal_IntervalDayToSecond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Expression_Literal_IntervalDayToSecond& a, Expression_Literal_IntervalDayToSecond& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_IntervalDayToSecond* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_IntervalDayToSecond* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_IntervalDayToSecond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_IntervalDayToSecond>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_IntervalDayToSecond& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_IntervalDayToSecond& from) {
    Expression_Literal_IntervalDayToSecond::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_IntervalDayToSecond* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.IntervalDayToSecond";
  }
  protected:
  explicit Expression_Literal_IntervalDayToSecond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDaysFieldNumber = 1,
    kSecondsFieldNumber = 2,
    kMicrosecondsFieldNumber = 3,
  };
  // int32 days = 1 [json_name = "days"];
  void clear_days() ;
  ::int32_t days() const;
  void set_days(::int32_t value);

  private:
  ::int32_t _internal_days() const;
  void _internal_set_days(::int32_t value);

  public:
  // int32 seconds = 2 [json_name = "seconds"];
  void clear_seconds() ;
  ::int32_t seconds() const;
  void set_seconds(::int32_t value);

  private:
  ::int32_t _internal_seconds() const;
  void _internal_set_seconds(::int32_t value);

  public:
  // int32 microseconds = 3 [json_name = "microseconds"];
  void clear_microseconds() ;
  ::int32_t microseconds() const;
  void set_microseconds(::int32_t value);

  private:
  ::int32_t _internal_microseconds() const;
  void _internal_set_microseconds(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.IntervalDayToSecond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t days_;
    ::int32_t seconds_;
    ::int32_t microseconds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_Struct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.Struct) */ {
 public:
  inline Expression_Literal_Struct() : Expression_Literal_Struct(nullptr) {}
  ~Expression_Literal_Struct() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_Struct(const Expression_Literal_Struct& from);
  Expression_Literal_Struct(Expression_Literal_Struct&& from) noexcept
    : Expression_Literal_Struct() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_Struct& operator=(const Expression_Literal_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_Struct& operator=(Expression_Literal_Struct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_Struct& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_Struct* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_Struct*>(
               &_Expression_Literal_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Expression_Literal_Struct& a, Expression_Literal_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_Struct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_Struct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_Struct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_Struct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_Struct& from) {
    Expression_Literal_Struct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_Struct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.Struct";
  }
  protected:
  explicit Expression_Literal_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.Expression.Literal fields = 1 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::substrait::Expression_Literal* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >*
      mutable_fields();
  private:
  const ::substrait::Expression_Literal& _internal_fields(int index) const;
  ::substrait::Expression_Literal* _internal_add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>& _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>* _internal_mutable_fields();
  public:
  const ::substrait::Expression_Literal& fields(int index) const;
  ::substrait::Expression_Literal* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >&
      fields() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_List final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.List) */ {
 public:
  inline Expression_Literal_List() : Expression_Literal_List(nullptr) {}
  ~Expression_Literal_List() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_List(const Expression_Literal_List& from);
  Expression_Literal_List(Expression_Literal_List&& from) noexcept
    : Expression_Literal_List() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_List& operator=(const Expression_Literal_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_List& operator=(Expression_Literal_List&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_List& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_List* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_List*>(
               &_Expression_Literal_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Expression_Literal_List& a, Expression_Literal_List& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_List* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_List* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_List>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_List& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_List& from) {
    Expression_Literal_List::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_List* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.List";
  }
  protected:
  explicit Expression_Literal_List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression.Literal values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::substrait::Expression_Literal* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >*
      mutable_values();
  private:
  const ::substrait::Expression_Literal& _internal_values(int index) const;
  ::substrait::Expression_Literal* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>* _internal_mutable_values();
  public:
  const ::substrait::Expression_Literal& values(int index) const;
  ::substrait::Expression_Literal* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >&
      values() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal_UserDefined final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal.UserDefined) */ {
 public:
  inline Expression_Literal_UserDefined() : Expression_Literal_UserDefined(nullptr) {}
  ~Expression_Literal_UserDefined() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal_UserDefined(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal_UserDefined(const Expression_Literal_UserDefined& from);
  Expression_Literal_UserDefined(Expression_Literal_UserDefined&& from) noexcept
    : Expression_Literal_UserDefined() {
    *this = ::std::move(from);
  }

  inline Expression_Literal_UserDefined& operator=(const Expression_Literal_UserDefined& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal_UserDefined& operator=(Expression_Literal_UserDefined&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal_UserDefined& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Literal_UserDefined* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal_UserDefined*>(
               &_Expression_Literal_UserDefined_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(Expression_Literal_UserDefined& a, Expression_Literal_UserDefined& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal_UserDefined* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal_UserDefined* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal_UserDefined* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal_UserDefined>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal_UserDefined& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal_UserDefined& from) {
    Expression_Literal_UserDefined::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal_UserDefined* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal.UserDefined";
  }
  protected:
  explicit Expression_Literal_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParametersFieldNumber = 3,
    kValueFieldNumber = 2,
    kTypeReferenceFieldNumber = 1,
  };
  // repeated .substrait.Type.Parameter type_parameters = 3 [json_name = "typeParameters"];
  int type_parameters_size() const;
  private:
  int _internal_type_parameters_size() const;

  public:
  void clear_type_parameters() ;
  ::substrait::Type_Parameter* mutable_type_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Type_Parameter >*
      mutable_type_parameters();
  private:
  const ::substrait::Type_Parameter& _internal_type_parameters(int index) const;
  ::substrait::Type_Parameter* _internal_add_type_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Type_Parameter>& _internal_type_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Type_Parameter>* _internal_mutable_type_parameters();
  public:
  const ::substrait::Type_Parameter& type_parameters(int index) const;
  ::substrait::Type_Parameter* add_type_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Type_Parameter >&
      type_parameters() const;
  // .google.protobuf.Any value = 2 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_value();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Any* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Any* value);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_value();
  // uint32 type_reference = 1 [json_name = "typeReference"];
  void clear_type_reference() ;
  ::uint32_t type_reference() const;
  void set_type_reference(::uint32_t value);

  private:
  ::uint32_t _internal_type_reference() const;
  void _internal_set_type_reference(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal.UserDefined)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Type_Parameter > type_parameters_;
    ::PROTOBUF_NAMESPACE_ID::Any* value_;
    ::uint32_t type_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Literal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Literal) */ {
 public:
  inline Expression_Literal() : Expression_Literal(nullptr) {}
  ~Expression_Literal() override;
  explicit PROTOBUF_CONSTEXPR Expression_Literal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Literal(const Expression_Literal& from);
  Expression_Literal(Expression_Literal&& from) noexcept
    : Expression_Literal() {
    *this = ::std::move(from);
  }

  inline Expression_Literal& operator=(const Expression_Literal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Literal& operator=(Expression_Literal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Literal& default_instance() {
    return *internal_default_instance();
  }
  enum LiteralTypeCase {
    kBoolean = 1,
    kI8 = 2,
    kI16 = 3,
    kI32 = 5,
    kI64 = 7,
    kFp32 = 10,
    kFp64 = 11,
    kString = 12,
    kBinary = 13,
    kTimestamp = 14,
    kDate = 16,
    kTime = 17,
    kIntervalYearToMonth = 19,
    kIntervalDayToSecond = 20,
    kFixedChar = 21,
    kVarChar = 22,
    kFixedBinary = 23,
    kDecimal = 24,
    kStruct = 25,
    kMap = 26,
    kTimestampTz = 27,
    kUuid = 28,
    kNull = 29,
    kList = 30,
    kEmptyList = 31,
    kEmptyMap = 32,
    kUserDefined = 33,
    LITERAL_TYPE_NOT_SET = 0,
  };

  static inline const Expression_Literal* internal_default_instance() {
    return reinterpret_cast<const Expression_Literal*>(
               &_Expression_Literal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(Expression_Literal& a, Expression_Literal& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Literal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Literal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Literal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Literal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Literal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Literal& from) {
    Expression_Literal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Literal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Literal";
  }
  protected:
  explicit Expression_Literal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Literal_VarChar VarChar;
  typedef Expression_Literal_Decimal Decimal;
  typedef Expression_Literal_Map Map;
  typedef Expression_Literal_IntervalYearToMonth IntervalYearToMonth;
  typedef Expression_Literal_IntervalDayToSecond IntervalDayToSecond;
  typedef Expression_Literal_Struct Struct;
  typedef Expression_Literal_List List;
  typedef Expression_Literal_UserDefined UserDefined;

  // accessors -------------------------------------------------------

  enum : int {
    kNullableFieldNumber = 50,
    kTypeVariationReferenceFieldNumber = 51,
    kBooleanFieldNumber = 1,
    kI8FieldNumber = 2,
    kI16FieldNumber = 3,
    kI32FieldNumber = 5,
    kI64FieldNumber = 7,
    kFp32FieldNumber = 10,
    kFp64FieldNumber = 11,
    kStringFieldNumber = 12,
    kBinaryFieldNumber = 13,
    kTimestampFieldNumber = 14,
    kDateFieldNumber = 16,
    kTimeFieldNumber = 17,
    kIntervalYearToMonthFieldNumber = 19,
    kIntervalDayToSecondFieldNumber = 20,
    kFixedCharFieldNumber = 21,
    kVarCharFieldNumber = 22,
    kFixedBinaryFieldNumber = 23,
    kDecimalFieldNumber = 24,
    kStructFieldNumber = 25,
    kMapFieldNumber = 26,
    kTimestampTzFieldNumber = 27,
    kUuidFieldNumber = 28,
    kNullFieldNumber = 29,
    kListFieldNumber = 30,
    kEmptyListFieldNumber = 31,
    kEmptyMapFieldNumber = 32,
    kUserDefinedFieldNumber = 33,
  };
  // bool nullable = 50 [json_name = "nullable"];
  void clear_nullable() ;
  bool nullable() const;
  void set_nullable(bool value);

  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);

  public:
  // uint32 type_variation_reference = 51 [json_name = "typeVariationReference"];
  void clear_type_variation_reference() ;
  ::uint32_t type_variation_reference() const;
  void set_type_variation_reference(::uint32_t value);

  private:
  ::uint32_t _internal_type_variation_reference() const;
  void _internal_set_type_variation_reference(::uint32_t value);

  public:
  // bool boolean = 1 [json_name = "boolean"];
  bool has_boolean() const;
  void clear_boolean() ;
  bool boolean() const;
  void set_boolean(bool value);

  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);

  public:
  // int32 i8 = 2 [json_name = "i8"];
  bool has_i8() const;
  void clear_i8() ;
  ::int32_t i8() const;
  void set_i8(::int32_t value);

  private:
  ::int32_t _internal_i8() const;
  void _internal_set_i8(::int32_t value);

  public:
  // int32 i16 = 3 [json_name = "i16"];
  bool has_i16() const;
  void clear_i16() ;
  ::int32_t i16() const;
  void set_i16(::int32_t value);

  private:
  ::int32_t _internal_i16() const;
  void _internal_set_i16(::int32_t value);

  public:
  // int32 i32 = 5 [json_name = "i32"];
  bool has_i32() const;
  void clear_i32() ;
  ::int32_t i32() const;
  void set_i32(::int32_t value);

  private:
  ::int32_t _internal_i32() const;
  void _internal_set_i32(::int32_t value);

  public:
  // int64 i64 = 7 [json_name = "i64"];
  bool has_i64() const;
  void clear_i64() ;
  ::int64_t i64() const;
  void set_i64(::int64_t value);

  private:
  ::int64_t _internal_i64() const;
  void _internal_set_i64(::int64_t value);

  public:
  // float fp32 = 10 [json_name = "fp32"];
  bool has_fp32() const;
  void clear_fp32() ;
  float fp32() const;
  void set_fp32(float value);

  private:
  float _internal_fp32() const;
  void _internal_set_fp32(float value);

  public:
  // double fp64 = 11 [json_name = "fp64"];
  bool has_fp64() const;
  void clear_fp64() ;
  double fp64() const;
  void set_fp64(double value);

  private:
  double _internal_fp64() const;
  void _internal_set_fp64(double value);

  public:
  // string string = 12 [json_name = "string"];
  bool has_string() const;
  void clear_string() ;
  const std::string& string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string(Arg_&& arg, Args_... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* ptr);

  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(
      const std::string& value);
  std::string* _internal_mutable_string();

  public:
  // bytes binary = 13 [json_name = "binary"];
  bool has_binary() const;
  void clear_binary() ;
  const std::string& binary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_binary(Arg_&& arg, Args_... args);
  std::string* mutable_binary();
  PROTOBUF_NODISCARD std::string* release_binary();
  void set_allocated_binary(std::string* ptr);

  private:
  const std::string& _internal_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary(
      const std::string& value);
  std::string* _internal_mutable_binary();

  public:
  // int64 timestamp = 14 [json_name = "timestamp"];
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // int32 date = 16 [json_name = "date"];
  bool has_date() const;
  void clear_date() ;
  ::int32_t date() const;
  void set_date(::int32_t value);

  private:
  ::int32_t _internal_date() const;
  void _internal_set_date(::int32_t value);

  public:
  // int64 time = 17 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // .substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19 [json_name = "intervalYearToMonth"];
  bool has_interval_year_to_month() const;
  private:
  bool _internal_has_interval_year_to_month() const;

  public:
  void clear_interval_year_to_month() ;
  const ::substrait::Expression_Literal_IntervalYearToMonth& interval_year_to_month() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_IntervalYearToMonth* release_interval_year_to_month();
  ::substrait::Expression_Literal_IntervalYearToMonth* mutable_interval_year_to_month();
  void set_allocated_interval_year_to_month(::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month);
  private:
  const ::substrait::Expression_Literal_IntervalYearToMonth& _internal_interval_year_to_month() const;
  ::substrait::Expression_Literal_IntervalYearToMonth* _internal_mutable_interval_year_to_month();
  public:
  void unsafe_arena_set_allocated_interval_year_to_month(
      ::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month);
  ::substrait::Expression_Literal_IntervalYearToMonth* unsafe_arena_release_interval_year_to_month();
  // .substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20 [json_name = "intervalDayToSecond"];
  bool has_interval_day_to_second() const;
  private:
  bool _internal_has_interval_day_to_second() const;

  public:
  void clear_interval_day_to_second() ;
  const ::substrait::Expression_Literal_IntervalDayToSecond& interval_day_to_second() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_IntervalDayToSecond* release_interval_day_to_second();
  ::substrait::Expression_Literal_IntervalDayToSecond* mutable_interval_day_to_second();
  void set_allocated_interval_day_to_second(::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second);
  private:
  const ::substrait::Expression_Literal_IntervalDayToSecond& _internal_interval_day_to_second() const;
  ::substrait::Expression_Literal_IntervalDayToSecond* _internal_mutable_interval_day_to_second();
  public:
  void unsafe_arena_set_allocated_interval_day_to_second(
      ::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second);
  ::substrait::Expression_Literal_IntervalDayToSecond* unsafe_arena_release_interval_day_to_second();
  // string fixed_char = 21 [json_name = "fixedChar"];
  bool has_fixed_char() const;
  void clear_fixed_char() ;
  const std::string& fixed_char() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fixed_char(Arg_&& arg, Args_... args);
  std::string* mutable_fixed_char();
  PROTOBUF_NODISCARD std::string* release_fixed_char();
  void set_allocated_fixed_char(std::string* ptr);

  private:
  const std::string& _internal_fixed_char() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixed_char(
      const std::string& value);
  std::string* _internal_mutable_fixed_char();

  public:
  // .substrait.Expression.Literal.VarChar var_char = 22 [json_name = "varChar"];
  bool has_var_char() const;
  private:
  bool _internal_has_var_char() const;

  public:
  void clear_var_char() ;
  const ::substrait::Expression_Literal_VarChar& var_char() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_VarChar* release_var_char();
  ::substrait::Expression_Literal_VarChar* mutable_var_char();
  void set_allocated_var_char(::substrait::Expression_Literal_VarChar* var_char);
  private:
  const ::substrait::Expression_Literal_VarChar& _internal_var_char() const;
  ::substrait::Expression_Literal_VarChar* _internal_mutable_var_char();
  public:
  void unsafe_arena_set_allocated_var_char(
      ::substrait::Expression_Literal_VarChar* var_char);
  ::substrait::Expression_Literal_VarChar* unsafe_arena_release_var_char();
  // bytes fixed_binary = 23 [json_name = "fixedBinary"];
  bool has_fixed_binary() const;
  void clear_fixed_binary() ;
  const std::string& fixed_binary() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fixed_binary(Arg_&& arg, Args_... args);
  std::string* mutable_fixed_binary();
  PROTOBUF_NODISCARD std::string* release_fixed_binary();
  void set_allocated_fixed_binary(std::string* ptr);

  private:
  const std::string& _internal_fixed_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fixed_binary(
      const std::string& value);
  std::string* _internal_mutable_fixed_binary();

  public:
  // .substrait.Expression.Literal.Decimal decimal = 24 [json_name = "decimal"];
  bool has_decimal() const;
  private:
  bool _internal_has_decimal() const;

  public:
  void clear_decimal() ;
  const ::substrait::Expression_Literal_Decimal& decimal() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_Decimal* release_decimal();
  ::substrait::Expression_Literal_Decimal* mutable_decimal();
  void set_allocated_decimal(::substrait::Expression_Literal_Decimal* decimal);
  private:
  const ::substrait::Expression_Literal_Decimal& _internal_decimal() const;
  ::substrait::Expression_Literal_Decimal* _internal_mutable_decimal();
  public:
  void unsafe_arena_set_allocated_decimal(
      ::substrait::Expression_Literal_Decimal* decimal);
  ::substrait::Expression_Literal_Decimal* unsafe_arena_release_decimal();
  // .substrait.Expression.Literal.Struct struct = 25 [json_name = "struct"];
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;

  public:
  void clear_struct_() ;
  const ::substrait::Expression_Literal_Struct& struct_() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_Struct* release_struct_();
  ::substrait::Expression_Literal_Struct* mutable_struct_();
  void set_allocated_struct_(::substrait::Expression_Literal_Struct* struct_);
  private:
  const ::substrait::Expression_Literal_Struct& _internal_struct_() const;
  ::substrait::Expression_Literal_Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::Expression_Literal_Struct* struct_);
  ::substrait::Expression_Literal_Struct* unsafe_arena_release_struct_();
  // .substrait.Expression.Literal.Map map = 26 [json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;

  public:
  void clear_map() ;
  const ::substrait::Expression_Literal_Map& map() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_Map* release_map();
  ::substrait::Expression_Literal_Map* mutable_map();
  void set_allocated_map(::substrait::Expression_Literal_Map* map);
  private:
  const ::substrait::Expression_Literal_Map& _internal_map() const;
  ::substrait::Expression_Literal_Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::Expression_Literal_Map* map);
  ::substrait::Expression_Literal_Map* unsafe_arena_release_map();
  // int64 timestamp_tz = 27 [json_name = "timestampTz"];
  bool has_timestamp_tz() const;
  void clear_timestamp_tz() ;
  ::int64_t timestamp_tz() const;
  void set_timestamp_tz(::int64_t value);

  private:
  ::int64_t _internal_timestamp_tz() const;
  void _internal_set_timestamp_tz(::int64_t value);

  public:
  // bytes uuid = 28 [json_name = "uuid"];
  bool has_uuid() const;
  void clear_uuid() ;
  const std::string& uuid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uuid(Arg_&& arg, Args_... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* ptr);

  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(
      const std::string& value);
  std::string* _internal_mutable_uuid();

  public:
  // .substrait.Type null = 29 [json_name = "null"];
  bool has_null() const;
  private:
  bool _internal_has_null() const;

  public:
  void clear_null() ;
  const ::substrait::Type& null() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_null();
  ::substrait::Type* mutable_null();
  void set_allocated_null(::substrait::Type* null);
  private:
  const ::substrait::Type& _internal_null() const;
  ::substrait::Type* _internal_mutable_null();
  public:
  void unsafe_arena_set_allocated_null(
      ::substrait::Type* null);
  ::substrait::Type* unsafe_arena_release_null();
  // .substrait.Expression.Literal.List list = 30 [json_name = "list"];
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::substrait::Expression_Literal_List& list() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_List* release_list();
  ::substrait::Expression_Literal_List* mutable_list();
  void set_allocated_list(::substrait::Expression_Literal_List* list);
  private:
  const ::substrait::Expression_Literal_List& _internal_list() const;
  ::substrait::Expression_Literal_List* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::Expression_Literal_List* list);
  ::substrait::Expression_Literal_List* unsafe_arena_release_list();
  // .substrait.Type.List empty_list = 31 [json_name = "emptyList"];
  bool has_empty_list() const;
  private:
  bool _internal_has_empty_list() const;

  public:
  void clear_empty_list() ;
  const ::substrait::Type_List& empty_list() const;
  PROTOBUF_NODISCARD ::substrait::Type_List* release_empty_list();
  ::substrait::Type_List* mutable_empty_list();
  void set_allocated_empty_list(::substrait::Type_List* empty_list);
  private:
  const ::substrait::Type_List& _internal_empty_list() const;
  ::substrait::Type_List* _internal_mutable_empty_list();
  public:
  void unsafe_arena_set_allocated_empty_list(
      ::substrait::Type_List* empty_list);
  ::substrait::Type_List* unsafe_arena_release_empty_list();
  // .substrait.Type.Map empty_map = 32 [json_name = "emptyMap"];
  bool has_empty_map() const;
  private:
  bool _internal_has_empty_map() const;

  public:
  void clear_empty_map() ;
  const ::substrait::Type_Map& empty_map() const;
  PROTOBUF_NODISCARD ::substrait::Type_Map* release_empty_map();
  ::substrait::Type_Map* mutable_empty_map();
  void set_allocated_empty_map(::substrait::Type_Map* empty_map);
  private:
  const ::substrait::Type_Map& _internal_empty_map() const;
  ::substrait::Type_Map* _internal_mutable_empty_map();
  public:
  void unsafe_arena_set_allocated_empty_map(
      ::substrait::Type_Map* empty_map);
  ::substrait::Type_Map* unsafe_arena_release_empty_map();
  // .substrait.Expression.Literal.UserDefined user_defined = 33 [json_name = "userDefined"];
  bool has_user_defined() const;
  private:
  bool _internal_has_user_defined() const;

  public:
  void clear_user_defined() ;
  const ::substrait::Expression_Literal_UserDefined& user_defined() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal_UserDefined* release_user_defined();
  ::substrait::Expression_Literal_UserDefined* mutable_user_defined();
  void set_allocated_user_defined(::substrait::Expression_Literal_UserDefined* user_defined);
  private:
  const ::substrait::Expression_Literal_UserDefined& _internal_user_defined() const;
  ::substrait::Expression_Literal_UserDefined* _internal_mutable_user_defined();
  public:
  void unsafe_arena_set_allocated_user_defined(
      ::substrait::Expression_Literal_UserDefined* user_defined);
  ::substrait::Expression_Literal_UserDefined* unsafe_arena_release_user_defined();
  void clear_literal_type();
  LiteralTypeCase literal_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Literal)
 private:
  class _Internal;
  void set_has_boolean();
  void set_has_i8();
  void set_has_i16();
  void set_has_i32();
  void set_has_i64();
  void set_has_fp32();
  void set_has_fp64();
  void set_has_string();
  void set_has_binary();
  void set_has_timestamp();
  void set_has_date();
  void set_has_time();
  void set_has_interval_year_to_month();
  void set_has_interval_day_to_second();
  void set_has_fixed_char();
  void set_has_var_char();
  void set_has_fixed_binary();
  void set_has_decimal();
  void set_has_struct_();
  void set_has_map();
  void set_has_timestamp_tz();
  void set_has_uuid();
  void set_has_null();
  void set_has_list();
  void set_has_empty_list();
  void set_has_empty_map();
  void set_has_user_defined();

  inline bool has_literal_type() const;
  inline void clear_has_literal_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool nullable_;
    ::uint32_t type_variation_reference_;
    union LiteralTypeUnion {
      constexpr LiteralTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool boolean_;
      ::int32_t i8_;
      ::int32_t i16_;
      ::int32_t i32_;
      ::int64_t i64_;
      float fp32_;
      double fp64_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
      ::int64_t timestamp_;
      ::int32_t date_;
      ::int64_t time_;
      ::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month_;
      ::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_char_;
      ::substrait::Expression_Literal_VarChar* var_char_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fixed_binary_;
      ::substrait::Expression_Literal_Decimal* decimal_;
      ::substrait::Expression_Literal_Struct* struct__;
      ::substrait::Expression_Literal_Map* map_;
      ::int64_t timestamp_tz_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
      ::substrait::Type* null_;
      ::substrait::Expression_Literal_List* list_;
      ::substrait::Type_List* empty_list_;
      ::substrait::Type_Map* empty_map_;
      ::substrait::Expression_Literal_UserDefined* user_defined_;
    } literal_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Nested_Map_KeyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Nested.Map.KeyValue) */ {
 public:
  inline Expression_Nested_Map_KeyValue() : Expression_Nested_Map_KeyValue(nullptr) {}
  ~Expression_Nested_Map_KeyValue() override;
  explicit PROTOBUF_CONSTEXPR Expression_Nested_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Nested_Map_KeyValue(const Expression_Nested_Map_KeyValue& from);
  Expression_Nested_Map_KeyValue(Expression_Nested_Map_KeyValue&& from) noexcept
    : Expression_Nested_Map_KeyValue() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Map_KeyValue& operator=(const Expression_Nested_Map_KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Map_KeyValue& operator=(Expression_Nested_Map_KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Nested_Map_KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Nested_Map_KeyValue* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Map_KeyValue*>(
               &_Expression_Nested_Map_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(Expression_Nested_Map_KeyValue& a, Expression_Nested_Map_KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Map_KeyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Map_KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Nested_Map_KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Nested_Map_KeyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Nested_Map_KeyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Nested_Map_KeyValue& from) {
    Expression_Nested_Map_KeyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Map_KeyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Nested.Map.KeyValue";
  }
  protected:
  explicit Expression_Nested_Map_KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .substrait.Expression key = 1 [json_name = "key"];
  bool has_key() const;
  void clear_key() ;
  const ::substrait::Expression& key() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_key();
  ::substrait::Expression* mutable_key();
  void set_allocated_key(::substrait::Expression* key);
  private:
  const ::substrait::Expression& _internal_key() const;
  ::substrait::Expression* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::Expression* key);
  ::substrait::Expression* unsafe_arena_release_key();
  // .substrait.Expression value = 2 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::substrait::Expression& value() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_value();
  ::substrait::Expression* mutable_value();
  void set_allocated_value(::substrait::Expression* value);
  private:
  const ::substrait::Expression& _internal_value() const;
  ::substrait::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::Expression* value);
  ::substrait::Expression* unsafe_arena_release_value();
  // @@protoc_insertion_point(class_scope:substrait.Expression.Nested.Map.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* key_;
    ::substrait::Expression* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Nested_Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Nested.Map) */ {
 public:
  inline Expression_Nested_Map() : Expression_Nested_Map(nullptr) {}
  ~Expression_Nested_Map() override;
  explicit PROTOBUF_CONSTEXPR Expression_Nested_Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Nested_Map(const Expression_Nested_Map& from);
  Expression_Nested_Map(Expression_Nested_Map&& from) noexcept
    : Expression_Nested_Map() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Map& operator=(const Expression_Nested_Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Map& operator=(Expression_Nested_Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Nested_Map& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Nested_Map* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Map*>(
               &_Expression_Nested_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Expression_Nested_Map& a, Expression_Nested_Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Map* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Map* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Nested_Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Nested_Map>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Nested_Map& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Nested_Map& from) {
    Expression_Nested_Map::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Map* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Nested.Map";
  }
  protected:
  explicit Expression_Nested_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Nested_Map_KeyValue KeyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kKeyValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression.Nested.Map.KeyValue key_values = 1 [json_name = "keyValues"];
  int key_values_size() const;
  private:
  int _internal_key_values_size() const;

  public:
  void clear_key_values() ;
  ::substrait::Expression_Nested_Map_KeyValue* mutable_key_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Nested_Map_KeyValue >*
      mutable_key_values();
  private:
  const ::substrait::Expression_Nested_Map_KeyValue& _internal_key_values(int index) const;
  ::substrait::Expression_Nested_Map_KeyValue* _internal_add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Nested_Map_KeyValue>& _internal_key_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Nested_Map_KeyValue>* _internal_mutable_key_values();
  public:
  const ::substrait::Expression_Nested_Map_KeyValue& key_values(int index) const;
  ::substrait::Expression_Nested_Map_KeyValue* add_key_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Nested_Map_KeyValue >&
      key_values() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Nested.Map)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Nested_Map_KeyValue > key_values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Nested_Struct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Nested.Struct) */ {
 public:
  inline Expression_Nested_Struct() : Expression_Nested_Struct(nullptr) {}
  ~Expression_Nested_Struct() override;
  explicit PROTOBUF_CONSTEXPR Expression_Nested_Struct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Nested_Struct(const Expression_Nested_Struct& from);
  Expression_Nested_Struct(Expression_Nested_Struct&& from) noexcept
    : Expression_Nested_Struct() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_Struct& operator=(const Expression_Nested_Struct& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_Struct& operator=(Expression_Nested_Struct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Nested_Struct& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Nested_Struct* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_Struct*>(
               &_Expression_Nested_Struct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(Expression_Nested_Struct& a, Expression_Nested_Struct& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_Struct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_Struct* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Nested_Struct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Nested_Struct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Nested_Struct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Nested_Struct& from) {
    Expression_Nested_Struct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_Struct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Nested.Struct";
  }
  protected:
  explicit Expression_Nested_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.Expression fields = 1 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::substrait::Expression* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_fields();
  private:
  const ::substrait::Expression& _internal_fields(int index) const;
  ::substrait::Expression* _internal_add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_fields();
  public:
  const ::substrait::Expression& fields(int index) const;
  ::substrait::Expression* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      fields() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Nested.Struct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Nested_List final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Nested.List) */ {
 public:
  inline Expression_Nested_List() : Expression_Nested_List(nullptr) {}
  ~Expression_Nested_List() override;
  explicit PROTOBUF_CONSTEXPR Expression_Nested_List(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Nested_List(const Expression_Nested_List& from);
  Expression_Nested_List(Expression_Nested_List&& from) noexcept
    : Expression_Nested_List() {
    *this = ::std::move(from);
  }

  inline Expression_Nested_List& operator=(const Expression_Nested_List& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested_List& operator=(Expression_Nested_List&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Nested_List& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Nested_List* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested_List*>(
               &_Expression_Nested_List_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(Expression_Nested_List& a, Expression_Nested_List& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested_List* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested_List* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Nested_List* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Nested_List>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Nested_List& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Nested_List& from) {
    Expression_Nested_List::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested_List* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Nested.List";
  }
  protected:
  explicit Expression_Nested_List(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .substrait.Expression values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::substrait::Expression* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_values();
  private:
  const ::substrait::Expression& _internal_values(int index) const;
  ::substrait::Expression* _internal_add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_values();
  public:
  const ::substrait::Expression& values(int index) const;
  ::substrait::Expression* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      values() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Nested.List)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Nested final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Nested) */ {
 public:
  inline Expression_Nested() : Expression_Nested(nullptr) {}
  ~Expression_Nested() override;
  explicit PROTOBUF_CONSTEXPR Expression_Nested(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Nested(const Expression_Nested& from);
  Expression_Nested(Expression_Nested&& from) noexcept
    : Expression_Nested() {
    *this = ::std::move(from);
  }

  inline Expression_Nested& operator=(const Expression_Nested& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Nested& operator=(Expression_Nested&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Nested& default_instance() {
    return *internal_default_instance();
  }
  enum NestedTypeCase {
    kStruct = 3,
    kList = 4,
    kMap = 5,
    NESTED_TYPE_NOT_SET = 0,
  };

  static inline const Expression_Nested* internal_default_instance() {
    return reinterpret_cast<const Expression_Nested*>(
               &_Expression_Nested_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(Expression_Nested& a, Expression_Nested& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Nested* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Nested* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Nested* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Nested>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Nested& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Nested& from) {
    Expression_Nested::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Nested* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Nested";
  }
  protected:
  explicit Expression_Nested(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Nested_Map Map;
  typedef Expression_Nested_Struct Struct;
  typedef Expression_Nested_List List;

  // accessors -------------------------------------------------------

  enum : int {
    kNullableFieldNumber = 1,
    kTypeVariationReferenceFieldNumber = 2,
    kStructFieldNumber = 3,
    kListFieldNumber = 4,
    kMapFieldNumber = 5,
  };
  // bool nullable = 1 [json_name = "nullable"];
  void clear_nullable() ;
  bool nullable() const;
  void set_nullable(bool value);

  private:
  bool _internal_nullable() const;
  void _internal_set_nullable(bool value);

  public:
  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  void clear_type_variation_reference() ;
  ::uint32_t type_variation_reference() const;
  void set_type_variation_reference(::uint32_t value);

  private:
  ::uint32_t _internal_type_variation_reference() const;
  void _internal_set_type_variation_reference(::uint32_t value);

  public:
  // .substrait.Expression.Nested.Struct struct = 3 [json_name = "struct"];
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;

  public:
  void clear_struct_() ;
  const ::substrait::Expression_Nested_Struct& struct_() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Nested_Struct* release_struct_();
  ::substrait::Expression_Nested_Struct* mutable_struct_();
  void set_allocated_struct_(::substrait::Expression_Nested_Struct* struct_);
  private:
  const ::substrait::Expression_Nested_Struct& _internal_struct_() const;
  ::substrait::Expression_Nested_Struct* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::Expression_Nested_Struct* struct_);
  ::substrait::Expression_Nested_Struct* unsafe_arena_release_struct_();
  // .substrait.Expression.Nested.List list = 4 [json_name = "list"];
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::substrait::Expression_Nested_List& list() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Nested_List* release_list();
  ::substrait::Expression_Nested_List* mutable_list();
  void set_allocated_list(::substrait::Expression_Nested_List* list);
  private:
  const ::substrait::Expression_Nested_List& _internal_list() const;
  ::substrait::Expression_Nested_List* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::Expression_Nested_List* list);
  ::substrait::Expression_Nested_List* unsafe_arena_release_list();
  // .substrait.Expression.Nested.Map map = 5 [json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;

  public:
  void clear_map() ;
  const ::substrait::Expression_Nested_Map& map() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Nested_Map* release_map();
  ::substrait::Expression_Nested_Map* mutable_map();
  void set_allocated_map(::substrait::Expression_Nested_Map* map);
  private:
  const ::substrait::Expression_Nested_Map& _internal_map() const;
  ::substrait::Expression_Nested_Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::Expression_Nested_Map* map);
  ::substrait::Expression_Nested_Map* unsafe_arena_release_map();
  void clear_nested_type();
  NestedTypeCase nested_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Nested)
 private:
  class _Internal;
  void set_has_struct_();
  void set_has_list();
  void set_has_map();

  inline bool has_nested_type() const;
  inline void clear_has_nested_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool nullable_;
    ::uint32_t type_variation_reference_;
    union NestedTypeUnion {
      constexpr NestedTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_Nested_Struct* struct__;
      ::substrait::Expression_Nested_List* list_;
      ::substrait::Expression_Nested_Map* map_;
    } nested_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_ScalarFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.ScalarFunction) */ {
 public:
  inline Expression_ScalarFunction() : Expression_ScalarFunction(nullptr) {}
  ~Expression_ScalarFunction() override;
  explicit PROTOBUF_CONSTEXPR Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_ScalarFunction(const Expression_ScalarFunction& from);
  Expression_ScalarFunction(Expression_ScalarFunction&& from) noexcept
    : Expression_ScalarFunction() {
    *this = ::std::move(from);
  }

  inline Expression_ScalarFunction& operator=(const Expression_ScalarFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ScalarFunction& operator=(Expression_ScalarFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_ScalarFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_ScalarFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_ScalarFunction*>(
               &_Expression_ScalarFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(Expression_ScalarFunction& a, Expression_ScalarFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ScalarFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ScalarFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_ScalarFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_ScalarFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_ScalarFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_ScalarFunction& from) {
    Expression_ScalarFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ScalarFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.ScalarFunction";
  }
  protected:
  explicit Expression_ScalarFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kArgumentsFieldNumber = 4,
    kOptionsFieldNumber = 5,
    kOutputTypeFieldNumber = 3,
    kFunctionReferenceFieldNumber = 1,
  };
  // repeated .substrait.Expression args = 2 [json_name = "args", deprecated = true];
  [[deprecated]]  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  [[deprecated]]  void clear_args() ;
  [[deprecated]] ::substrait::Expression* mutable_args(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_args();
  private:
  const ::substrait::Expression& _internal_args(int index) const;
  ::substrait::Expression* _internal_add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_args();
  public:
  [[deprecated]] const ::substrait::Expression& args(int index) const;
  [[deprecated]] ::substrait::Expression* add_args();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      args() const;
  // repeated .substrait.FunctionArgument arguments = 4 [json_name = "arguments"];
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;

  public:
  void clear_arguments() ;
  ::substrait::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::FunctionArgument* _internal_add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>* _internal_mutable_arguments();
  public:
  const ::substrait::FunctionArgument& arguments(int index) const;
  ::substrait::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
      arguments() const;
  // repeated .substrait.FunctionOption options = 5 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::substrait::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::FunctionOption& _internal_options(int index) const;
  ::substrait::FunctionOption* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>* _internal_mutable_options();
  public:
  const ::substrait::FunctionOption& options(int index) const;
  ::substrait::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
      options() const;
  // .substrait.Type output_type = 3 [json_name = "outputType"];
  bool has_output_type() const;
  void clear_output_type() ;
  const ::substrait::Type& output_type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_output_type();
  ::substrait::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::Type* output_type);
  private:
  const ::substrait::Type& _internal_output_type() const;
  ::substrait::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::Type* output_type);
  ::substrait::Type* unsafe_arena_release_output_type();
  // uint32 function_reference = 1 [json_name = "functionReference"];
  void clear_function_reference() ;
  ::uint32_t function_reference() const;
  void set_function_reference(::uint32_t value);

  private:
  ::uint32_t _internal_function_reference() const;
  void _internal_set_function_reference(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.ScalarFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > args_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument > arguments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption > options_;
    ::substrait::Type* output_type_;
    ::uint32_t function_reference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Preceding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction.Bound.Preceding) */ {
 public:
  inline Expression_WindowFunction_Bound_Preceding() : Expression_WindowFunction_Bound_Preceding(nullptr) {}
  ~Expression_WindowFunction_Bound_Preceding() override;
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction_Bound_Preceding(const Expression_WindowFunction_Bound_Preceding& from);
  Expression_WindowFunction_Bound_Preceding(Expression_WindowFunction_Bound_Preceding&& from) noexcept
    : Expression_WindowFunction_Bound_Preceding() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Preceding& operator=(const Expression_WindowFunction_Bound_Preceding& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Preceding& operator=(Expression_WindowFunction_Bound_Preceding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction_Bound_Preceding& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_WindowFunction_Bound_Preceding* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Preceding*>(
               &_Expression_WindowFunction_Bound_Preceding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(Expression_WindowFunction_Bound_Preceding& a, Expression_WindowFunction_Bound_Preceding& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Preceding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Preceding* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction_Bound_Preceding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Preceding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_WindowFunction_Bound_Preceding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_WindowFunction_Bound_Preceding& from) {
    Expression_WindowFunction_Bound_Preceding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_Preceding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction.Bound.Preceding";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Preceding(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1 [json_name = "offset"];
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction.Bound.Preceding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Following final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction.Bound.Following) */ {
 public:
  inline Expression_WindowFunction_Bound_Following() : Expression_WindowFunction_Bound_Following(nullptr) {}
  ~Expression_WindowFunction_Bound_Following() override;
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction_Bound_Following(const Expression_WindowFunction_Bound_Following& from);
  Expression_WindowFunction_Bound_Following(Expression_WindowFunction_Bound_Following&& from) noexcept
    : Expression_WindowFunction_Bound_Following() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Following& operator=(const Expression_WindowFunction_Bound_Following& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Following& operator=(Expression_WindowFunction_Bound_Following&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction_Bound_Following& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_WindowFunction_Bound_Following* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Following*>(
               &_Expression_WindowFunction_Bound_Following_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(Expression_WindowFunction_Bound_Following& a, Expression_WindowFunction_Bound_Following& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Following* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Following* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction_Bound_Following* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Following>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_WindowFunction_Bound_Following& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_WindowFunction_Bound_Following& from) {
    Expression_WindowFunction_Bound_Following::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound_Following* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction.Bound.Following";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Following(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
  };
  // int64 offset = 1 [json_name = "offset"];
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction.Bound.Following)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t offset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_CurrentRow final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction.Bound.CurrentRow) */ {
 public:
  inline Expression_WindowFunction_Bound_CurrentRow() : Expression_WindowFunction_Bound_CurrentRow(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction_Bound_CurrentRow(const Expression_WindowFunction_Bound_CurrentRow& from);
  Expression_WindowFunction_Bound_CurrentRow(Expression_WindowFunction_Bound_CurrentRow&& from) noexcept
    : Expression_WindowFunction_Bound_CurrentRow() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_CurrentRow& operator=(const Expression_WindowFunction_Bound_CurrentRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_CurrentRow& operator=(Expression_WindowFunction_Bound_CurrentRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction_Bound_CurrentRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_WindowFunction_Bound_CurrentRow* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_CurrentRow*>(
               &_Expression_WindowFunction_Bound_CurrentRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(Expression_WindowFunction_Bound_CurrentRow& a, Expression_WindowFunction_Bound_CurrentRow& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_CurrentRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_CurrentRow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction_Bound_CurrentRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_CurrentRow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Expression_WindowFunction_Bound_CurrentRow& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction.Bound.CurrentRow";
  }
  protected:
  explicit Expression_WindowFunction_Bound_CurrentRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction.Bound.CurrentRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction_Bound_Unbounded final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction.Bound.Unbounded) */ {
 public:
  inline Expression_WindowFunction_Bound_Unbounded() : Expression_WindowFunction_Bound_Unbounded(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction_Bound_Unbounded(const Expression_WindowFunction_Bound_Unbounded& from);
  Expression_WindowFunction_Bound_Unbounded(Expression_WindowFunction_Bound_Unbounded&& from) noexcept
    : Expression_WindowFunction_Bound_Unbounded() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound_Unbounded& operator=(const Expression_WindowFunction_Bound_Unbounded& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound_Unbounded& operator=(Expression_WindowFunction_Bound_Unbounded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction_Bound_Unbounded& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_WindowFunction_Bound_Unbounded* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound_Unbounded*>(
               &_Expression_WindowFunction_Bound_Unbounded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(Expression_WindowFunction_Bound_Unbounded& a, Expression_WindowFunction_Bound_Unbounded& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound_Unbounded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound_Unbounded* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction_Bound_Unbounded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound_Unbounded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Expression_WindowFunction_Bound_Unbounded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction.Bound.Unbounded";
  }
  protected:
  explicit Expression_WindowFunction_Bound_Unbounded(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction.Bound.Unbounded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction_Bound final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction.Bound) */ {
 public:
  inline Expression_WindowFunction_Bound() : Expression_WindowFunction_Bound(nullptr) {}
  ~Expression_WindowFunction_Bound() override;
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction_Bound(const Expression_WindowFunction_Bound& from);
  Expression_WindowFunction_Bound(Expression_WindowFunction_Bound&& from) noexcept
    : Expression_WindowFunction_Bound() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction_Bound& operator=(const Expression_WindowFunction_Bound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction_Bound& operator=(Expression_WindowFunction_Bound&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction_Bound& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kPreceding = 1,
    kFollowing = 2,
    kCurrentRow = 3,
    kUnbounded = 4,
    KIND_NOT_SET = 0,
  };

  static inline const Expression_WindowFunction_Bound* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction_Bound*>(
               &_Expression_WindowFunction_Bound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(Expression_WindowFunction_Bound& a, Expression_WindowFunction_Bound& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction_Bound* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction_Bound* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction_Bound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction_Bound>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_WindowFunction_Bound& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_WindowFunction_Bound& from) {
    Expression_WindowFunction_Bound::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction_Bound* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction.Bound";
  }
  protected:
  explicit Expression_WindowFunction_Bound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_WindowFunction_Bound_Preceding Preceding;
  typedef Expression_WindowFunction_Bound_Following Following;
  typedef Expression_WindowFunction_Bound_CurrentRow CurrentRow;
  typedef Expression_WindowFunction_Bound_Unbounded Unbounded;

  // accessors -------------------------------------------------------

  enum : int {
    kPrecedingFieldNumber = 1,
    kFollowingFieldNumber = 2,
    kCurrentRowFieldNumber = 3,
    kUnboundedFieldNumber = 4,
  };
  // .substrait.Expression.WindowFunction.Bound.Preceding preceding = 1 [json_name = "preceding"];
  bool has_preceding() const;
  private:
  bool _internal_has_preceding() const;

  public:
  void clear_preceding() ;
  const ::substrait::Expression_WindowFunction_Bound_Preceding& preceding() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound_Preceding* release_preceding();
  ::substrait::Expression_WindowFunction_Bound_Preceding* mutable_preceding();
  void set_allocated_preceding(::substrait::Expression_WindowFunction_Bound_Preceding* preceding);
  private:
  const ::substrait::Expression_WindowFunction_Bound_Preceding& _internal_preceding() const;
  ::substrait::Expression_WindowFunction_Bound_Preceding* _internal_mutable_preceding();
  public:
  void unsafe_arena_set_allocated_preceding(
      ::substrait::Expression_WindowFunction_Bound_Preceding* preceding);
  ::substrait::Expression_WindowFunction_Bound_Preceding* unsafe_arena_release_preceding();
  // .substrait.Expression.WindowFunction.Bound.Following following = 2 [json_name = "following"];
  bool has_following() const;
  private:
  bool _internal_has_following() const;

  public:
  void clear_following() ;
  const ::substrait::Expression_WindowFunction_Bound_Following& following() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound_Following* release_following();
  ::substrait::Expression_WindowFunction_Bound_Following* mutable_following();
  void set_allocated_following(::substrait::Expression_WindowFunction_Bound_Following* following);
  private:
  const ::substrait::Expression_WindowFunction_Bound_Following& _internal_following() const;
  ::substrait::Expression_WindowFunction_Bound_Following* _internal_mutable_following();
  public:
  void unsafe_arena_set_allocated_following(
      ::substrait::Expression_WindowFunction_Bound_Following* following);
  ::substrait::Expression_WindowFunction_Bound_Following* unsafe_arena_release_following();
  // .substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3 [json_name = "currentRow"];
  bool has_current_row() const;
  private:
  bool _internal_has_current_row() const;

  public:
  void clear_current_row() ;
  const ::substrait::Expression_WindowFunction_Bound_CurrentRow& current_row() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound_CurrentRow* release_current_row();
  ::substrait::Expression_WindowFunction_Bound_CurrentRow* mutable_current_row();
  void set_allocated_current_row(::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row);
  private:
  const ::substrait::Expression_WindowFunction_Bound_CurrentRow& _internal_current_row() const;
  ::substrait::Expression_WindowFunction_Bound_CurrentRow* _internal_mutable_current_row();
  public:
  void unsafe_arena_set_allocated_current_row(
      ::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row);
  ::substrait::Expression_WindowFunction_Bound_CurrentRow* unsafe_arena_release_current_row();
  // .substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4 [json_name = "unbounded"];
  bool has_unbounded() const;
  private:
  bool _internal_has_unbounded() const;

  public:
  void clear_unbounded() ;
  const ::substrait::Expression_WindowFunction_Bound_Unbounded& unbounded() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound_Unbounded* release_unbounded();
  ::substrait::Expression_WindowFunction_Bound_Unbounded* mutable_unbounded();
  void set_allocated_unbounded(::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded);
  private:
  const ::substrait::Expression_WindowFunction_Bound_Unbounded& _internal_unbounded() const;
  ::substrait::Expression_WindowFunction_Bound_Unbounded* _internal_mutable_unbounded();
  public:
  void unsafe_arena_set_allocated_unbounded(
      ::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded);
  ::substrait::Expression_WindowFunction_Bound_Unbounded* unsafe_arena_release_unbounded();
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction.Bound)
 private:
  class _Internal;
  void set_has_preceding();
  void set_has_following();
  void set_has_current_row();
  void set_has_unbounded();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_WindowFunction_Bound_Preceding* preceding_;
      ::substrait::Expression_WindowFunction_Bound_Following* following_;
      ::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row_;
      ::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_WindowFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.WindowFunction) */ {
 public:
  inline Expression_WindowFunction() : Expression_WindowFunction(nullptr) {}
  ~Expression_WindowFunction() override;
  explicit PROTOBUF_CONSTEXPR Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_WindowFunction(const Expression_WindowFunction& from);
  Expression_WindowFunction(Expression_WindowFunction&& from) noexcept
    : Expression_WindowFunction() {
    *this = ::std::move(from);
  }

  inline Expression_WindowFunction& operator=(const Expression_WindowFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_WindowFunction& operator=(Expression_WindowFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_WindowFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_WindowFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_WindowFunction*>(
               &_Expression_WindowFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(Expression_WindowFunction& a, Expression_WindowFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_WindowFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_WindowFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_WindowFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_WindowFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_WindowFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_WindowFunction& from) {
    Expression_WindowFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_WindowFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.WindowFunction";
  }
  protected:
  explicit Expression_WindowFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_WindowFunction_Bound Bound;

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionsFieldNumber = 2,
    kSortsFieldNumber = 3,
    kArgsFieldNumber = 8,
    kArgumentsFieldNumber = 9,
    kOptionsFieldNumber = 11,
    kUpperBoundFieldNumber = 4,
    kLowerBoundFieldNumber = 5,
    kOutputTypeFieldNumber = 7,
    kFunctionReferenceFieldNumber = 1,
    kPhaseFieldNumber = 6,
    kInvocationFieldNumber = 10,
  };
  // repeated .substrait.Expression partitions = 2 [json_name = "partitions"];
  int partitions_size() const;
  private:
  int _internal_partitions_size() const;

  public:
  void clear_partitions() ;
  ::substrait::Expression* mutable_partitions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_partitions();
  private:
  const ::substrait::Expression& _internal_partitions(int index) const;
  ::substrait::Expression* _internal_add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_partitions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_partitions();
  public:
  const ::substrait::Expression& partitions(int index) const;
  ::substrait::Expression* add_partitions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      partitions() const;
  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;

  public:
  void clear_sorts() ;
  ::substrait::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
      mutable_sorts();
  private:
  const ::substrait::SortField& _internal_sorts(int index) const;
  ::substrait::SortField* _internal_add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>& _internal_sorts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>* _internal_mutable_sorts();
  public:
  const ::substrait::SortField& sorts(int index) const;
  ::substrait::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
      sorts() const;
  // repeated .substrait.Expression args = 8 [json_name = "args", deprecated = true];
  [[deprecated]]  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  [[deprecated]]  void clear_args() ;
  [[deprecated]] ::substrait::Expression* mutable_args(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_args();
  private:
  const ::substrait::Expression& _internal_args(int index) const;
  ::substrait::Expression* _internal_add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_args();
  public:
  [[deprecated]] const ::substrait::Expression& args(int index) const;
  [[deprecated]] ::substrait::Expression* add_args();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      args() const;
  // repeated .substrait.FunctionArgument arguments = 9 [json_name = "arguments"];
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;

  public:
  void clear_arguments() ;
  ::substrait::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::FunctionArgument* _internal_add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>* _internal_mutable_arguments();
  public:
  const ::substrait::FunctionArgument& arguments(int index) const;
  ::substrait::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
      arguments() const;
  // repeated .substrait.FunctionOption options = 11 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::substrait::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::FunctionOption& _internal_options(int index) const;
  ::substrait::FunctionOption* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>* _internal_mutable_options();
  public:
  const ::substrait::FunctionOption& options(int index) const;
  ::substrait::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
      options() const;
  // .substrait.Expression.WindowFunction.Bound upper_bound = 4 [json_name = "upperBound"];
  bool has_upper_bound() const;
  void clear_upper_bound() ;
  const ::substrait::Expression_WindowFunction_Bound& upper_bound() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound* release_upper_bound();
  ::substrait::Expression_WindowFunction_Bound* mutable_upper_bound();
  void set_allocated_upper_bound(::substrait::Expression_WindowFunction_Bound* upper_bound);
  private:
  const ::substrait::Expression_WindowFunction_Bound& _internal_upper_bound() const;
  ::substrait::Expression_WindowFunction_Bound* _internal_mutable_upper_bound();
  public:
  void unsafe_arena_set_allocated_upper_bound(
      ::substrait::Expression_WindowFunction_Bound* upper_bound);
  ::substrait::Expression_WindowFunction_Bound* unsafe_arena_release_upper_bound();
  // .substrait.Expression.WindowFunction.Bound lower_bound = 5 [json_name = "lowerBound"];
  bool has_lower_bound() const;
  void clear_lower_bound() ;
  const ::substrait::Expression_WindowFunction_Bound& lower_bound() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction_Bound* release_lower_bound();
  ::substrait::Expression_WindowFunction_Bound* mutable_lower_bound();
  void set_allocated_lower_bound(::substrait::Expression_WindowFunction_Bound* lower_bound);
  private:
  const ::substrait::Expression_WindowFunction_Bound& _internal_lower_bound() const;
  ::substrait::Expression_WindowFunction_Bound* _internal_mutable_lower_bound();
  public:
  void unsafe_arena_set_allocated_lower_bound(
      ::substrait::Expression_WindowFunction_Bound* lower_bound);
  ::substrait::Expression_WindowFunction_Bound* unsafe_arena_release_lower_bound();
  // .substrait.Type output_type = 7 [json_name = "outputType"];
  bool has_output_type() const;
  void clear_output_type() ;
  const ::substrait::Type& output_type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_output_type();
  ::substrait::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::Type* output_type);
  private:
  const ::substrait::Type& _internal_output_type() const;
  ::substrait::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::Type* output_type);
  ::substrait::Type* unsafe_arena_release_output_type();
  // uint32 function_reference = 1 [json_name = "functionReference"];
  void clear_function_reference() ;
  ::uint32_t function_reference() const;
  void set_function_reference(::uint32_t value);

  private:
  ::uint32_t _internal_function_reference() const;
  void _internal_set_function_reference(::uint32_t value);

  public:
  // .substrait.AggregationPhase phase = 6 [json_name = "phase"];
  void clear_phase() ;
  ::substrait::AggregationPhase phase() const;
  void set_phase(::substrait::AggregationPhase value);

  private:
  ::substrait::AggregationPhase _internal_phase() const;
  void _internal_set_phase(::substrait::AggregationPhase value);

  public:
  // .substrait.AggregateFunction.AggregationInvocation invocation = 10 [json_name = "invocation"];
  void clear_invocation() ;
  ::substrait::AggregateFunction_AggregationInvocation invocation() const;
  void set_invocation(::substrait::AggregateFunction_AggregationInvocation value);

  private:
  ::substrait::AggregateFunction_AggregationInvocation _internal_invocation() const;
  void _internal_set_invocation(::substrait::AggregateFunction_AggregationInvocation value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.WindowFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > partitions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField > sorts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > args_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument > arguments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption > options_;
    ::substrait::Expression_WindowFunction_Bound* upper_bound_;
    ::substrait::Expression_WindowFunction_Bound* lower_bound_;
    ::substrait::Type* output_type_;
    ::uint32_t function_reference_;
    int phase_;
    int invocation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_IfThen_IfClause final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.IfThen.IfClause) */ {
 public:
  inline Expression_IfThen_IfClause() : Expression_IfThen_IfClause(nullptr) {}
  ~Expression_IfThen_IfClause() override;
  explicit PROTOBUF_CONSTEXPR Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_IfThen_IfClause(const Expression_IfThen_IfClause& from);
  Expression_IfThen_IfClause(Expression_IfThen_IfClause&& from) noexcept
    : Expression_IfThen_IfClause() {
    *this = ::std::move(from);
  }

  inline Expression_IfThen_IfClause& operator=(const Expression_IfThen_IfClause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_IfThen_IfClause& operator=(Expression_IfThen_IfClause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_IfThen_IfClause& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_IfThen_IfClause* internal_default_instance() {
    return reinterpret_cast<const Expression_IfThen_IfClause*>(
               &_Expression_IfThen_IfClause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(Expression_IfThen_IfClause& a, Expression_IfThen_IfClause& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_IfThen_IfClause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_IfThen_IfClause* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_IfThen_IfClause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_IfThen_IfClause>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_IfThen_IfClause& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_IfThen_IfClause& from) {
    Expression_IfThen_IfClause::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_IfThen_IfClause* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.IfThen.IfClause";
  }
  protected:
  explicit Expression_IfThen_IfClause(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfFieldNumber = 1,
    kThenFieldNumber = 2,
  };
  // .substrait.Expression if = 1 [json_name = "if"];
  bool has_if_() const;
  void clear_if_() ;
  const ::substrait::Expression& if_() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_if_();
  ::substrait::Expression* mutable_if_();
  void set_allocated_if_(::substrait::Expression* if_);
  private:
  const ::substrait::Expression& _internal_if_() const;
  ::substrait::Expression* _internal_mutable_if_();
  public:
  void unsafe_arena_set_allocated_if_(
      ::substrait::Expression* if_);
  ::substrait::Expression* unsafe_arena_release_if_();
  // .substrait.Expression then = 2 [json_name = "then"];
  bool has_then() const;
  void clear_then() ;
  const ::substrait::Expression& then() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_then();
  ::substrait::Expression* mutable_then();
  void set_allocated_then(::substrait::Expression* then);
  private:
  const ::substrait::Expression& _internal_then() const;
  ::substrait::Expression* _internal_mutable_then();
  public:
  void unsafe_arena_set_allocated_then(
      ::substrait::Expression* then);
  ::substrait::Expression* unsafe_arena_release_then();
  // @@protoc_insertion_point(class_scope:substrait.Expression.IfThen.IfClause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* if__;
    ::substrait::Expression* then_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_IfThen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.IfThen) */ {
 public:
  inline Expression_IfThen() : Expression_IfThen(nullptr) {}
  ~Expression_IfThen() override;
  explicit PROTOBUF_CONSTEXPR Expression_IfThen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_IfThen(const Expression_IfThen& from);
  Expression_IfThen(Expression_IfThen&& from) noexcept
    : Expression_IfThen() {
    *this = ::std::move(from);
  }

  inline Expression_IfThen& operator=(const Expression_IfThen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_IfThen& operator=(Expression_IfThen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_IfThen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_IfThen* internal_default_instance() {
    return reinterpret_cast<const Expression_IfThen*>(
               &_Expression_IfThen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(Expression_IfThen& a, Expression_IfThen& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_IfThen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_IfThen* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_IfThen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_IfThen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_IfThen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_IfThen& from) {
    Expression_IfThen::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_IfThen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.IfThen";
  }
  protected:
  explicit Expression_IfThen(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_IfThen_IfClause IfClause;

  // accessors -------------------------------------------------------

  enum : int {
    kIfsFieldNumber = 1,
    kElseFieldNumber = 2,
  };
  // repeated .substrait.Expression.IfThen.IfClause ifs = 1 [json_name = "ifs"];
  int ifs_size() const;
  private:
  int _internal_ifs_size() const;

  public:
  void clear_ifs() ;
  ::substrait::Expression_IfThen_IfClause* mutable_ifs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_IfThen_IfClause >*
      mutable_ifs();
  private:
  const ::substrait::Expression_IfThen_IfClause& _internal_ifs(int index) const;
  ::substrait::Expression_IfThen_IfClause* _internal_add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_IfThen_IfClause>& _internal_ifs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_IfThen_IfClause>* _internal_mutable_ifs();
  public:
  const ::substrait::Expression_IfThen_IfClause& ifs(int index) const;
  ::substrait::Expression_IfThen_IfClause* add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_IfThen_IfClause >&
      ifs() const;
  // .substrait.Expression else = 2 [json_name = "else"];
  bool has_else_() const;
  void clear_else_() ;
  const ::substrait::Expression& else_() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_else_();
  ::substrait::Expression* mutable_else_();
  void set_allocated_else_(::substrait::Expression* else_);
  private:
  const ::substrait::Expression& _internal_else_() const;
  ::substrait::Expression* _internal_mutable_else_();
  public:
  void unsafe_arena_set_allocated_else_(
      ::substrait::Expression* else_);
  ::substrait::Expression* unsafe_arena_release_else_();
  // @@protoc_insertion_point(class_scope:substrait.Expression.IfThen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_IfThen_IfClause > ifs_;
    ::substrait::Expression* else__;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Cast final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Cast) */ {
 public:
  inline Expression_Cast() : Expression_Cast(nullptr) {}
  ~Expression_Cast() override;
  explicit PROTOBUF_CONSTEXPR Expression_Cast(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Cast(const Expression_Cast& from);
  Expression_Cast(Expression_Cast&& from) noexcept
    : Expression_Cast() {
    *this = ::std::move(from);
  }

  inline Expression_Cast& operator=(const Expression_Cast& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Cast& operator=(Expression_Cast&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Cast& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Cast* internal_default_instance() {
    return reinterpret_cast<const Expression_Cast*>(
               &_Expression_Cast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(Expression_Cast& a, Expression_Cast& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Cast* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Cast* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Cast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Cast>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Cast& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Cast& from) {
    Expression_Cast::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Cast* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Cast";
  }
  protected:
  explicit Expression_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using FailureBehavior = Expression_Cast_FailureBehavior;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_UNSPECIFIED = Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_UNSPECIFIED;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_RETURN_NULL = Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_RETURN_NULL;
  static constexpr FailureBehavior FAILURE_BEHAVIOR_THROW_EXCEPTION = Expression_Cast_FailureBehavior_FAILURE_BEHAVIOR_THROW_EXCEPTION;
  static inline bool FailureBehavior_IsValid(int value) {
    return Expression_Cast_FailureBehavior_IsValid(value);
  }
  static constexpr FailureBehavior FailureBehavior_MIN = Expression_Cast_FailureBehavior_FailureBehavior_MIN;
  static constexpr FailureBehavior FailureBehavior_MAX = Expression_Cast_FailureBehavior_FailureBehavior_MAX;
  static constexpr int FailureBehavior_ARRAYSIZE = Expression_Cast_FailureBehavior_FailureBehavior_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailureBehavior_descriptor() {
    return Expression_Cast_FailureBehavior_descriptor();
  }
  template <typename T>
  static inline const std::string& FailureBehavior_Name(T value) {
    return Expression_Cast_FailureBehavior_Name(value);
  }
  static inline bool FailureBehavior_Parse(absl::string_view name, FailureBehavior* value) {
    return Expression_Cast_FailureBehavior_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInputFieldNumber = 2,
    kFailureBehaviorFieldNumber = 3,
  };
  // .substrait.Type type = 1 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  const ::substrait::Type& type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_type();
  ::substrait::Type* mutable_type();
  void set_allocated_type(::substrait::Type* type);
  private:
  const ::substrait::Type& _internal_type() const;
  ::substrait::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::substrait::Type* type);
  ::substrait::Type* unsafe_arena_release_type();
  // .substrait.Expression input = 2 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Expression& input() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_input();
  ::substrait::Expression* mutable_input();
  void set_allocated_input(::substrait::Expression* input);
  private:
  const ::substrait::Expression& _internal_input() const;
  ::substrait::Expression* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Expression* input);
  ::substrait::Expression* unsafe_arena_release_input();
  // .substrait.Expression.Cast.FailureBehavior failure_behavior = 3 [json_name = "failureBehavior"];
  void clear_failure_behavior() ;
  ::substrait::Expression_Cast_FailureBehavior failure_behavior() const;
  void set_failure_behavior(::substrait::Expression_Cast_FailureBehavior value);

  private:
  ::substrait::Expression_Cast_FailureBehavior _internal_failure_behavior() const;
  void _internal_set_failure_behavior(::substrait::Expression_Cast_FailureBehavior value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Cast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Type* type_;
    ::substrait::Expression* input_;
    int failure_behavior_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_SwitchExpression_IfValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.SwitchExpression.IfValue) */ {
 public:
  inline Expression_SwitchExpression_IfValue() : Expression_SwitchExpression_IfValue(nullptr) {}
  ~Expression_SwitchExpression_IfValue() override;
  explicit PROTOBUF_CONSTEXPR Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_SwitchExpression_IfValue(const Expression_SwitchExpression_IfValue& from);
  Expression_SwitchExpression_IfValue(Expression_SwitchExpression_IfValue&& from) noexcept
    : Expression_SwitchExpression_IfValue() {
    *this = ::std::move(from);
  }

  inline Expression_SwitchExpression_IfValue& operator=(const Expression_SwitchExpression_IfValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SwitchExpression_IfValue& operator=(Expression_SwitchExpression_IfValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_SwitchExpression_IfValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_SwitchExpression_IfValue* internal_default_instance() {
    return reinterpret_cast<const Expression_SwitchExpression_IfValue*>(
               &_Expression_SwitchExpression_IfValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(Expression_SwitchExpression_IfValue& a, Expression_SwitchExpression_IfValue& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SwitchExpression_IfValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SwitchExpression_IfValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_SwitchExpression_IfValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_SwitchExpression_IfValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_SwitchExpression_IfValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_SwitchExpression_IfValue& from) {
    Expression_SwitchExpression_IfValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SwitchExpression_IfValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.SwitchExpression.IfValue";
  }
  protected:
  explicit Expression_SwitchExpression_IfValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfFieldNumber = 1,
    kThenFieldNumber = 2,
  };
  // .substrait.Expression.Literal if = 1 [json_name = "if"];
  bool has_if_() const;
  void clear_if_() ;
  const ::substrait::Expression_Literal& if_() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_if_();
  ::substrait::Expression_Literal* mutable_if_();
  void set_allocated_if_(::substrait::Expression_Literal* if_);
  private:
  const ::substrait::Expression_Literal& _internal_if_() const;
  ::substrait::Expression_Literal* _internal_mutable_if_();
  public:
  void unsafe_arena_set_allocated_if_(
      ::substrait::Expression_Literal* if_);
  ::substrait::Expression_Literal* unsafe_arena_release_if_();
  // .substrait.Expression then = 2 [json_name = "then"];
  bool has_then() const;
  void clear_then() ;
  const ::substrait::Expression& then() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_then();
  ::substrait::Expression* mutable_then();
  void set_allocated_then(::substrait::Expression* then);
  private:
  const ::substrait::Expression& _internal_then() const;
  ::substrait::Expression* _internal_mutable_then();
  public:
  void unsafe_arena_set_allocated_then(
      ::substrait::Expression* then);
  ::substrait::Expression* unsafe_arena_release_then();
  // @@protoc_insertion_point(class_scope:substrait.Expression.SwitchExpression.IfValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_Literal* if__;
    ::substrait::Expression* then_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_SwitchExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.SwitchExpression) */ {
 public:
  inline Expression_SwitchExpression() : Expression_SwitchExpression(nullptr) {}
  ~Expression_SwitchExpression() override;
  explicit PROTOBUF_CONSTEXPR Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_SwitchExpression(const Expression_SwitchExpression& from);
  Expression_SwitchExpression(Expression_SwitchExpression&& from) noexcept
    : Expression_SwitchExpression() {
    *this = ::std::move(from);
  }

  inline Expression_SwitchExpression& operator=(const Expression_SwitchExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SwitchExpression& operator=(Expression_SwitchExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_SwitchExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_SwitchExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_SwitchExpression*>(
               &_Expression_SwitchExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(Expression_SwitchExpression& a, Expression_SwitchExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SwitchExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SwitchExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_SwitchExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_SwitchExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_SwitchExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_SwitchExpression& from) {
    Expression_SwitchExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SwitchExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.SwitchExpression";
  }
  protected:
  explicit Expression_SwitchExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_SwitchExpression_IfValue IfValue;

  // accessors -------------------------------------------------------

  enum : int {
    kIfsFieldNumber = 1,
    kElseFieldNumber = 2,
    kMatchFieldNumber = 3,
  };
  // repeated .substrait.Expression.SwitchExpression.IfValue ifs = 1 [json_name = "ifs"];
  int ifs_size() const;
  private:
  int _internal_ifs_size() const;

  public:
  void clear_ifs() ;
  ::substrait::Expression_SwitchExpression_IfValue* mutable_ifs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_SwitchExpression_IfValue >*
      mutable_ifs();
  private:
  const ::substrait::Expression_SwitchExpression_IfValue& _internal_ifs(int index) const;
  ::substrait::Expression_SwitchExpression_IfValue* _internal_add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_SwitchExpression_IfValue>& _internal_ifs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_SwitchExpression_IfValue>* _internal_mutable_ifs();
  public:
  const ::substrait::Expression_SwitchExpression_IfValue& ifs(int index) const;
  ::substrait::Expression_SwitchExpression_IfValue* add_ifs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_SwitchExpression_IfValue >&
      ifs() const;
  // .substrait.Expression else = 2 [json_name = "else"];
  bool has_else_() const;
  void clear_else_() ;
  const ::substrait::Expression& else_() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_else_();
  ::substrait::Expression* mutable_else_();
  void set_allocated_else_(::substrait::Expression* else_);
  private:
  const ::substrait::Expression& _internal_else_() const;
  ::substrait::Expression* _internal_mutable_else_();
  public:
  void unsafe_arena_set_allocated_else_(
      ::substrait::Expression* else_);
  ::substrait::Expression* unsafe_arena_release_else_();
  // .substrait.Expression match = 3 [json_name = "match"];
  bool has_match() const;
  void clear_match() ;
  const ::substrait::Expression& match() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_match();
  ::substrait::Expression* mutable_match();
  void set_allocated_match(::substrait::Expression* match);
  private:
  const ::substrait::Expression& _internal_match() const;
  ::substrait::Expression* _internal_mutable_match();
  public:
  void unsafe_arena_set_allocated_match(
      ::substrait::Expression* match);
  ::substrait::Expression* unsafe_arena_release_match();
  // @@protoc_insertion_point(class_scope:substrait.Expression.SwitchExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_SwitchExpression_IfValue > ifs_;
    ::substrait::Expression* else__;
    ::substrait::Expression* match_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_SingularOrList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.SingularOrList) */ {
 public:
  inline Expression_SingularOrList() : Expression_SingularOrList(nullptr) {}
  ~Expression_SingularOrList() override;
  explicit PROTOBUF_CONSTEXPR Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_SingularOrList(const Expression_SingularOrList& from);
  Expression_SingularOrList(Expression_SingularOrList&& from) noexcept
    : Expression_SingularOrList() {
    *this = ::std::move(from);
  }

  inline Expression_SingularOrList& operator=(const Expression_SingularOrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_SingularOrList& operator=(Expression_SingularOrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_SingularOrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_SingularOrList* internal_default_instance() {
    return reinterpret_cast<const Expression_SingularOrList*>(
               &_Expression_SingularOrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(Expression_SingularOrList& a, Expression_SingularOrList& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_SingularOrList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_SingularOrList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_SingularOrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_SingularOrList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_SingularOrList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_SingularOrList& from) {
    Expression_SingularOrList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_SingularOrList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.SingularOrList";
  }
  protected:
  explicit Expression_SingularOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated .substrait.Expression options = 2 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::substrait::Expression* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_options();
  private:
  const ::substrait::Expression& _internal_options(int index) const;
  ::substrait::Expression* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_options();
  public:
  const ::substrait::Expression& options(int index) const;
  ::substrait::Expression* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      options() const;
  // .substrait.Expression value = 1 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::substrait::Expression& value() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_value();
  ::substrait::Expression* mutable_value();
  void set_allocated_value(::substrait::Expression* value);
  private:
  const ::substrait::Expression& _internal_value() const;
  ::substrait::Expression* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::substrait::Expression* value);
  ::substrait::Expression* unsafe_arena_release_value();
  // @@protoc_insertion_point(class_scope:substrait.Expression.SingularOrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > options_;
    ::substrait::Expression* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MultiOrList_Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MultiOrList.Record) */ {
 public:
  inline Expression_MultiOrList_Record() : Expression_MultiOrList_Record(nullptr) {}
  ~Expression_MultiOrList_Record() override;
  explicit PROTOBUF_CONSTEXPR Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MultiOrList_Record(const Expression_MultiOrList_Record& from);
  Expression_MultiOrList_Record(Expression_MultiOrList_Record&& from) noexcept
    : Expression_MultiOrList_Record() {
    *this = ::std::move(from);
  }

  inline Expression_MultiOrList_Record& operator=(const Expression_MultiOrList_Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MultiOrList_Record& operator=(Expression_MultiOrList_Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MultiOrList_Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MultiOrList_Record* internal_default_instance() {
    return reinterpret_cast<const Expression_MultiOrList_Record*>(
               &_Expression_MultiOrList_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(Expression_MultiOrList_Record& a, Expression_MultiOrList_Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MultiOrList_Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MultiOrList_Record* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MultiOrList_Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MultiOrList_Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MultiOrList_Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MultiOrList_Record& from) {
    Expression_MultiOrList_Record::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MultiOrList_Record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MultiOrList.Record";
  }
  protected:
  explicit Expression_MultiOrList_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .substrait.Expression fields = 1 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::substrait::Expression* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_fields();
  private:
  const ::substrait::Expression& _internal_fields(int index) const;
  ::substrait::Expression* _internal_add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_fields();
  public:
  const ::substrait::Expression& fields(int index) const;
  ::substrait::Expression* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      fields() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MultiOrList.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > fields_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MultiOrList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MultiOrList) */ {
 public:
  inline Expression_MultiOrList() : Expression_MultiOrList(nullptr) {}
  ~Expression_MultiOrList() override;
  explicit PROTOBUF_CONSTEXPR Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MultiOrList(const Expression_MultiOrList& from);
  Expression_MultiOrList(Expression_MultiOrList&& from) noexcept
    : Expression_MultiOrList() {
    *this = ::std::move(from);
  }

  inline Expression_MultiOrList& operator=(const Expression_MultiOrList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MultiOrList& operator=(Expression_MultiOrList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MultiOrList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MultiOrList* internal_default_instance() {
    return reinterpret_cast<const Expression_MultiOrList*>(
               &_Expression_MultiOrList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(Expression_MultiOrList& a, Expression_MultiOrList& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MultiOrList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MultiOrList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MultiOrList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MultiOrList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MultiOrList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MultiOrList& from) {
    Expression_MultiOrList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MultiOrList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MultiOrList";
  }
  protected:
  explicit Expression_MultiOrList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_MultiOrList_Record Record;

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kOptionsFieldNumber = 2,
  };
  // repeated .substrait.Expression value = 1 [json_name = "value"];
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::substrait::Expression* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_value();
  private:
  const ::substrait::Expression& _internal_value(int index) const;
  ::substrait::Expression* _internal_add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_value();
  public:
  const ::substrait::Expression& value(int index) const;
  ::substrait::Expression* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      value() const;
  // repeated .substrait.Expression.MultiOrList.Record options = 2 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::substrait::Expression_MultiOrList_Record* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MultiOrList_Record >*
      mutable_options();
  private:
  const ::substrait::Expression_MultiOrList_Record& _internal_options(int index) const;
  ::substrait::Expression_MultiOrList_Record* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MultiOrList_Record>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MultiOrList_Record>* _internal_mutable_options();
  public:
  const ::substrait::Expression_MultiOrList_Record& options(int index) const;
  ::substrait::Expression_MultiOrList_Record* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MultiOrList_Record >&
      options() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MultiOrList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > value_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MultiOrList_Record > options_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_EmbeddedFunction_PythonPickleFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.EmbeddedFunction.PythonPickleFunction) */ {
 public:
  inline Expression_EmbeddedFunction_PythonPickleFunction() : Expression_EmbeddedFunction_PythonPickleFunction(nullptr) {}
  ~Expression_EmbeddedFunction_PythonPickleFunction() override;
  explicit PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_EmbeddedFunction_PythonPickleFunction(const Expression_EmbeddedFunction_PythonPickleFunction& from);
  Expression_EmbeddedFunction_PythonPickleFunction(Expression_EmbeddedFunction_PythonPickleFunction&& from) noexcept
    : Expression_EmbeddedFunction_PythonPickleFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction_PythonPickleFunction& operator=(const Expression_EmbeddedFunction_PythonPickleFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction_PythonPickleFunction& operator=(Expression_EmbeddedFunction_PythonPickleFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_EmbeddedFunction_PythonPickleFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_EmbeddedFunction_PythonPickleFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction_PythonPickleFunction*>(
               &_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(Expression_EmbeddedFunction_PythonPickleFunction& a, Expression_EmbeddedFunction_PythonPickleFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction_PythonPickleFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_EmbeddedFunction_PythonPickleFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_PythonPickleFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_EmbeddedFunction_PythonPickleFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_EmbeddedFunction_PythonPickleFunction& from) {
    Expression_EmbeddedFunction_PythonPickleFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction_PythonPickleFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.EmbeddedFunction.PythonPickleFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction_PythonPickleFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrerequisiteFieldNumber = 2,
    kFunctionFieldNumber = 1,
  };
  // repeated string prerequisite = 2 [json_name = "prerequisite"];
  int prerequisite_size() const;
  private:
  int _internal_prerequisite_size() const;

  public:
  void clear_prerequisite() ;
  const std::string& prerequisite(int index) const;
  std::string* mutable_prerequisite(int index);
  void set_prerequisite(int index, const std::string& value);
  void set_prerequisite(int index, std::string&& value);
  void set_prerequisite(int index, const char* value);
  void set_prerequisite(int index, const char* value, std::size_t size);
  void set_prerequisite(int index, absl::string_view value);
  std::string* add_prerequisite();
  void add_prerequisite(const std::string& value);
  void add_prerequisite(std::string&& value);
  void add_prerequisite(const char* value);
  void add_prerequisite(const char* value, std::size_t size);
  void add_prerequisite(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prerequisite();

  private:
  const std::string& _internal_prerequisite(int index) const;
  std::string* _internal_add_prerequisite();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_prerequisite();

  public:
  // bytes function = 1 [json_name = "function"];
  void clear_function() ;
  const std::string& function() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_function(Arg_&& arg, Args_... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* ptr);

  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(
      const std::string& value);
  std::string* _internal_mutable_function();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.EmbeddedFunction.PythonPickleFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prerequisite_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_EmbeddedFunction_WebAssemblyFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.EmbeddedFunction.WebAssemblyFunction) */ {
 public:
  inline Expression_EmbeddedFunction_WebAssemblyFunction() : Expression_EmbeddedFunction_WebAssemblyFunction(nullptr) {}
  ~Expression_EmbeddedFunction_WebAssemblyFunction() override;
  explicit PROTOBUF_CONSTEXPR Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_EmbeddedFunction_WebAssemblyFunction(const Expression_EmbeddedFunction_WebAssemblyFunction& from);
  Expression_EmbeddedFunction_WebAssemblyFunction(Expression_EmbeddedFunction_WebAssemblyFunction&& from) noexcept
    : Expression_EmbeddedFunction_WebAssemblyFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction_WebAssemblyFunction& operator=(const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction_WebAssemblyFunction& operator=(Expression_EmbeddedFunction_WebAssemblyFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_EmbeddedFunction_WebAssemblyFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_EmbeddedFunction_WebAssemblyFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction_WebAssemblyFunction*>(
               &_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(Expression_EmbeddedFunction_WebAssemblyFunction& a, Expression_EmbeddedFunction_WebAssemblyFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_EmbeddedFunction_WebAssemblyFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction_WebAssemblyFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_EmbeddedFunction_WebAssemblyFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_EmbeddedFunction_WebAssemblyFunction& from) {
    Expression_EmbeddedFunction_WebAssemblyFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction_WebAssemblyFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.EmbeddedFunction.WebAssemblyFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction_WebAssemblyFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrerequisiteFieldNumber = 2,
    kScriptFieldNumber = 1,
  };
  // repeated string prerequisite = 2 [json_name = "prerequisite"];
  int prerequisite_size() const;
  private:
  int _internal_prerequisite_size() const;

  public:
  void clear_prerequisite() ;
  const std::string& prerequisite(int index) const;
  std::string* mutable_prerequisite(int index);
  void set_prerequisite(int index, const std::string& value);
  void set_prerequisite(int index, std::string&& value);
  void set_prerequisite(int index, const char* value);
  void set_prerequisite(int index, const char* value, std::size_t size);
  void set_prerequisite(int index, absl::string_view value);
  std::string* add_prerequisite();
  void add_prerequisite(const std::string& value);
  void add_prerequisite(std::string&& value);
  void add_prerequisite(const char* value);
  void add_prerequisite(const char* value, std::size_t size);
  void add_prerequisite(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prerequisite();

  private:
  const std::string& _internal_prerequisite(int index) const;
  std::string* _internal_add_prerequisite();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_prerequisite() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_prerequisite();

  public:
  // bytes script = 1 [json_name = "script"];
  void clear_script() ;
  const std::string& script() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_script(Arg_&& arg, Args_... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* ptr);

  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(
      const std::string& value);
  std::string* _internal_mutable_script();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.EmbeddedFunction.WebAssemblyFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prerequisite_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_EmbeddedFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.EmbeddedFunction) */ {
 public:
  inline Expression_EmbeddedFunction() : Expression_EmbeddedFunction(nullptr) {}
  ~Expression_EmbeddedFunction() override;
  explicit PROTOBUF_CONSTEXPR Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_EmbeddedFunction(const Expression_EmbeddedFunction& from);
  Expression_EmbeddedFunction(Expression_EmbeddedFunction&& from) noexcept
    : Expression_EmbeddedFunction() {
    *this = ::std::move(from);
  }

  inline Expression_EmbeddedFunction& operator=(const Expression_EmbeddedFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_EmbeddedFunction& operator=(Expression_EmbeddedFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_EmbeddedFunction& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kPythonPickleFunction = 3,
    kWebAssemblyFunction = 4,
    KIND_NOT_SET = 0,
  };

  static inline const Expression_EmbeddedFunction* internal_default_instance() {
    return reinterpret_cast<const Expression_EmbeddedFunction*>(
               &_Expression_EmbeddedFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(Expression_EmbeddedFunction& a, Expression_EmbeddedFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_EmbeddedFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_EmbeddedFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_EmbeddedFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_EmbeddedFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_EmbeddedFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_EmbeddedFunction& from) {
    Expression_EmbeddedFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_EmbeddedFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.EmbeddedFunction";
  }
  protected:
  explicit Expression_EmbeddedFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_EmbeddedFunction_PythonPickleFunction PythonPickleFunction;
  typedef Expression_EmbeddedFunction_WebAssemblyFunction WebAssemblyFunction;

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 1,
    kOutputTypeFieldNumber = 2,
    kPythonPickleFunctionFieldNumber = 3,
    kWebAssemblyFunctionFieldNumber = 4,
  };
  // repeated .substrait.Expression arguments = 1 [json_name = "arguments"];
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;

  public:
  void clear_arguments() ;
  ::substrait::Expression* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_arguments();
  private:
  const ::substrait::Expression& _internal_arguments(int index) const;
  ::substrait::Expression* _internal_add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_arguments();
  public:
  const ::substrait::Expression& arguments(int index) const;
  ::substrait::Expression* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      arguments() const;
  // .substrait.Type output_type = 2 [json_name = "outputType"];
  bool has_output_type() const;
  void clear_output_type() ;
  const ::substrait::Type& output_type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_output_type();
  ::substrait::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::Type* output_type);
  private:
  const ::substrait::Type& _internal_output_type() const;
  ::substrait::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::Type* output_type);
  ::substrait::Type* unsafe_arena_release_output_type();
  // .substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3 [json_name = "pythonPickleFunction"];
  bool has_python_pickle_function() const;
  private:
  bool _internal_has_python_pickle_function() const;

  public:
  void clear_python_pickle_function() ;
  const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction& python_pickle_function() const;
  PROTOBUF_NODISCARD ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* release_python_pickle_function();
  ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* mutable_python_pickle_function();
  void set_allocated_python_pickle_function(::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function);
  private:
  const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction& _internal_python_pickle_function() const;
  ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* _internal_mutable_python_pickle_function();
  public:
  void unsafe_arena_set_allocated_python_pickle_function(
      ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function);
  ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* unsafe_arena_release_python_pickle_function();
  // .substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4 [json_name = "webAssemblyFunction"];
  bool has_web_assembly_function() const;
  private:
  bool _internal_has_web_assembly_function() const;

  public:
  void clear_web_assembly_function() ;
  const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& web_assembly_function() const;
  PROTOBUF_NODISCARD ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* release_web_assembly_function();
  ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* mutable_web_assembly_function();
  void set_allocated_web_assembly_function(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function);
  private:
  const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& _internal_web_assembly_function() const;
  ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* _internal_mutable_web_assembly_function();
  public:
  void unsafe_arena_set_allocated_web_assembly_function(
      ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function);
  ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* unsafe_arena_release_web_assembly_function();
  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.EmbeddedFunction)
 private:
  class _Internal;
  void set_has_python_pickle_function();
  void set_has_web_assembly_function();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > arguments_;
    ::substrait::Type* output_type_;
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function_;
      ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function_;
    } kind_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_ReferenceSegment_MapKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.ReferenceSegment.MapKey) */ {
 public:
  inline Expression_ReferenceSegment_MapKey() : Expression_ReferenceSegment_MapKey(nullptr) {}
  ~Expression_ReferenceSegment_MapKey() override;
  explicit PROTOBUF_CONSTEXPR Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_ReferenceSegment_MapKey(const Expression_ReferenceSegment_MapKey& from);
  Expression_ReferenceSegment_MapKey(Expression_ReferenceSegment_MapKey&& from) noexcept
    : Expression_ReferenceSegment_MapKey() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_MapKey& operator=(const Expression_ReferenceSegment_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_MapKey& operator=(Expression_ReferenceSegment_MapKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_ReferenceSegment_MapKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_ReferenceSegment_MapKey* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_MapKey*>(
               &_Expression_ReferenceSegment_MapKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(Expression_ReferenceSegment_MapKey& a, Expression_ReferenceSegment_MapKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_MapKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_MapKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_ReferenceSegment_MapKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_MapKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_ReferenceSegment_MapKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_ReferenceSegment_MapKey& from) {
    Expression_ReferenceSegment_MapKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_MapKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.ReferenceSegment.MapKey";
  }
  protected:
  explicit Expression_ReferenceSegment_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
    kChildFieldNumber = 2,
  };
  // .substrait.Expression.Literal map_key = 1 [json_name = "mapKey"];
  bool has_map_key() const;
  void clear_map_key() ;
  const ::substrait::Expression_Literal& map_key() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_map_key();
  ::substrait::Expression_Literal* mutable_map_key();
  void set_allocated_map_key(::substrait::Expression_Literal* map_key);
  private:
  const ::substrait::Expression_Literal& _internal_map_key() const;
  ::substrait::Expression_Literal* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::substrait::Expression_Literal* map_key);
  ::substrait::Expression_Literal* unsafe_arena_release_map_key();
  // .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_ReferenceSegment& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment* release_child();
  ::substrait::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::Expression_ReferenceSegment* child);
  private:
  const ::substrait::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_ReferenceSegment* child);
  ::substrait::Expression_ReferenceSegment* unsafe_arena_release_child();
  // @@protoc_insertion_point(class_scope:substrait.Expression.ReferenceSegment.MapKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_Literal* map_key_;
    ::substrait::Expression_ReferenceSegment* child_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_ReferenceSegment_StructField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.ReferenceSegment.StructField) */ {
 public:
  inline Expression_ReferenceSegment_StructField() : Expression_ReferenceSegment_StructField(nullptr) {}
  ~Expression_ReferenceSegment_StructField() override;
  explicit PROTOBUF_CONSTEXPR Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_ReferenceSegment_StructField(const Expression_ReferenceSegment_StructField& from);
  Expression_ReferenceSegment_StructField(Expression_ReferenceSegment_StructField&& from) noexcept
    : Expression_ReferenceSegment_StructField() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_StructField& operator=(const Expression_ReferenceSegment_StructField& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_StructField& operator=(Expression_ReferenceSegment_StructField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_ReferenceSegment_StructField& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_ReferenceSegment_StructField* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_StructField*>(
               &_Expression_ReferenceSegment_StructField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(Expression_ReferenceSegment_StructField& a, Expression_ReferenceSegment_StructField& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_StructField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_StructField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_ReferenceSegment_StructField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_StructField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_ReferenceSegment_StructField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_ReferenceSegment_StructField& from) {
    Expression_ReferenceSegment_StructField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_StructField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.ReferenceSegment.StructField";
  }
  protected:
  explicit Expression_ReferenceSegment_StructField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_ReferenceSegment& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment* release_child();
  ::substrait::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::Expression_ReferenceSegment* child);
  private:
  const ::substrait::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_ReferenceSegment* child);
  ::substrait::Expression_ReferenceSegment* unsafe_arena_release_child();
  // int32 field = 1 [json_name = "field"];
  void clear_field() ;
  ::int32_t field() const;
  void set_field(::int32_t value);

  private:
  ::int32_t _internal_field() const;
  void _internal_set_field(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.ReferenceSegment.StructField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_ReferenceSegment* child_;
    ::int32_t field_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_ReferenceSegment_ListElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.ReferenceSegment.ListElement) */ {
 public:
  inline Expression_ReferenceSegment_ListElement() : Expression_ReferenceSegment_ListElement(nullptr) {}
  ~Expression_ReferenceSegment_ListElement() override;
  explicit PROTOBUF_CONSTEXPR Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_ReferenceSegment_ListElement(const Expression_ReferenceSegment_ListElement& from);
  Expression_ReferenceSegment_ListElement(Expression_ReferenceSegment_ListElement&& from) noexcept
    : Expression_ReferenceSegment_ListElement() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment_ListElement& operator=(const Expression_ReferenceSegment_ListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment_ListElement& operator=(Expression_ReferenceSegment_ListElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_ReferenceSegment_ListElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_ReferenceSegment_ListElement* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment_ListElement*>(
               &_Expression_ReferenceSegment_ListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(Expression_ReferenceSegment_ListElement& a, Expression_ReferenceSegment_ListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment_ListElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment_ListElement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_ReferenceSegment_ListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment_ListElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_ReferenceSegment_ListElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_ReferenceSegment_ListElement& from) {
    Expression_ReferenceSegment_ListElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment_ListElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.ReferenceSegment.ListElement";
  }
  protected:
  explicit Expression_ReferenceSegment_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kOffsetFieldNumber = 1,
  };
  // .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_ReferenceSegment& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment* release_child();
  ::substrait::Expression_ReferenceSegment* mutable_child();
  void set_allocated_child(::substrait::Expression_ReferenceSegment* child);
  private:
  const ::substrait::Expression_ReferenceSegment& _internal_child() const;
  ::substrait::Expression_ReferenceSegment* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_ReferenceSegment* child);
  ::substrait::Expression_ReferenceSegment* unsafe_arena_release_child();
  // int32 offset = 1 [json_name = "offset"];
  void clear_offset() ;
  ::int32_t offset() const;
  void set_offset(::int32_t value);

  private:
  ::int32_t _internal_offset() const;
  void _internal_set_offset(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.ReferenceSegment.ListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_ReferenceSegment* child_;
    ::int32_t offset_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_ReferenceSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.ReferenceSegment) */ {
 public:
  inline Expression_ReferenceSegment() : Expression_ReferenceSegment(nullptr) {}
  ~Expression_ReferenceSegment() override;
  explicit PROTOBUF_CONSTEXPR Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_ReferenceSegment(const Expression_ReferenceSegment& from);
  Expression_ReferenceSegment(Expression_ReferenceSegment&& from) noexcept
    : Expression_ReferenceSegment() {
    *this = ::std::move(from);
  }

  inline Expression_ReferenceSegment& operator=(const Expression_ReferenceSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_ReferenceSegment& operator=(Expression_ReferenceSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_ReferenceSegment& default_instance() {
    return *internal_default_instance();
  }
  enum ReferenceTypeCase {
    kMapKey = 1,
    kStructField = 2,
    kListElement = 3,
    REFERENCE_TYPE_NOT_SET = 0,
  };

  static inline const Expression_ReferenceSegment* internal_default_instance() {
    return reinterpret_cast<const Expression_ReferenceSegment*>(
               &_Expression_ReferenceSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(Expression_ReferenceSegment& a, Expression_ReferenceSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_ReferenceSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_ReferenceSegment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_ReferenceSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_ReferenceSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_ReferenceSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_ReferenceSegment& from) {
    Expression_ReferenceSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_ReferenceSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.ReferenceSegment";
  }
  protected:
  explicit Expression_ReferenceSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_ReferenceSegment_MapKey MapKey;
  typedef Expression_ReferenceSegment_StructField StructField;
  typedef Expression_ReferenceSegment_ListElement ListElement;

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
    kStructFieldFieldNumber = 2,
    kListElementFieldNumber = 3,
  };
  // .substrait.Expression.ReferenceSegment.MapKey map_key = 1 [json_name = "mapKey"];
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;

  public:
  void clear_map_key() ;
  const ::substrait::Expression_ReferenceSegment_MapKey& map_key() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment_MapKey* release_map_key();
  ::substrait::Expression_ReferenceSegment_MapKey* mutable_map_key();
  void set_allocated_map_key(::substrait::Expression_ReferenceSegment_MapKey* map_key);
  private:
  const ::substrait::Expression_ReferenceSegment_MapKey& _internal_map_key() const;
  ::substrait::Expression_ReferenceSegment_MapKey* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::substrait::Expression_ReferenceSegment_MapKey* map_key);
  ::substrait::Expression_ReferenceSegment_MapKey* unsafe_arena_release_map_key();
  // .substrait.Expression.ReferenceSegment.StructField struct_field = 2 [json_name = "structField"];
  bool has_struct_field() const;
  private:
  bool _internal_has_struct_field() const;

  public:
  void clear_struct_field() ;
  const ::substrait::Expression_ReferenceSegment_StructField& struct_field() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment_StructField* release_struct_field();
  ::substrait::Expression_ReferenceSegment_StructField* mutable_struct_field();
  void set_allocated_struct_field(::substrait::Expression_ReferenceSegment_StructField* struct_field);
  private:
  const ::substrait::Expression_ReferenceSegment_StructField& _internal_struct_field() const;
  ::substrait::Expression_ReferenceSegment_StructField* _internal_mutable_struct_field();
  public:
  void unsafe_arena_set_allocated_struct_field(
      ::substrait::Expression_ReferenceSegment_StructField* struct_field);
  ::substrait::Expression_ReferenceSegment_StructField* unsafe_arena_release_struct_field();
  // .substrait.Expression.ReferenceSegment.ListElement list_element = 3 [json_name = "listElement"];
  bool has_list_element() const;
  private:
  bool _internal_has_list_element() const;

  public:
  void clear_list_element() ;
  const ::substrait::Expression_ReferenceSegment_ListElement& list_element() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment_ListElement* release_list_element();
  ::substrait::Expression_ReferenceSegment_ListElement* mutable_list_element();
  void set_allocated_list_element(::substrait::Expression_ReferenceSegment_ListElement* list_element);
  private:
  const ::substrait::Expression_ReferenceSegment_ListElement& _internal_list_element() const;
  ::substrait::Expression_ReferenceSegment_ListElement* _internal_mutable_list_element();
  public:
  void unsafe_arena_set_allocated_list_element(
      ::substrait::Expression_ReferenceSegment_ListElement* list_element);
  ::substrait::Expression_ReferenceSegment_ListElement* unsafe_arena_release_list_element();
  void clear_reference_type();
  ReferenceTypeCase reference_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.ReferenceSegment)
 private:
  class _Internal;
  void set_has_map_key();
  void set_has_struct_field();
  void set_has_list_element();

  inline bool has_reference_type() const;
  inline void clear_has_reference_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ReferenceTypeUnion {
      constexpr ReferenceTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_ReferenceSegment_MapKey* map_key_;
      ::substrait::Expression_ReferenceSegment_StructField* struct_field_;
      ::substrait::Expression_ReferenceSegment_ListElement* list_element_;
    } reference_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_Select final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.Select) */ {
 public:
  inline Expression_MaskExpression_Select() : Expression_MaskExpression_Select(nullptr) {}
  ~Expression_MaskExpression_Select() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_Select(const Expression_MaskExpression_Select& from);
  Expression_MaskExpression_Select(Expression_MaskExpression_Select&& from) noexcept
    : Expression_MaskExpression_Select() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_Select& operator=(const Expression_MaskExpression_Select& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_Select& operator=(Expression_MaskExpression_Select&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_Select& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kStruct = 1,
    kList = 2,
    kMap = 3,
    TYPE_NOT_SET = 0,
  };

  static inline const Expression_MaskExpression_Select* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_Select*>(
               &_Expression_MaskExpression_Select_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(Expression_MaskExpression_Select& a, Expression_MaskExpression_Select& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_Select* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_Select* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_Select* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_Select>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_Select& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_Select& from) {
    Expression_MaskExpression_Select::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_Select* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.Select";
  }
  protected:
  explicit Expression_MaskExpression_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructFieldNumber = 1,
    kListFieldNumber = 2,
    kMapFieldNumber = 3,
  };
  // .substrait.Expression.MaskExpression.StructSelect struct = 1 [json_name = "struct"];
  bool has_struct_() const;
  private:
  bool _internal_has_struct_() const;

  public:
  void clear_struct_() ;
  const ::substrait::Expression_MaskExpression_StructSelect& struct_() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_StructSelect* release_struct_();
  ::substrait::Expression_MaskExpression_StructSelect* mutable_struct_();
  void set_allocated_struct_(::substrait::Expression_MaskExpression_StructSelect* struct_);
  private:
  const ::substrait::Expression_MaskExpression_StructSelect& _internal_struct_() const;
  ::substrait::Expression_MaskExpression_StructSelect* _internal_mutable_struct_();
  public:
  void unsafe_arena_set_allocated_struct_(
      ::substrait::Expression_MaskExpression_StructSelect* struct_);
  ::substrait::Expression_MaskExpression_StructSelect* unsafe_arena_release_struct_();
  // .substrait.Expression.MaskExpression.ListSelect list = 2 [json_name = "list"];
  bool has_list() const;
  private:
  bool _internal_has_list() const;

  public:
  void clear_list() ;
  const ::substrait::Expression_MaskExpression_ListSelect& list() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_ListSelect* release_list();
  ::substrait::Expression_MaskExpression_ListSelect* mutable_list();
  void set_allocated_list(::substrait::Expression_MaskExpression_ListSelect* list);
  private:
  const ::substrait::Expression_MaskExpression_ListSelect& _internal_list() const;
  ::substrait::Expression_MaskExpression_ListSelect* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::substrait::Expression_MaskExpression_ListSelect* list);
  ::substrait::Expression_MaskExpression_ListSelect* unsafe_arena_release_list();
  // .substrait.Expression.MaskExpression.MapSelect map = 3 [json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;

  public:
  void clear_map() ;
  const ::substrait::Expression_MaskExpression_MapSelect& map() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_MapSelect* release_map();
  ::substrait::Expression_MaskExpression_MapSelect* mutable_map();
  void set_allocated_map(::substrait::Expression_MaskExpression_MapSelect* map);
  private:
  const ::substrait::Expression_MaskExpression_MapSelect& _internal_map() const;
  ::substrait::Expression_MaskExpression_MapSelect* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::substrait::Expression_MaskExpression_MapSelect* map);
  ::substrait::Expression_MaskExpression_MapSelect* unsafe_arena_release_map();
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.Select)
 private:
  class _Internal;
  void set_has_struct_();
  void set_has_list();
  void set_has_map();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_MaskExpression_StructSelect* struct__;
      ::substrait::Expression_MaskExpression_ListSelect* list_;
      ::substrait::Expression_MaskExpression_MapSelect* map_;
    } type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_StructSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.StructSelect) */ {
 public:
  inline Expression_MaskExpression_StructSelect() : Expression_MaskExpression_StructSelect(nullptr) {}
  ~Expression_MaskExpression_StructSelect() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_StructSelect(const Expression_MaskExpression_StructSelect& from);
  Expression_MaskExpression_StructSelect(Expression_MaskExpression_StructSelect&& from) noexcept
    : Expression_MaskExpression_StructSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_StructSelect& operator=(const Expression_MaskExpression_StructSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_StructSelect& operator=(Expression_MaskExpression_StructSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_StructSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_StructSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_StructSelect*>(
               &_Expression_MaskExpression_StructSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(Expression_MaskExpression_StructSelect& a, Expression_MaskExpression_StructSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_StructSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_StructSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_StructSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_StructSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_StructSelect& from) {
    Expression_MaskExpression_StructSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_StructSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.StructSelect";
  }
  protected:
  explicit Expression_MaskExpression_StructSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStructItemsFieldNumber = 1,
  };
  // repeated .substrait.Expression.MaskExpression.StructItem struct_items = 1 [json_name = "structItems"];
  int struct_items_size() const;
  private:
  int _internal_struct_items_size() const;

  public:
  void clear_struct_items() ;
  ::substrait::Expression_MaskExpression_StructItem* mutable_struct_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_StructItem >*
      mutable_struct_items();
  private:
  const ::substrait::Expression_MaskExpression_StructItem& _internal_struct_items(int index) const;
  ::substrait::Expression_MaskExpression_StructItem* _internal_add_struct_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_StructItem>& _internal_struct_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_StructItem>* _internal_mutable_struct_items();
  public:
  const ::substrait::Expression_MaskExpression_StructItem& struct_items(int index) const;
  ::substrait::Expression_MaskExpression_StructItem* add_struct_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_StructItem >&
      struct_items() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.StructSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_StructItem > struct_items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_StructItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.StructItem) */ {
 public:
  inline Expression_MaskExpression_StructItem() : Expression_MaskExpression_StructItem(nullptr) {}
  ~Expression_MaskExpression_StructItem() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_StructItem(const Expression_MaskExpression_StructItem& from);
  Expression_MaskExpression_StructItem(Expression_MaskExpression_StructItem&& from) noexcept
    : Expression_MaskExpression_StructItem() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_StructItem& operator=(const Expression_MaskExpression_StructItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_StructItem& operator=(Expression_MaskExpression_StructItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_StructItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_StructItem* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_StructItem*>(
               &_Expression_MaskExpression_StructItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(Expression_MaskExpression_StructItem& a, Expression_MaskExpression_StructItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_StructItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_StructItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_StructItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_StructItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_StructItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_StructItem& from) {
    Expression_MaskExpression_StructItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_StructItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.StructItem";
  }
  protected:
  explicit Expression_MaskExpression_StructItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 2,
    kFieldFieldNumber = 1,
  };
  // .substrait.Expression.MaskExpression.Select child = 2 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_MaskExpression_Select& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_Select* release_child();
  ::substrait::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_MaskExpression_Select* child);
  ::substrait::Expression_MaskExpression_Select* unsafe_arena_release_child();
  // int32 field = 1 [json_name = "field"];
  void clear_field() ;
  ::int32_t field() const;
  void set_field(::int32_t value);

  private:
  ::int32_t _internal_field() const;
  void _internal_set_field(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.StructItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_MaskExpression_Select* child_;
    ::int32_t field_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem_ListElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() : Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(nullptr) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from);
  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem_ListElement() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& operator=(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& a, Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& from) {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem_ListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // int32 field = 1 [json_name = "field"];
  void clear_field() ;
  ::int32_t field() const;
  void set_field(::int32_t value);

  private:
  ::int32_t _internal_field() const;
  void _internal_set_field(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() : Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(nullptr) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from);
  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& operator=(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& a, Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& from) {
    Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // int32 start = 1 [json_name = "start"];
  void clear_start() ;
  ::int32_t start() const;
  void set_start(::int32_t value);

  private:
  ::int32_t _internal_start() const;
  void _internal_set_start(::int32_t value);

  public:
  // int32 end = 2 [json_name = "end"];
  void clear_end() ;
  ::int32_t end() const;
  void set_end(::int32_t value);

  private:
  ::int32_t _internal_end() const;
  void _internal_set_end(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t start_;
    ::int32_t end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect_ListSelectItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.ListSelect.ListSelectItem) */ {
 public:
  inline Expression_MaskExpression_ListSelect_ListSelectItem() : Expression_MaskExpression_ListSelect_ListSelectItem(nullptr) {}
  ~Expression_MaskExpression_ListSelect_ListSelectItem() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_ListSelect_ListSelectItem(const Expression_MaskExpression_ListSelect_ListSelectItem& from);
  Expression_MaskExpression_ListSelect_ListSelectItem(Expression_MaskExpression_ListSelect_ListSelectItem&& from) noexcept
    : Expression_MaskExpression_ListSelect_ListSelectItem() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect_ListSelectItem& operator=(const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect_ListSelectItem& operator=(Expression_MaskExpression_ListSelect_ListSelectItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_ListSelect_ListSelectItem& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kItem = 1,
    kSlice = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const Expression_MaskExpression_ListSelect_ListSelectItem* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect_ListSelectItem*>(
               &_Expression_MaskExpression_ListSelect_ListSelectItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Expression_MaskExpression_ListSelect_ListSelectItem& a, Expression_MaskExpression_ListSelect_ListSelectItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_ListSelect_ListSelectItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect_ListSelectItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_ListSelect_ListSelectItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_ListSelect_ListSelectItem& from) {
    Expression_MaskExpression_ListSelect_ListSelectItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect_ListSelectItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.ListSelect.ListSelectItem";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect_ListSelectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_ListSelect_ListSelectItem_ListElement ListElement;
  typedef Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice ListSlice;

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kSliceFieldNumber = 2,
  };
  // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1 [json_name = "item"];
  bool has_item() const;
  private:
  bool _internal_has_item() const;

  public:
  void clear_item() ;
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& item() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* release_item();
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* mutable_item();
  void set_allocated_item(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item);
  private:
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& _internal_item() const;
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item);
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* unsafe_arena_release_item();
  // .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2 [json_name = "slice"];
  bool has_slice() const;
  private:
  bool _internal_has_slice() const;

  public:
  void clear_slice() ;
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& slice() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* release_slice();
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* mutable_slice();
  void set_allocated_slice(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice);
  private:
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& _internal_slice() const;
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* _internal_mutable_slice();
  public:
  void unsafe_arena_set_allocated_slice(
      ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice);
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* unsafe_arena_release_slice();
  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.ListSelect.ListSelectItem)
 private:
  class _Internal;
  void set_has_item();
  void set_has_slice();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item_;
      ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice_;
    } type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_ListSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.ListSelect) */ {
 public:
  inline Expression_MaskExpression_ListSelect() : Expression_MaskExpression_ListSelect(nullptr) {}
  ~Expression_MaskExpression_ListSelect() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_ListSelect(const Expression_MaskExpression_ListSelect& from);
  Expression_MaskExpression_ListSelect(Expression_MaskExpression_ListSelect&& from) noexcept
    : Expression_MaskExpression_ListSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_ListSelect& operator=(const Expression_MaskExpression_ListSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_ListSelect& operator=(Expression_MaskExpression_ListSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_ListSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_ListSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_ListSelect*>(
               &_Expression_MaskExpression_ListSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(Expression_MaskExpression_ListSelect& a, Expression_MaskExpression_ListSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_ListSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_ListSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_ListSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_ListSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_ListSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_ListSelect& from) {
    Expression_MaskExpression_ListSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_ListSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.ListSelect";
  }
  protected:
  explicit Expression_MaskExpression_ListSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_ListSelect_ListSelectItem ListSelectItem;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionFieldNumber = 1,
    kChildFieldNumber = 2,
  };
  // repeated .substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1 [json_name = "selection"];
  int selection_size() const;
  private:
  int _internal_selection_size() const;

  public:
  void clear_selection() ;
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* mutable_selection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >*
      mutable_selection();
  private:
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem& _internal_selection(int index) const;
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* _internal_add_selection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem>& _internal_selection() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem>* _internal_mutable_selection();
  public:
  const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem& selection(int index) const;
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* add_selection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >&
      selection() const;
  // .substrait.Expression.MaskExpression.Select child = 2 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_MaskExpression_Select& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_Select* release_child();
  ::substrait::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_MaskExpression_Select* child);
  ::substrait::Expression_MaskExpression_Select* unsafe_arena_release_child();
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.ListSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem > selection_;
    ::substrait::Expression_MaskExpression_Select* child_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect_MapKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.MapSelect.MapKey) */ {
 public:
  inline Expression_MaskExpression_MapSelect_MapKey() : Expression_MaskExpression_MapSelect_MapKey(nullptr) {}
  ~Expression_MaskExpression_MapSelect_MapKey() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_MapSelect_MapKey(const Expression_MaskExpression_MapSelect_MapKey& from);
  Expression_MaskExpression_MapSelect_MapKey(Expression_MaskExpression_MapSelect_MapKey&& from) noexcept
    : Expression_MaskExpression_MapSelect_MapKey() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect_MapKey& operator=(const Expression_MaskExpression_MapSelect_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect_MapKey& operator=(Expression_MaskExpression_MapSelect_MapKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_MapSelect_MapKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_MapSelect_MapKey* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect_MapKey*>(
               &_Expression_MaskExpression_MapSelect_MapKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(Expression_MaskExpression_MapSelect_MapKey& a, Expression_MaskExpression_MapSelect_MapKey& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect_MapKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect_MapKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_MapSelect_MapKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_MapSelect_MapKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_MapSelect_MapKey& from) {
    Expression_MaskExpression_MapSelect_MapKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect_MapKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.MapSelect.MapKey";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyFieldNumber = 1,
  };
  // string map_key = 1 [json_name = "mapKey"];
  void clear_map_key() ;
  const std::string& map_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map_key(Arg_&& arg, Args_... args);
  std::string* mutable_map_key();
  PROTOBUF_NODISCARD std::string* release_map_key();
  void set_allocated_map_key(std::string* ptr);

  private:
  const std::string& _internal_map_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_key(
      const std::string& value);
  std::string* _internal_mutable_map_key();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.MapSelect.MapKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect_MapKeyExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression) */ {
 public:
  inline Expression_MaskExpression_MapSelect_MapKeyExpression() : Expression_MaskExpression_MapSelect_MapKeyExpression(nullptr) {}
  ~Expression_MaskExpression_MapSelect_MapKeyExpression() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_MapSelect_MapKeyExpression(const Expression_MaskExpression_MapSelect_MapKeyExpression& from);
  Expression_MaskExpression_MapSelect_MapKeyExpression(Expression_MaskExpression_MapSelect_MapKeyExpression&& from) noexcept
    : Expression_MaskExpression_MapSelect_MapKeyExpression() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect_MapKeyExpression& operator=(const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect_MapKeyExpression& operator=(Expression_MaskExpression_MapSelect_MapKeyExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_MapSelect_MapKeyExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression_MapSelect_MapKeyExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect_MapKeyExpression*>(
               &_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(Expression_MaskExpression_MapSelect_MapKeyExpression& a, Expression_MaskExpression_MapSelect_MapKeyExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_MapSelect_MapKeyExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect_MapKeyExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_MapSelect_MapKeyExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_MapSelect_MapKeyExpression& from) {
    Expression_MaskExpression_MapSelect_MapKeyExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect_MapKeyExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.MapSelect.MapKeyExpression";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect_MapKeyExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapKeyExpressionFieldNumber = 1,
  };
  // string map_key_expression = 1 [json_name = "mapKeyExpression"];
  void clear_map_key_expression() ;
  const std::string& map_key_expression() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_map_key_expression(Arg_&& arg, Args_... args);
  std::string* mutable_map_key_expression();
  PROTOBUF_NODISCARD std::string* release_map_key_expression();
  void set_allocated_map_key_expression(std::string* ptr);

  private:
  const std::string& _internal_map_key_expression() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_key_expression(
      const std::string& value);
  std::string* _internal_mutable_map_key_expression();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_key_expression_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression_MapSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression.MapSelect) */ {
 public:
  inline Expression_MaskExpression_MapSelect() : Expression_MaskExpression_MapSelect(nullptr) {}
  ~Expression_MaskExpression_MapSelect() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression_MapSelect(const Expression_MaskExpression_MapSelect& from);
  Expression_MaskExpression_MapSelect(Expression_MaskExpression_MapSelect&& from) noexcept
    : Expression_MaskExpression_MapSelect() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression_MapSelect& operator=(const Expression_MaskExpression_MapSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression_MapSelect& operator=(Expression_MaskExpression_MapSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression_MapSelect& default_instance() {
    return *internal_default_instance();
  }
  enum SelectCase {
    kKey = 1,
    kExpression = 2,
    SELECT_NOT_SET = 0,
  };

  static inline const Expression_MaskExpression_MapSelect* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression_MapSelect*>(
               &_Expression_MaskExpression_MapSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(Expression_MaskExpression_MapSelect& a, Expression_MaskExpression_MapSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression_MapSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression_MapSelect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression_MapSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression_MapSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression_MapSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression_MapSelect& from) {
    Expression_MaskExpression_MapSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression_MapSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression.MapSelect";
  }
  protected:
  explicit Expression_MaskExpression_MapSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_MapSelect_MapKey MapKey;
  typedef Expression_MaskExpression_MapSelect_MapKeyExpression MapKeyExpression;

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kKeyFieldNumber = 1,
    kExpressionFieldNumber = 2,
  };
  // .substrait.Expression.MaskExpression.Select child = 3 [json_name = "child"];
  bool has_child() const;
  void clear_child() ;
  const ::substrait::Expression_MaskExpression_Select& child() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_Select* release_child();
  ::substrait::Expression_MaskExpression_Select* mutable_child();
  void set_allocated_child(::substrait::Expression_MaskExpression_Select* child);
  private:
  const ::substrait::Expression_MaskExpression_Select& _internal_child() const;
  ::substrait::Expression_MaskExpression_Select* _internal_mutable_child();
  public:
  void unsafe_arena_set_allocated_child(
      ::substrait::Expression_MaskExpression_Select* child);
  ::substrait::Expression_MaskExpression_Select* unsafe_arena_release_child();
  // .substrait.Expression.MaskExpression.MapSelect.MapKey key = 1 [json_name = "key"];
  bool has_key() const;
  private:
  bool _internal_has_key() const;

  public:
  void clear_key() ;
  const ::substrait::Expression_MaskExpression_MapSelect_MapKey& key() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_MapSelect_MapKey* release_key();
  ::substrait::Expression_MaskExpression_MapSelect_MapKey* mutable_key();
  void set_allocated_key(::substrait::Expression_MaskExpression_MapSelect_MapKey* key);
  private:
  const ::substrait::Expression_MaskExpression_MapSelect_MapKey& _internal_key() const;
  ::substrait::Expression_MaskExpression_MapSelect_MapKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::substrait::Expression_MaskExpression_MapSelect_MapKey* key);
  ::substrait::Expression_MaskExpression_MapSelect_MapKey* unsafe_arena_release_key();
  // .substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2 [json_name = "expression"];
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;

  public:
  void clear_expression() ;
  const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* release_expression();
  ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* mutable_expression();
  void set_allocated_expression(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression);
  private:
  const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& _internal_expression() const;
  ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression);
  ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* unsafe_arena_release_expression();
  void clear_select();
  SelectCase select_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression.MapSelect)
 private:
  class _Internal;
  void set_has_key();
  void set_has_expression();

  inline bool has_select() const;
  inline void clear_has_select();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_MaskExpression_Select* child_;
    union SelectUnion {
      constexpr SelectUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_MaskExpression_MapSelect_MapKey* key_;
      ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression_;
    } select_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_MaskExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.MaskExpression) */ {
 public:
  inline Expression_MaskExpression() : Expression_MaskExpression(nullptr) {}
  ~Expression_MaskExpression() override;
  explicit PROTOBUF_CONSTEXPR Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_MaskExpression(const Expression_MaskExpression& from);
  Expression_MaskExpression(Expression_MaskExpression&& from) noexcept
    : Expression_MaskExpression() {
    *this = ::std::move(from);
  }

  inline Expression_MaskExpression& operator=(const Expression_MaskExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_MaskExpression& operator=(Expression_MaskExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_MaskExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_MaskExpression* internal_default_instance() {
    return reinterpret_cast<const Expression_MaskExpression*>(
               &_Expression_MaskExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(Expression_MaskExpression& a, Expression_MaskExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_MaskExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_MaskExpression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_MaskExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_MaskExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_MaskExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_MaskExpression& from) {
    Expression_MaskExpression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_MaskExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.MaskExpression";
  }
  protected:
  explicit Expression_MaskExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_MaskExpression_Select Select;
  typedef Expression_MaskExpression_StructSelect StructSelect;
  typedef Expression_MaskExpression_StructItem StructItem;
  typedef Expression_MaskExpression_ListSelect ListSelect;
  typedef Expression_MaskExpression_MapSelect MapSelect;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectFieldNumber = 1,
    kMaintainSingularStructFieldNumber = 2,
  };
  // .substrait.Expression.MaskExpression.StructSelect select = 1 [json_name = "select"];
  bool has_select() const;
  void clear_select() ;
  const ::substrait::Expression_MaskExpression_StructSelect& select() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression_StructSelect* release_select();
  ::substrait::Expression_MaskExpression_StructSelect* mutable_select();
  void set_allocated_select(::substrait::Expression_MaskExpression_StructSelect* select);
  private:
  const ::substrait::Expression_MaskExpression_StructSelect& _internal_select() const;
  ::substrait::Expression_MaskExpression_StructSelect* _internal_mutable_select();
  public:
  void unsafe_arena_set_allocated_select(
      ::substrait::Expression_MaskExpression_StructSelect* select);
  ::substrait::Expression_MaskExpression_StructSelect* unsafe_arena_release_select();
  // bool maintain_singular_struct = 2 [json_name = "maintainSingularStruct"];
  void clear_maintain_singular_struct() ;
  bool maintain_singular_struct() const;
  void set_maintain_singular_struct(bool value);

  private:
  bool _internal_maintain_singular_struct() const;
  void _internal_set_maintain_singular_struct(bool value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.MaskExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression_MaskExpression_StructSelect* select_;
    bool maintain_singular_struct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_FieldReference_RootReference final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:substrait.Expression.FieldReference.RootReference) */ {
 public:
  inline Expression_FieldReference_RootReference() : Expression_FieldReference_RootReference(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_FieldReference_RootReference(const Expression_FieldReference_RootReference& from);
  Expression_FieldReference_RootReference(Expression_FieldReference_RootReference&& from) noexcept
    : Expression_FieldReference_RootReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference_RootReference& operator=(const Expression_FieldReference_RootReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference_RootReference& operator=(Expression_FieldReference_RootReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_FieldReference_RootReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_FieldReference_RootReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference_RootReference*>(
               &_Expression_FieldReference_RootReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(Expression_FieldReference_RootReference& a, Expression_FieldReference_RootReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference_RootReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference_RootReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_FieldReference_RootReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_FieldReference_RootReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Expression_FieldReference_RootReference& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Expression_FieldReference_RootReference& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.FieldReference.RootReference";
  }
  protected:
  explicit Expression_FieldReference_RootReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:substrait.Expression.FieldReference.RootReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_FieldReference_OuterReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.FieldReference.OuterReference) */ {
 public:
  inline Expression_FieldReference_OuterReference() : Expression_FieldReference_OuterReference(nullptr) {}
  ~Expression_FieldReference_OuterReference() override;
  explicit PROTOBUF_CONSTEXPR Expression_FieldReference_OuterReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_FieldReference_OuterReference(const Expression_FieldReference_OuterReference& from);
  Expression_FieldReference_OuterReference(Expression_FieldReference_OuterReference&& from) noexcept
    : Expression_FieldReference_OuterReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference_OuterReference& operator=(const Expression_FieldReference_OuterReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference_OuterReference& operator=(Expression_FieldReference_OuterReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_FieldReference_OuterReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_FieldReference_OuterReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference_OuterReference*>(
               &_Expression_FieldReference_OuterReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(Expression_FieldReference_OuterReference& a, Expression_FieldReference_OuterReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference_OuterReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference_OuterReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_FieldReference_OuterReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_FieldReference_OuterReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_FieldReference_OuterReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_FieldReference_OuterReference& from) {
    Expression_FieldReference_OuterReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_FieldReference_OuterReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.FieldReference.OuterReference";
  }
  protected:
  explicit Expression_FieldReference_OuterReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStepsOutFieldNumber = 1,
  };
  // uint32 steps_out = 1 [json_name = "stepsOut"];
  void clear_steps_out() ;
  ::uint32_t steps_out() const;
  void set_steps_out(::uint32_t value);

  private:
  ::uint32_t _internal_steps_out() const;
  void _internal_set_steps_out(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.FieldReference.OuterReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint32_t steps_out_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_FieldReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.FieldReference) */ {
 public:
  inline Expression_FieldReference() : Expression_FieldReference(nullptr) {}
  ~Expression_FieldReference() override;
  explicit PROTOBUF_CONSTEXPR Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_FieldReference(const Expression_FieldReference& from);
  Expression_FieldReference(Expression_FieldReference&& from) noexcept
    : Expression_FieldReference() {
    *this = ::std::move(from);
  }

  inline Expression_FieldReference& operator=(const Expression_FieldReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_FieldReference& operator=(Expression_FieldReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_FieldReference& default_instance() {
    return *internal_default_instance();
  }
  enum ReferenceTypeCase {
    kDirectReference = 1,
    kMaskedReference = 2,
    REFERENCE_TYPE_NOT_SET = 0,
  };

  enum RootTypeCase {
    kExpression = 3,
    kRootReference = 4,
    kOuterReference = 5,
    ROOT_TYPE_NOT_SET = 0,
  };

  static inline const Expression_FieldReference* internal_default_instance() {
    return reinterpret_cast<const Expression_FieldReference*>(
               &_Expression_FieldReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(Expression_FieldReference& a, Expression_FieldReference& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_FieldReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_FieldReference* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_FieldReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_FieldReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_FieldReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_FieldReference& from) {
    Expression_FieldReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_FieldReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.FieldReference";
  }
  protected:
  explicit Expression_FieldReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_FieldReference_RootReference RootReference;
  typedef Expression_FieldReference_OuterReference OuterReference;

  // accessors -------------------------------------------------------

  enum : int {
    kDirectReferenceFieldNumber = 1,
    kMaskedReferenceFieldNumber = 2,
    kExpressionFieldNumber = 3,
    kRootReferenceFieldNumber = 4,
    kOuterReferenceFieldNumber = 5,
  };
  // .substrait.Expression.ReferenceSegment direct_reference = 1 [json_name = "directReference"];
  bool has_direct_reference() const;
  private:
  bool _internal_has_direct_reference() const;

  public:
  void clear_direct_reference() ;
  const ::substrait::Expression_ReferenceSegment& direct_reference() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ReferenceSegment* release_direct_reference();
  ::substrait::Expression_ReferenceSegment* mutable_direct_reference();
  void set_allocated_direct_reference(::substrait::Expression_ReferenceSegment* direct_reference);
  private:
  const ::substrait::Expression_ReferenceSegment& _internal_direct_reference() const;
  ::substrait::Expression_ReferenceSegment* _internal_mutable_direct_reference();
  public:
  void unsafe_arena_set_allocated_direct_reference(
      ::substrait::Expression_ReferenceSegment* direct_reference);
  ::substrait::Expression_ReferenceSegment* unsafe_arena_release_direct_reference();
  // .substrait.Expression.MaskExpression masked_reference = 2 [json_name = "maskedReference"];
  bool has_masked_reference() const;
  private:
  bool _internal_has_masked_reference() const;

  public:
  void clear_masked_reference() ;
  const ::substrait::Expression_MaskExpression& masked_reference() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MaskExpression* release_masked_reference();
  ::substrait::Expression_MaskExpression* mutable_masked_reference();
  void set_allocated_masked_reference(::substrait::Expression_MaskExpression* masked_reference);
  private:
  const ::substrait::Expression_MaskExpression& _internal_masked_reference() const;
  ::substrait::Expression_MaskExpression* _internal_mutable_masked_reference();
  public:
  void unsafe_arena_set_allocated_masked_reference(
      ::substrait::Expression_MaskExpression* masked_reference);
  ::substrait::Expression_MaskExpression* unsafe_arena_release_masked_reference();
  // .substrait.Expression expression = 3 [json_name = "expression"];
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;

  public:
  void clear_expression() ;
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();
  // .substrait.Expression.FieldReference.RootReference root_reference = 4 [json_name = "rootReference"];
  bool has_root_reference() const;
  private:
  bool _internal_has_root_reference() const;

  public:
  void clear_root_reference() ;
  const ::substrait::Expression_FieldReference_RootReference& root_reference() const;
  PROTOBUF_NODISCARD ::substrait::Expression_FieldReference_RootReference* release_root_reference();
  ::substrait::Expression_FieldReference_RootReference* mutable_root_reference();
  void set_allocated_root_reference(::substrait::Expression_FieldReference_RootReference* root_reference);
  private:
  const ::substrait::Expression_FieldReference_RootReference& _internal_root_reference() const;
  ::substrait::Expression_FieldReference_RootReference* _internal_mutable_root_reference();
  public:
  void unsafe_arena_set_allocated_root_reference(
      ::substrait::Expression_FieldReference_RootReference* root_reference);
  ::substrait::Expression_FieldReference_RootReference* unsafe_arena_release_root_reference();
  // .substrait.Expression.FieldReference.OuterReference outer_reference = 5 [json_name = "outerReference"];
  bool has_outer_reference() const;
  private:
  bool _internal_has_outer_reference() const;

  public:
  void clear_outer_reference() ;
  const ::substrait::Expression_FieldReference_OuterReference& outer_reference() const;
  PROTOBUF_NODISCARD ::substrait::Expression_FieldReference_OuterReference* release_outer_reference();
  ::substrait::Expression_FieldReference_OuterReference* mutable_outer_reference();
  void set_allocated_outer_reference(::substrait::Expression_FieldReference_OuterReference* outer_reference);
  private:
  const ::substrait::Expression_FieldReference_OuterReference& _internal_outer_reference() const;
  ::substrait::Expression_FieldReference_OuterReference* _internal_mutable_outer_reference();
  public:
  void unsafe_arena_set_allocated_outer_reference(
      ::substrait::Expression_FieldReference_OuterReference* outer_reference);
  ::substrait::Expression_FieldReference_OuterReference* unsafe_arena_release_outer_reference();
  void clear_reference_type();
  ReferenceTypeCase reference_type_case() const;
  void clear_root_type();
  RootTypeCase root_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.FieldReference)
 private:
  class _Internal;
  void set_has_direct_reference();
  void set_has_masked_reference();
  void set_has_expression();
  void set_has_root_reference();
  void set_has_outer_reference();

  inline bool has_reference_type() const;
  inline void clear_has_reference_type();

  inline bool has_root_type() const;
  inline void clear_has_root_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ReferenceTypeUnion {
      constexpr ReferenceTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_ReferenceSegment* direct_reference_;
      ::substrait::Expression_MaskExpression* masked_reference_;
    } reference_type_;
    union RootTypeUnion {
      constexpr RootTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression* expression_;
      ::substrait::Expression_FieldReference_RootReference* root_reference_;
      ::substrait::Expression_FieldReference_OuterReference* outer_reference_;
    } root_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[2];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Subquery_Scalar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Subquery.Scalar) */ {
 public:
  inline Expression_Subquery_Scalar() : Expression_Subquery_Scalar(nullptr) {}
  ~Expression_Subquery_Scalar() override;
  explicit PROTOBUF_CONSTEXPR Expression_Subquery_Scalar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Subquery_Scalar(const Expression_Subquery_Scalar& from);
  Expression_Subquery_Scalar(Expression_Subquery_Scalar&& from) noexcept
    : Expression_Subquery_Scalar() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_Scalar& operator=(const Expression_Subquery_Scalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_Scalar& operator=(Expression_Subquery_Scalar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Subquery_Scalar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Subquery_Scalar* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_Scalar*>(
               &_Expression_Subquery_Scalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Expression_Subquery_Scalar& a, Expression_Subquery_Scalar& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_Scalar* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_Scalar* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Subquery_Scalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Subquery_Scalar>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Subquery_Scalar& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Subquery_Scalar& from) {
    Expression_Subquery_Scalar::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_Scalar* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Subquery.Scalar";
  }
  protected:
  explicit Expression_Subquery_Scalar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFieldNumber = 1,
  };
  // .substrait.Rel input = 1 [json_name = "input"];
  bool has_input() const;
  void clear_input() ;
  const ::substrait::Rel& input() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_input();
  ::substrait::Rel* mutable_input();
  void set_allocated_input(::substrait::Rel* input);
  private:
  const ::substrait::Rel& _internal_input() const;
  ::substrait::Rel* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::substrait::Rel* input);
  ::substrait::Rel* unsafe_arena_release_input();
  // @@protoc_insertion_point(class_scope:substrait.Expression.Subquery.Scalar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Rel* input_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Subquery_InPredicate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Subquery.InPredicate) */ {
 public:
  inline Expression_Subquery_InPredicate() : Expression_Subquery_InPredicate(nullptr) {}
  ~Expression_Subquery_InPredicate() override;
  explicit PROTOBUF_CONSTEXPR Expression_Subquery_InPredicate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Subquery_InPredicate(const Expression_Subquery_InPredicate& from);
  Expression_Subquery_InPredicate(Expression_Subquery_InPredicate&& from) noexcept
    : Expression_Subquery_InPredicate() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_InPredicate& operator=(const Expression_Subquery_InPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_InPredicate& operator=(Expression_Subquery_InPredicate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Subquery_InPredicate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Subquery_InPredicate* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_InPredicate*>(
               &_Expression_Subquery_InPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(Expression_Subquery_InPredicate& a, Expression_Subquery_InPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_InPredicate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_InPredicate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Subquery_InPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Subquery_InPredicate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Subquery_InPredicate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Subquery_InPredicate& from) {
    Expression_Subquery_InPredicate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_InPredicate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Subquery.InPredicate";
  }
  protected:
  explicit Expression_Subquery_InPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeedlesFieldNumber = 1,
    kHaystackFieldNumber = 2,
  };
  // repeated .substrait.Expression needles = 1 [json_name = "needles"];
  int needles_size() const;
  private:
  int _internal_needles_size() const;

  public:
  void clear_needles() ;
  ::substrait::Expression* mutable_needles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_needles();
  private:
  const ::substrait::Expression& _internal_needles(int index) const;
  ::substrait::Expression* _internal_add_needles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_needles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_needles();
  public:
  const ::substrait::Expression& needles(int index) const;
  ::substrait::Expression* add_needles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      needles() const;
  // .substrait.Rel haystack = 2 [json_name = "haystack"];
  bool has_haystack() const;
  void clear_haystack() ;
  const ::substrait::Rel& haystack() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_haystack();
  ::substrait::Rel* mutable_haystack();
  void set_allocated_haystack(::substrait::Rel* haystack);
  private:
  const ::substrait::Rel& _internal_haystack() const;
  ::substrait::Rel* _internal_mutable_haystack();
  public:
  void unsafe_arena_set_allocated_haystack(
      ::substrait::Rel* haystack);
  ::substrait::Rel* unsafe_arena_release_haystack();
  // @@protoc_insertion_point(class_scope:substrait.Expression.Subquery.InPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > needles_;
    ::substrait::Rel* haystack_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Subquery_SetPredicate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Subquery.SetPredicate) */ {
 public:
  inline Expression_Subquery_SetPredicate() : Expression_Subquery_SetPredicate(nullptr) {}
  ~Expression_Subquery_SetPredicate() override;
  explicit PROTOBUF_CONSTEXPR Expression_Subquery_SetPredicate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Subquery_SetPredicate(const Expression_Subquery_SetPredicate& from);
  Expression_Subquery_SetPredicate(Expression_Subquery_SetPredicate&& from) noexcept
    : Expression_Subquery_SetPredicate() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_SetPredicate& operator=(const Expression_Subquery_SetPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_SetPredicate& operator=(Expression_Subquery_SetPredicate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Subquery_SetPredicate& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Subquery_SetPredicate* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_SetPredicate*>(
               &_Expression_Subquery_SetPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Expression_Subquery_SetPredicate& a, Expression_Subquery_SetPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_SetPredicate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_SetPredicate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Subquery_SetPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Subquery_SetPredicate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Subquery_SetPredicate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Subquery_SetPredicate& from) {
    Expression_Subquery_SetPredicate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_SetPredicate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Subquery.SetPredicate";
  }
  protected:
  explicit Expression_Subquery_SetPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using PredicateOp = Expression_Subquery_SetPredicate_PredicateOp;
  static constexpr PredicateOp PREDICATE_OP_UNSPECIFIED = Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNSPECIFIED;
  static constexpr PredicateOp PREDICATE_OP_EXISTS = Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_EXISTS;
  static constexpr PredicateOp PREDICATE_OP_UNIQUE = Expression_Subquery_SetPredicate_PredicateOp_PREDICATE_OP_UNIQUE;
  static inline bool PredicateOp_IsValid(int value) {
    return Expression_Subquery_SetPredicate_PredicateOp_IsValid(value);
  }
  static constexpr PredicateOp PredicateOp_MIN = Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MIN;
  static constexpr PredicateOp PredicateOp_MAX = Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_MAX;
  static constexpr int PredicateOp_ARRAYSIZE = Expression_Subquery_SetPredicate_PredicateOp_PredicateOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PredicateOp_descriptor() {
    return Expression_Subquery_SetPredicate_PredicateOp_descriptor();
  }
  template <typename T>
  static inline const std::string& PredicateOp_Name(T value) {
    return Expression_Subquery_SetPredicate_PredicateOp_Name(value);
  }
  static inline bool PredicateOp_Parse(absl::string_view name, PredicateOp* value) {
    return Expression_Subquery_SetPredicate_PredicateOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTuplesFieldNumber = 2,
    kPredicateOpFieldNumber = 1,
  };
  // .substrait.Rel tuples = 2 [json_name = "tuples"];
  bool has_tuples() const;
  void clear_tuples() ;
  const ::substrait::Rel& tuples() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_tuples();
  ::substrait::Rel* mutable_tuples();
  void set_allocated_tuples(::substrait::Rel* tuples);
  private:
  const ::substrait::Rel& _internal_tuples() const;
  ::substrait::Rel* _internal_mutable_tuples();
  public:
  void unsafe_arena_set_allocated_tuples(
      ::substrait::Rel* tuples);
  ::substrait::Rel* unsafe_arena_release_tuples();
  // .substrait.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1 [json_name = "predicateOp"];
  void clear_predicate_op() ;
  ::substrait::Expression_Subquery_SetPredicate_PredicateOp predicate_op() const;
  void set_predicate_op(::substrait::Expression_Subquery_SetPredicate_PredicateOp value);

  private:
  ::substrait::Expression_Subquery_SetPredicate_PredicateOp _internal_predicate_op() const;
  void _internal_set_predicate_op(::substrait::Expression_Subquery_SetPredicate_PredicateOp value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Subquery.SetPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Rel* tuples_;
    int predicate_op_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Subquery_SetComparison final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Subquery.SetComparison) */ {
 public:
  inline Expression_Subquery_SetComparison() : Expression_Subquery_SetComparison(nullptr) {}
  ~Expression_Subquery_SetComparison() override;
  explicit PROTOBUF_CONSTEXPR Expression_Subquery_SetComparison(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Subquery_SetComparison(const Expression_Subquery_SetComparison& from);
  Expression_Subquery_SetComparison(Expression_Subquery_SetComparison&& from) noexcept
    : Expression_Subquery_SetComparison() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery_SetComparison& operator=(const Expression_Subquery_SetComparison& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery_SetComparison& operator=(Expression_Subquery_SetComparison&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Subquery_SetComparison& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expression_Subquery_SetComparison* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery_SetComparison*>(
               &_Expression_Subquery_SetComparison_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(Expression_Subquery_SetComparison& a, Expression_Subquery_SetComparison& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery_SetComparison* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery_SetComparison* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Subquery_SetComparison* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Subquery_SetComparison>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Subquery_SetComparison& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Subquery_SetComparison& from) {
    Expression_Subquery_SetComparison::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery_SetComparison* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Subquery.SetComparison";
  }
  protected:
  explicit Expression_Subquery_SetComparison(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ComparisonOp = Expression_Subquery_SetComparison_ComparisonOp;
  static constexpr ComparisonOp COMPARISON_OP_UNSPECIFIED = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_UNSPECIFIED;
  static constexpr ComparisonOp COMPARISON_OP_EQ = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_EQ;
  static constexpr ComparisonOp COMPARISON_OP_NE = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_NE;
  static constexpr ComparisonOp COMPARISON_OP_LT = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LT;
  static constexpr ComparisonOp COMPARISON_OP_GT = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GT;
  static constexpr ComparisonOp COMPARISON_OP_LE = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_LE;
  static constexpr ComparisonOp COMPARISON_OP_GE = Expression_Subquery_SetComparison_ComparisonOp_COMPARISON_OP_GE;
  static inline bool ComparisonOp_IsValid(int value) {
    return Expression_Subquery_SetComparison_ComparisonOp_IsValid(value);
  }
  static constexpr ComparisonOp ComparisonOp_MIN = Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MIN;
  static constexpr ComparisonOp ComparisonOp_MAX = Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_MAX;
  static constexpr int ComparisonOp_ARRAYSIZE = Expression_Subquery_SetComparison_ComparisonOp_ComparisonOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonOp_descriptor() {
    return Expression_Subquery_SetComparison_ComparisonOp_descriptor();
  }
  template <typename T>
  static inline const std::string& ComparisonOp_Name(T value) {
    return Expression_Subquery_SetComparison_ComparisonOp_Name(value);
  }
  static inline bool ComparisonOp_Parse(absl::string_view name, ComparisonOp* value) {
    return Expression_Subquery_SetComparison_ComparisonOp_Parse(name, value);
  }

  using ReductionOp = Expression_Subquery_SetComparison_ReductionOp;
  static constexpr ReductionOp REDUCTION_OP_UNSPECIFIED = Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_UNSPECIFIED;
  static constexpr ReductionOp REDUCTION_OP_ANY = Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ANY;
  static constexpr ReductionOp REDUCTION_OP_ALL = Expression_Subquery_SetComparison_ReductionOp_REDUCTION_OP_ALL;
  static inline bool ReductionOp_IsValid(int value) {
    return Expression_Subquery_SetComparison_ReductionOp_IsValid(value);
  }
  static constexpr ReductionOp ReductionOp_MIN = Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MIN;
  static constexpr ReductionOp ReductionOp_MAX = Expression_Subquery_SetComparison_ReductionOp_ReductionOp_MAX;
  static constexpr int ReductionOp_ARRAYSIZE = Expression_Subquery_SetComparison_ReductionOp_ReductionOp_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReductionOp_descriptor() {
    return Expression_Subquery_SetComparison_ReductionOp_descriptor();
  }
  template <typename T>
  static inline const std::string& ReductionOp_Name(T value) {
    return Expression_Subquery_SetComparison_ReductionOp_Name(value);
  }
  static inline bool ReductionOp_Parse(absl::string_view name, ReductionOp* value) {
    return Expression_Subquery_SetComparison_ReductionOp_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 3,
    kRightFieldNumber = 4,
    kReductionOpFieldNumber = 1,
    kComparisonOpFieldNumber = 2,
  };
  // .substrait.Expression left = 3 [json_name = "left"];
  bool has_left() const;
  void clear_left() ;
  const ::substrait::Expression& left() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_left();
  ::substrait::Expression* mutable_left();
  void set_allocated_left(::substrait::Expression* left);
  private:
  const ::substrait::Expression& _internal_left() const;
  ::substrait::Expression* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::substrait::Expression* left);
  ::substrait::Expression* unsafe_arena_release_left();
  // .substrait.Rel right = 4 [json_name = "right"];
  bool has_right() const;
  void clear_right() ;
  const ::substrait::Rel& right() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_right();
  ::substrait::Rel* mutable_right();
  void set_allocated_right(::substrait::Rel* right);
  private:
  const ::substrait::Rel& _internal_right() const;
  ::substrait::Rel* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::substrait::Rel* right);
  ::substrait::Rel* unsafe_arena_release_right();
  // .substrait.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1 [json_name = "reductionOp"];
  void clear_reduction_op() ;
  ::substrait::Expression_Subquery_SetComparison_ReductionOp reduction_op() const;
  void set_reduction_op(::substrait::Expression_Subquery_SetComparison_ReductionOp value);

  private:
  ::substrait::Expression_Subquery_SetComparison_ReductionOp _internal_reduction_op() const;
  void _internal_set_reduction_op(::substrait::Expression_Subquery_SetComparison_ReductionOp value);

  public:
  // .substrait.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2 [json_name = "comparisonOp"];
  void clear_comparison_op() ;
  ::substrait::Expression_Subquery_SetComparison_ComparisonOp comparison_op() const;
  void set_comparison_op(::substrait::Expression_Subquery_SetComparison_ComparisonOp value);

  private:
  ::substrait::Expression_Subquery_SetComparison_ComparisonOp _internal_comparison_op() const;
  void _internal_set_comparison_op(::substrait::Expression_Subquery_SetComparison_ComparisonOp value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Expression.Subquery.SetComparison)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* left_;
    ::substrait::Rel* right_;
    int reduction_op_;
    int comparison_op_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression_Subquery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression.Subquery) */ {
 public:
  inline Expression_Subquery() : Expression_Subquery(nullptr) {}
  ~Expression_Subquery() override;
  explicit PROTOBUF_CONSTEXPR Expression_Subquery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression_Subquery(const Expression_Subquery& from);
  Expression_Subquery(Expression_Subquery&& from) noexcept
    : Expression_Subquery() {
    *this = ::std::move(from);
  }

  inline Expression_Subquery& operator=(const Expression_Subquery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression_Subquery& operator=(Expression_Subquery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression_Subquery& default_instance() {
    return *internal_default_instance();
  }
  enum SubqueryTypeCase {
    kScalar = 1,
    kInPredicate = 2,
    kSetPredicate = 3,
    kSetComparison = 4,
    SUBQUERY_TYPE_NOT_SET = 0,
  };

  static inline const Expression_Subquery* internal_default_instance() {
    return reinterpret_cast<const Expression_Subquery*>(
               &_Expression_Subquery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(Expression_Subquery& a, Expression_Subquery& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression_Subquery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression_Subquery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression_Subquery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression_Subquery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression_Subquery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression_Subquery& from) {
    Expression_Subquery::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression_Subquery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression.Subquery";
  }
  protected:
  explicit Expression_Subquery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Subquery_Scalar Scalar;
  typedef Expression_Subquery_InPredicate InPredicate;
  typedef Expression_Subquery_SetPredicate SetPredicate;
  typedef Expression_Subquery_SetComparison SetComparison;

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
    kInPredicateFieldNumber = 2,
    kSetPredicateFieldNumber = 3,
    kSetComparisonFieldNumber = 4,
  };
  // .substrait.Expression.Subquery.Scalar scalar = 1 [json_name = "scalar"];
  bool has_scalar() const;
  private:
  bool _internal_has_scalar() const;

  public:
  void clear_scalar() ;
  const ::substrait::Expression_Subquery_Scalar& scalar() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Subquery_Scalar* release_scalar();
  ::substrait::Expression_Subquery_Scalar* mutable_scalar();
  void set_allocated_scalar(::substrait::Expression_Subquery_Scalar* scalar);
  private:
  const ::substrait::Expression_Subquery_Scalar& _internal_scalar() const;
  ::substrait::Expression_Subquery_Scalar* _internal_mutable_scalar();
  public:
  void unsafe_arena_set_allocated_scalar(
      ::substrait::Expression_Subquery_Scalar* scalar);
  ::substrait::Expression_Subquery_Scalar* unsafe_arena_release_scalar();
  // .substrait.Expression.Subquery.InPredicate in_predicate = 2 [json_name = "inPredicate"];
  bool has_in_predicate() const;
  private:
  bool _internal_has_in_predicate() const;

  public:
  void clear_in_predicate() ;
  const ::substrait::Expression_Subquery_InPredicate& in_predicate() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Subquery_InPredicate* release_in_predicate();
  ::substrait::Expression_Subquery_InPredicate* mutable_in_predicate();
  void set_allocated_in_predicate(::substrait::Expression_Subquery_InPredicate* in_predicate);
  private:
  const ::substrait::Expression_Subquery_InPredicate& _internal_in_predicate() const;
  ::substrait::Expression_Subquery_InPredicate* _internal_mutable_in_predicate();
  public:
  void unsafe_arena_set_allocated_in_predicate(
      ::substrait::Expression_Subquery_InPredicate* in_predicate);
  ::substrait::Expression_Subquery_InPredicate* unsafe_arena_release_in_predicate();
  // .substrait.Expression.Subquery.SetPredicate set_predicate = 3 [json_name = "setPredicate"];
  bool has_set_predicate() const;
  private:
  bool _internal_has_set_predicate() const;

  public:
  void clear_set_predicate() ;
  const ::substrait::Expression_Subquery_SetPredicate& set_predicate() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Subquery_SetPredicate* release_set_predicate();
  ::substrait::Expression_Subquery_SetPredicate* mutable_set_predicate();
  void set_allocated_set_predicate(::substrait::Expression_Subquery_SetPredicate* set_predicate);
  private:
  const ::substrait::Expression_Subquery_SetPredicate& _internal_set_predicate() const;
  ::substrait::Expression_Subquery_SetPredicate* _internal_mutable_set_predicate();
  public:
  void unsafe_arena_set_allocated_set_predicate(
      ::substrait::Expression_Subquery_SetPredicate* set_predicate);
  ::substrait::Expression_Subquery_SetPredicate* unsafe_arena_release_set_predicate();
  // .substrait.Expression.Subquery.SetComparison set_comparison = 4 [json_name = "setComparison"];
  bool has_set_comparison() const;
  private:
  bool _internal_has_set_comparison() const;

  public:
  void clear_set_comparison() ;
  const ::substrait::Expression_Subquery_SetComparison& set_comparison() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Subquery_SetComparison* release_set_comparison();
  ::substrait::Expression_Subquery_SetComparison* mutable_set_comparison();
  void set_allocated_set_comparison(::substrait::Expression_Subquery_SetComparison* set_comparison);
  private:
  const ::substrait::Expression_Subquery_SetComparison& _internal_set_comparison() const;
  ::substrait::Expression_Subquery_SetComparison* _internal_mutable_set_comparison();
  public:
  void unsafe_arena_set_allocated_set_comparison(
      ::substrait::Expression_Subquery_SetComparison* set_comparison);
  ::substrait::Expression_Subquery_SetComparison* unsafe_arena_release_set_comparison();
  void clear_subquery_type();
  SubqueryTypeCase subquery_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression.Subquery)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_in_predicate();
  void set_has_set_predicate();
  void set_has_set_comparison();

  inline bool has_subquery_type() const;
  inline void clear_has_subquery_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SubqueryTypeUnion {
      constexpr SubqueryTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_Subquery_Scalar* scalar_;
      ::substrait::Expression_Subquery_InPredicate* in_predicate_;
      ::substrait::Expression_Subquery_SetPredicate* set_predicate_;
      ::substrait::Expression_Subquery_SetComparison* set_comparison_;
    } subquery_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class Expression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Expression) */ {
 public:
  inline Expression() : Expression(nullptr) {}
  ~Expression() override;
  explicit PROTOBUF_CONSTEXPR Expression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expression(const Expression& from);
  Expression(Expression&& from) noexcept
    : Expression() {
    *this = ::std::move(from);
  }

  inline Expression& operator=(const Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expression& operator=(Expression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expression& default_instance() {
    return *internal_default_instance();
  }
  enum RexTypeCase {
    kLiteral = 1,
    kSelection = 2,
    kScalarFunction = 3,
    kWindowFunction = 5,
    kIfThen = 6,
    kSwitchExpression = 7,
    kSingularOrList = 8,
    kMultiOrList = 9,
    kCast = 11,
    kSubquery = 12,
    kNested = 13,
    kEnum = 10,
    REX_TYPE_NOT_SET = 0,
  };

  static inline const Expression* internal_default_instance() {
    return reinterpret_cast<const Expression*>(
               &_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(Expression& a, Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(Expression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expression* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Expression& from) {
    Expression::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Expression";
  }
  protected:
  explicit Expression(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expression_Enum Enum;
  typedef Expression_Literal Literal;
  typedef Expression_Nested Nested;
  typedef Expression_ScalarFunction ScalarFunction;
  typedef Expression_WindowFunction WindowFunction;
  typedef Expression_IfThen IfThen;
  typedef Expression_Cast Cast;
  typedef Expression_SwitchExpression SwitchExpression;
  typedef Expression_SingularOrList SingularOrList;
  typedef Expression_MultiOrList MultiOrList;
  typedef Expression_EmbeddedFunction EmbeddedFunction;
  typedef Expression_ReferenceSegment ReferenceSegment;
  typedef Expression_MaskExpression MaskExpression;
  typedef Expression_FieldReference FieldReference;
  typedef Expression_Subquery Subquery;

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralFieldNumber = 1,
    kSelectionFieldNumber = 2,
    kScalarFunctionFieldNumber = 3,
    kWindowFunctionFieldNumber = 5,
    kIfThenFieldNumber = 6,
    kSwitchExpressionFieldNumber = 7,
    kSingularOrListFieldNumber = 8,
    kMultiOrListFieldNumber = 9,
    kCastFieldNumber = 11,
    kSubqueryFieldNumber = 12,
    kNestedFieldNumber = 13,
    kEnumFieldNumber = 10,
  };
  // .substrait.Expression.Literal literal = 1 [json_name = "literal"];
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;

  public:
  void clear_literal() ;
  const ::substrait::Expression_Literal& literal() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Literal* release_literal();
  ::substrait::Expression_Literal* mutable_literal();
  void set_allocated_literal(::substrait::Expression_Literal* literal);
  private:
  const ::substrait::Expression_Literal& _internal_literal() const;
  ::substrait::Expression_Literal* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::substrait::Expression_Literal* literal);
  ::substrait::Expression_Literal* unsafe_arena_release_literal();
  // .substrait.Expression.FieldReference selection = 2 [json_name = "selection"];
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;

  public:
  void clear_selection() ;
  const ::substrait::Expression_FieldReference& selection() const;
  PROTOBUF_NODISCARD ::substrait::Expression_FieldReference* release_selection();
  ::substrait::Expression_FieldReference* mutable_selection();
  void set_allocated_selection(::substrait::Expression_FieldReference* selection);
  private:
  const ::substrait::Expression_FieldReference& _internal_selection() const;
  ::substrait::Expression_FieldReference* _internal_mutable_selection();
  public:
  void unsafe_arena_set_allocated_selection(
      ::substrait::Expression_FieldReference* selection);
  ::substrait::Expression_FieldReference* unsafe_arena_release_selection();
  // .substrait.Expression.ScalarFunction scalar_function = 3 [json_name = "scalarFunction"];
  bool has_scalar_function() const;
  private:
  bool _internal_has_scalar_function() const;

  public:
  void clear_scalar_function() ;
  const ::substrait::Expression_ScalarFunction& scalar_function() const;
  PROTOBUF_NODISCARD ::substrait::Expression_ScalarFunction* release_scalar_function();
  ::substrait::Expression_ScalarFunction* mutable_scalar_function();
  void set_allocated_scalar_function(::substrait::Expression_ScalarFunction* scalar_function);
  private:
  const ::substrait::Expression_ScalarFunction& _internal_scalar_function() const;
  ::substrait::Expression_ScalarFunction* _internal_mutable_scalar_function();
  public:
  void unsafe_arena_set_allocated_scalar_function(
      ::substrait::Expression_ScalarFunction* scalar_function);
  ::substrait::Expression_ScalarFunction* unsafe_arena_release_scalar_function();
  // .substrait.Expression.WindowFunction window_function = 5 [json_name = "windowFunction"];
  bool has_window_function() const;
  private:
  bool _internal_has_window_function() const;

  public:
  void clear_window_function() ;
  const ::substrait::Expression_WindowFunction& window_function() const;
  PROTOBUF_NODISCARD ::substrait::Expression_WindowFunction* release_window_function();
  ::substrait::Expression_WindowFunction* mutable_window_function();
  void set_allocated_window_function(::substrait::Expression_WindowFunction* window_function);
  private:
  const ::substrait::Expression_WindowFunction& _internal_window_function() const;
  ::substrait::Expression_WindowFunction* _internal_mutable_window_function();
  public:
  void unsafe_arena_set_allocated_window_function(
      ::substrait::Expression_WindowFunction* window_function);
  ::substrait::Expression_WindowFunction* unsafe_arena_release_window_function();
  // .substrait.Expression.IfThen if_then = 6 [json_name = "ifThen"];
  bool has_if_then() const;
  private:
  bool _internal_has_if_then() const;

  public:
  void clear_if_then() ;
  const ::substrait::Expression_IfThen& if_then() const;
  PROTOBUF_NODISCARD ::substrait::Expression_IfThen* release_if_then();
  ::substrait::Expression_IfThen* mutable_if_then();
  void set_allocated_if_then(::substrait::Expression_IfThen* if_then);
  private:
  const ::substrait::Expression_IfThen& _internal_if_then() const;
  ::substrait::Expression_IfThen* _internal_mutable_if_then();
  public:
  void unsafe_arena_set_allocated_if_then(
      ::substrait::Expression_IfThen* if_then);
  ::substrait::Expression_IfThen* unsafe_arena_release_if_then();
  // .substrait.Expression.SwitchExpression switch_expression = 7 [json_name = "switchExpression"];
  bool has_switch_expression() const;
  private:
  bool _internal_has_switch_expression() const;

  public:
  void clear_switch_expression() ;
  const ::substrait::Expression_SwitchExpression& switch_expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression_SwitchExpression* release_switch_expression();
  ::substrait::Expression_SwitchExpression* mutable_switch_expression();
  void set_allocated_switch_expression(::substrait::Expression_SwitchExpression* switch_expression);
  private:
  const ::substrait::Expression_SwitchExpression& _internal_switch_expression() const;
  ::substrait::Expression_SwitchExpression* _internal_mutable_switch_expression();
  public:
  void unsafe_arena_set_allocated_switch_expression(
      ::substrait::Expression_SwitchExpression* switch_expression);
  ::substrait::Expression_SwitchExpression* unsafe_arena_release_switch_expression();
  // .substrait.Expression.SingularOrList singular_or_list = 8 [json_name = "singularOrList"];
  bool has_singular_or_list() const;
  private:
  bool _internal_has_singular_or_list() const;

  public:
  void clear_singular_or_list() ;
  const ::substrait::Expression_SingularOrList& singular_or_list() const;
  PROTOBUF_NODISCARD ::substrait::Expression_SingularOrList* release_singular_or_list();
  ::substrait::Expression_SingularOrList* mutable_singular_or_list();
  void set_allocated_singular_or_list(::substrait::Expression_SingularOrList* singular_or_list);
  private:
  const ::substrait::Expression_SingularOrList& _internal_singular_or_list() const;
  ::substrait::Expression_SingularOrList* _internal_mutable_singular_or_list();
  public:
  void unsafe_arena_set_allocated_singular_or_list(
      ::substrait::Expression_SingularOrList* singular_or_list);
  ::substrait::Expression_SingularOrList* unsafe_arena_release_singular_or_list();
  // .substrait.Expression.MultiOrList multi_or_list = 9 [json_name = "multiOrList"];
  bool has_multi_or_list() const;
  private:
  bool _internal_has_multi_or_list() const;

  public:
  void clear_multi_or_list() ;
  const ::substrait::Expression_MultiOrList& multi_or_list() const;
  PROTOBUF_NODISCARD ::substrait::Expression_MultiOrList* release_multi_or_list();
  ::substrait::Expression_MultiOrList* mutable_multi_or_list();
  void set_allocated_multi_or_list(::substrait::Expression_MultiOrList* multi_or_list);
  private:
  const ::substrait::Expression_MultiOrList& _internal_multi_or_list() const;
  ::substrait::Expression_MultiOrList* _internal_mutable_multi_or_list();
  public:
  void unsafe_arena_set_allocated_multi_or_list(
      ::substrait::Expression_MultiOrList* multi_or_list);
  ::substrait::Expression_MultiOrList* unsafe_arena_release_multi_or_list();
  // .substrait.Expression.Cast cast = 11 [json_name = "cast"];
  bool has_cast() const;
  private:
  bool _internal_has_cast() const;

  public:
  void clear_cast() ;
  const ::substrait::Expression_Cast& cast() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Cast* release_cast();
  ::substrait::Expression_Cast* mutable_cast();
  void set_allocated_cast(::substrait::Expression_Cast* cast);
  private:
  const ::substrait::Expression_Cast& _internal_cast() const;
  ::substrait::Expression_Cast* _internal_mutable_cast();
  public:
  void unsafe_arena_set_allocated_cast(
      ::substrait::Expression_Cast* cast);
  ::substrait::Expression_Cast* unsafe_arena_release_cast();
  // .substrait.Expression.Subquery subquery = 12 [json_name = "subquery"];
  bool has_subquery() const;
  private:
  bool _internal_has_subquery() const;

  public:
  void clear_subquery() ;
  const ::substrait::Expression_Subquery& subquery() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Subquery* release_subquery();
  ::substrait::Expression_Subquery* mutable_subquery();
  void set_allocated_subquery(::substrait::Expression_Subquery* subquery);
  private:
  const ::substrait::Expression_Subquery& _internal_subquery() const;
  ::substrait::Expression_Subquery* _internal_mutable_subquery();
  public:
  void unsafe_arena_set_allocated_subquery(
      ::substrait::Expression_Subquery* subquery);
  ::substrait::Expression_Subquery* unsafe_arena_release_subquery();
  // .substrait.Expression.Nested nested = 13 [json_name = "nested"];
  bool has_nested() const;
  private:
  bool _internal_has_nested() const;

  public:
  void clear_nested() ;
  const ::substrait::Expression_Nested& nested() const;
  PROTOBUF_NODISCARD ::substrait::Expression_Nested* release_nested();
  ::substrait::Expression_Nested* mutable_nested();
  void set_allocated_nested(::substrait::Expression_Nested* nested);
  private:
  const ::substrait::Expression_Nested& _internal_nested() const;
  ::substrait::Expression_Nested* _internal_mutable_nested();
  public:
  void unsafe_arena_set_allocated_nested(
      ::substrait::Expression_Nested* nested);
  ::substrait::Expression_Nested* unsafe_arena_release_nested();
  // .substrait.Expression.Enum enum = 10 [json_name = "enum", deprecated = true];
  [[deprecated]]  bool has_enum_() const;
  private:
  bool _internal_has_enum_() const;

  public:
  [[deprecated]]  void clear_enum_() ;
  [[deprecated]] const ::substrait::Expression_Enum& enum_() const;
  [[deprecated]] PROTOBUF_NODISCARD ::substrait::Expression_Enum* release_enum_();
  [[deprecated]] ::substrait::Expression_Enum* mutable_enum_();
  [[deprecated]] void set_allocated_enum_(::substrait::Expression_Enum* enum_);
  private:
  const ::substrait::Expression_Enum& _internal_enum_() const;
  ::substrait::Expression_Enum* _internal_mutable_enum_();
  public:
  [[deprecated]] void unsafe_arena_set_allocated_enum_(
      ::substrait::Expression_Enum* enum_);
  [[deprecated]] ::substrait::Expression_Enum* unsafe_arena_release_enum_();
  void clear_rex_type();
  RexTypeCase rex_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.Expression)
 private:
  class _Internal;
  void set_has_literal();
  void set_has_selection();
  void set_has_scalar_function();
  void set_has_window_function();
  void set_has_if_then();
  void set_has_switch_expression();
  void set_has_singular_or_list();
  void set_has_multi_or_list();
  void set_has_cast();
  void set_has_subquery();
  void set_has_nested();
  void set_has_enum_();

  inline bool has_rex_type() const;
  inline void clear_has_rex_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RexTypeUnion {
      constexpr RexTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Expression_Literal* literal_;
      ::substrait::Expression_FieldReference* selection_;
      ::substrait::Expression_ScalarFunction* scalar_function_;
      ::substrait::Expression_WindowFunction* window_function_;
      ::substrait::Expression_IfThen* if_then_;
      ::substrait::Expression_SwitchExpression* switch_expression_;
      ::substrait::Expression_SingularOrList* singular_or_list_;
      ::substrait::Expression_MultiOrList* multi_or_list_;
      ::substrait::Expression_Cast* cast_;
      ::substrait::Expression_Subquery* subquery_;
      ::substrait::Expression_Nested* nested_;
      ::substrait::Expression_Enum* enum__;
    } rex_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class SortField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.SortField) */ {
 public:
  inline SortField() : SortField(nullptr) {}
  ~SortField() override;
  explicit PROTOBUF_CONSTEXPR SortField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SortField(const SortField& from);
  SortField(SortField&& from) noexcept
    : SortField() {
    *this = ::std::move(from);
  }

  inline SortField& operator=(const SortField& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortField& operator=(SortField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortField& default_instance() {
    return *internal_default_instance();
  }
  enum SortKindCase {
    kDirection = 2,
    kComparisonFunctionReference = 3,
    SORT_KIND_NOT_SET = 0,
  };

  static inline const SortField* internal_default_instance() {
    return reinterpret_cast<const SortField*>(
               &_SortField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(SortField& a, SortField& b) {
    a.Swap(&b);
  }
  inline void Swap(SortField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SortField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SortField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SortField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SortField& from) {
    SortField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SortField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.SortField";
  }
  protected:
  explicit SortField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using SortDirection = SortField_SortDirection;
  static constexpr SortDirection SORT_DIRECTION_UNSPECIFIED = SortField_SortDirection_SORT_DIRECTION_UNSPECIFIED;
  static constexpr SortDirection SORT_DIRECTION_ASC_NULLS_FIRST = SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_FIRST;
  static constexpr SortDirection SORT_DIRECTION_ASC_NULLS_LAST = SortField_SortDirection_SORT_DIRECTION_ASC_NULLS_LAST;
  static constexpr SortDirection SORT_DIRECTION_DESC_NULLS_FIRST = SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_FIRST;
  static constexpr SortDirection SORT_DIRECTION_DESC_NULLS_LAST = SortField_SortDirection_SORT_DIRECTION_DESC_NULLS_LAST;
  static constexpr SortDirection SORT_DIRECTION_CLUSTERED = SortField_SortDirection_SORT_DIRECTION_CLUSTERED;
  static inline bool SortDirection_IsValid(int value) {
    return SortField_SortDirection_IsValid(value);
  }
  static constexpr SortDirection SortDirection_MIN = SortField_SortDirection_SortDirection_MIN;
  static constexpr SortDirection SortDirection_MAX = SortField_SortDirection_SortDirection_MAX;
  static constexpr int SortDirection_ARRAYSIZE = SortField_SortDirection_SortDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortDirection_descriptor() {
    return SortField_SortDirection_descriptor();
  }
  template <typename T>
  static inline const std::string& SortDirection_Name(T value) {
    return SortField_SortDirection_Name(value);
  }
  static inline bool SortDirection_Parse(absl::string_view name, SortDirection* value) {
    return SortField_SortDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExprFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kComparisonFunctionReferenceFieldNumber = 3,
  };
  // .substrait.Expression expr = 1 [json_name = "expr"];
  bool has_expr() const;
  void clear_expr() ;
  const ::substrait::Expression& expr() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expr();
  ::substrait::Expression* mutable_expr();
  void set_allocated_expr(::substrait::Expression* expr);
  private:
  const ::substrait::Expression& _internal_expr() const;
  ::substrait::Expression* _internal_mutable_expr();
  public:
  void unsafe_arena_set_allocated_expr(
      ::substrait::Expression* expr);
  ::substrait::Expression* unsafe_arena_release_expr();
  // .substrait.SortField.SortDirection direction = 2 [json_name = "direction"];
  bool has_direction() const;
  void clear_direction() ;
  ::substrait::SortField_SortDirection direction() const;
  void set_direction(::substrait::SortField_SortDirection value);

  private:
  ::substrait::SortField_SortDirection _internal_direction() const;
  void _internal_set_direction(::substrait::SortField_SortDirection value);

  public:
  // uint32 comparison_function_reference = 3 [json_name = "comparisonFunctionReference"];
  bool has_comparison_function_reference() const;
  void clear_comparison_function_reference() ;
  ::uint32_t comparison_function_reference() const;
  void set_comparison_function_reference(::uint32_t value);

  private:
  ::uint32_t _internal_comparison_function_reference() const;
  void _internal_set_comparison_function_reference(::uint32_t value);

  public:
  void clear_sort_kind();
  SortKindCase sort_kind_case() const;
  // @@protoc_insertion_point(class_scope:substrait.SortField)
 private:
  class _Internal;
  void set_has_direction();
  void set_has_comparison_function_reference();

  inline bool has_sort_kind() const;
  inline void clear_has_sort_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Expression* expr_;
    union SortKindUnion {
      constexpr SortKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int direction_;
      ::uint32_t comparison_function_reference_;
    } sort_kind_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class AggregateFunction_ReferenceRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateFunction.ReferenceRel) */ {
 public:
  inline AggregateFunction_ReferenceRel() : AggregateFunction_ReferenceRel(nullptr) {}
  ~AggregateFunction_ReferenceRel() override;
  explicit PROTOBUF_CONSTEXPR AggregateFunction_ReferenceRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateFunction_ReferenceRel(const AggregateFunction_ReferenceRel& from);
  AggregateFunction_ReferenceRel(AggregateFunction_ReferenceRel&& from) noexcept
    : AggregateFunction_ReferenceRel() {
    *this = ::std::move(from);
  }

  inline AggregateFunction_ReferenceRel& operator=(const AggregateFunction_ReferenceRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateFunction_ReferenceRel& operator=(AggregateFunction_ReferenceRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateFunction_ReferenceRel& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateFunction_ReferenceRel* internal_default_instance() {
    return reinterpret_cast<const AggregateFunction_ReferenceRel*>(
               &_AggregateFunction_ReferenceRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(AggregateFunction_ReferenceRel& a, AggregateFunction_ReferenceRel& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateFunction_ReferenceRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateFunction_ReferenceRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateFunction_ReferenceRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateFunction_ReferenceRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateFunction_ReferenceRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggregateFunction_ReferenceRel& from) {
    AggregateFunction_ReferenceRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateFunction_ReferenceRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.AggregateFunction.ReferenceRel";
  }
  protected:
  explicit AggregateFunction_ReferenceRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtreeOrdinalFieldNumber = 1,
  };
  // int32 subtree_ordinal = 1 [json_name = "subtreeOrdinal"];
  void clear_subtree_ordinal() ;
  ::int32_t subtree_ordinal() const;
  void set_subtree_ordinal(::int32_t value);

  private:
  ::int32_t _internal_subtree_ordinal() const;
  void _internal_set_subtree_ordinal(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.AggregateFunction.ReferenceRel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t subtree_ordinal_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};// -------------------------------------------------------------------

class AggregateFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.AggregateFunction) */ {
 public:
  inline AggregateFunction() : AggregateFunction(nullptr) {}
  ~AggregateFunction() override;
  explicit PROTOBUF_CONSTEXPR AggregateFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggregateFunction(const AggregateFunction& from);
  AggregateFunction(AggregateFunction&& from) noexcept
    : AggregateFunction() {
    *this = ::std::move(from);
  }

  inline AggregateFunction& operator=(const AggregateFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregateFunction& operator=(AggregateFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggregateFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggregateFunction* internal_default_instance() {
    return reinterpret_cast<const AggregateFunction*>(
               &_AggregateFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(AggregateFunction& a, AggregateFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregateFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggregateFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggregateFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggregateFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggregateFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggregateFunction& from) {
    AggregateFunction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregateFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.AggregateFunction";
  }
  protected:
  explicit AggregateFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AggregateFunction_ReferenceRel ReferenceRel;

  using AggregationInvocation = AggregateFunction_AggregationInvocation;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_UNSPECIFIED = AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_UNSPECIFIED;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_ALL = AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_ALL;
  static constexpr AggregationInvocation AGGREGATION_INVOCATION_DISTINCT = AggregateFunction_AggregationInvocation_AGGREGATION_INVOCATION_DISTINCT;
  static inline bool AggregationInvocation_IsValid(int value) {
    return AggregateFunction_AggregationInvocation_IsValid(value);
  }
  static constexpr AggregationInvocation AggregationInvocation_MIN = AggregateFunction_AggregationInvocation_AggregationInvocation_MIN;
  static constexpr AggregationInvocation AggregationInvocation_MAX = AggregateFunction_AggregationInvocation_AggregationInvocation_MAX;
  static constexpr int AggregationInvocation_ARRAYSIZE = AggregateFunction_AggregationInvocation_AggregationInvocation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AggregationInvocation_descriptor() {
    return AggregateFunction_AggregationInvocation_descriptor();
  }
  template <typename T>
  static inline const std::string& AggregationInvocation_Name(T value) {
    return AggregateFunction_AggregationInvocation_Name(value);
  }
  static inline bool AggregationInvocation_Parse(absl::string_view name, AggregationInvocation* value) {
    return AggregateFunction_AggregationInvocation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kSortsFieldNumber = 3,
    kArgumentsFieldNumber = 7,
    kOptionsFieldNumber = 8,
    kOutputTypeFieldNumber = 5,
    kFunctionReferenceFieldNumber = 1,
    kPhaseFieldNumber = 4,
    kInvocationFieldNumber = 6,
  };
  // repeated .substrait.Expression args = 2 [json_name = "args", deprecated = true];
  [[deprecated]]  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  [[deprecated]]  void clear_args() ;
  [[deprecated]] ::substrait::Expression* mutable_args(int index);
  [[deprecated]] ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
      mutable_args();
  private:
  const ::substrait::Expression& _internal_args(int index) const;
  ::substrait::Expression* _internal_add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>& _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>* _internal_mutable_args();
  public:
  [[deprecated]] const ::substrait::Expression& args(int index) const;
  [[deprecated]] ::substrait::Expression* add_args();
  [[deprecated]] const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
      args() const;
  // repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
  int sorts_size() const;
  private:
  int _internal_sorts_size() const;

  public:
  void clear_sorts() ;
  ::substrait::SortField* mutable_sorts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
      mutable_sorts();
  private:
  const ::substrait::SortField& _internal_sorts(int index) const;
  ::substrait::SortField* _internal_add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>& _internal_sorts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>* _internal_mutable_sorts();
  public:
  const ::substrait::SortField& sorts(int index) const;
  ::substrait::SortField* add_sorts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
      sorts() const;
  // repeated .substrait.FunctionArgument arguments = 7 [json_name = "arguments"];
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;

  public:
  void clear_arguments() ;
  ::substrait::FunctionArgument* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
      mutable_arguments();
  private:
  const ::substrait::FunctionArgument& _internal_arguments(int index) const;
  ::substrait::FunctionArgument* _internal_add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>* _internal_mutable_arguments();
  public:
  const ::substrait::FunctionArgument& arguments(int index) const;
  ::substrait::FunctionArgument* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
      arguments() const;
  // repeated .substrait.FunctionOption options = 8 [json_name = "options"];
  int options_size() const;
  private:
  int _internal_options_size() const;

  public:
  void clear_options() ;
  ::substrait::FunctionOption* mutable_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
      mutable_options();
  private:
  const ::substrait::FunctionOption& _internal_options(int index) const;
  ::substrait::FunctionOption* _internal_add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>& _internal_options() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>* _internal_mutable_options();
  public:
  const ::substrait::FunctionOption& options(int index) const;
  ::substrait::FunctionOption* add_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
      options() const;
  // .substrait.Type output_type = 5 [json_name = "outputType"];
  bool has_output_type() const;
  void clear_output_type() ;
  const ::substrait::Type& output_type() const;
  PROTOBUF_NODISCARD ::substrait::Type* release_output_type();
  ::substrait::Type* mutable_output_type();
  void set_allocated_output_type(::substrait::Type* output_type);
  private:
  const ::substrait::Type& _internal_output_type() const;
  ::substrait::Type* _internal_mutable_output_type();
  public:
  void unsafe_arena_set_allocated_output_type(
      ::substrait::Type* output_type);
  ::substrait::Type* unsafe_arena_release_output_type();
  // uint32 function_reference = 1 [json_name = "functionReference"];
  void clear_function_reference() ;
  ::uint32_t function_reference() const;
  void set_function_reference(::uint32_t value);

  private:
  ::uint32_t _internal_function_reference() const;
  void _internal_set_function_reference(::uint32_t value);

  public:
  // .substrait.AggregationPhase phase = 4 [json_name = "phase"];
  void clear_phase() ;
  ::substrait::AggregationPhase phase() const;
  void set_phase(::substrait::AggregationPhase value);

  private:
  ::substrait::AggregationPhase _internal_phase() const;
  void _internal_set_phase(::substrait::AggregationPhase value);

  public:
  // .substrait.AggregateFunction.AggregationInvocation invocation = 6 [json_name = "invocation"];
  void clear_invocation() ;
  ::substrait::AggregateFunction_AggregationInvocation invocation() const;
  void set_invocation(::substrait::AggregateFunction_AggregationInvocation value);

  private:
  ::substrait::AggregateFunction_AggregationInvocation _internal_invocation() const;
  void _internal_set_invocation(::substrait::AggregateFunction_AggregationInvocation value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.AggregateFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression > args_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField > sorts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument > arguments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption > options_;
    ::substrait::Type* output_type_;
    ::uint32_t function_reference_;
    int phase_;
    int invocation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2falgebra_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RelCommon_Direct

// -------------------------------------------------------------------

// RelCommon_Emit

// repeated int32 output_mapping = 1 [json_name = "outputMapping"];
inline int RelCommon_Emit::_internal_output_mapping_size() const {
  return _impl_.output_mapping_.size();
}
inline int RelCommon_Emit::output_mapping_size() const {
  return _internal_output_mapping_size();
}
inline void RelCommon_Emit::clear_output_mapping() {
  _internal_mutable_output_mapping()->Clear();
}
inline ::int32_t RelCommon_Emit::output_mapping(int index) const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping(index);
}
inline void RelCommon_Emit::set_output_mapping(int index, ::int32_t value) {
  _internal_mutable_output_mapping()->Set(index, value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Emit.output_mapping)
}
inline void RelCommon_Emit::add_output_mapping(::int32_t value) {
  _internal_add_output_mapping(value);
  // @@protoc_insertion_point(field_add:substrait.RelCommon.Emit.output_mapping)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& RelCommon_Emit::output_mapping() const {
  // @@protoc_insertion_point(field_list:substrait.RelCommon.Emit.output_mapping)
  return _internal_output_mapping();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* RelCommon_Emit::mutable_output_mapping() {
  // @@protoc_insertion_point(field_mutable_list:substrait.RelCommon.Emit.output_mapping)
  return _internal_mutable_output_mapping();
}

inline ::int32_t RelCommon_Emit::_internal_output_mapping(int index) const {
  return _internal_output_mapping().Get(index);
}
inline void RelCommon_Emit::_internal_add_output_mapping(::int32_t value) {
  _internal_mutable_output_mapping()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& RelCommon_Emit::_internal_output_mapping() const {
  return _impl_.output_mapping_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* RelCommon_Emit::_internal_mutable_output_mapping() {
  return &_impl_.output_mapping_;
}

// -------------------------------------------------------------------

// RelCommon_Hint_Stats

// double row_count = 1 [json_name = "rowCount"];
inline void RelCommon_Hint_Stats::clear_row_count() {
  _impl_.row_count_ = 0;
}
inline double RelCommon_Hint_Stats::row_count() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.row_count)
  return _internal_row_count();
}
inline void RelCommon_Hint_Stats::set_row_count(double value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Hint.Stats.row_count)
}
inline double RelCommon_Hint_Stats::_internal_row_count() const {
  return _impl_.row_count_;
}
inline void RelCommon_Hint_Stats::_internal_set_row_count(double value) {
  ;
  _impl_.row_count_ = value;
}

// double record_size = 2 [json_name = "recordSize"];
inline void RelCommon_Hint_Stats::clear_record_size() {
  _impl_.record_size_ = 0;
}
inline double RelCommon_Hint_Stats::record_size() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.record_size)
  return _internal_record_size();
}
inline void RelCommon_Hint_Stats::set_record_size(double value) {
  _internal_set_record_size(value);
  // @@protoc_insertion_point(field_set:substrait.RelCommon.Hint.Stats.record_size)
}
inline double RelCommon_Hint_Stats::_internal_record_size() const {
  return _impl_.record_size_;
}
inline void RelCommon_Hint_Stats::_internal_set_record_size(double value) {
  ;
  _impl_.record_size_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint_Stats::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_Stats::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_Stats::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.Stats.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_Stats::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.Stats.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.Stats.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_Stats::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.Stats.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint_Stats::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.Stats.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint_RuntimeConstraint

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint_RuntimeConstraint::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint_RuntimeConstraint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint_RuntimeConstraint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint_RuntimeConstraint::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint_RuntimeConstraint::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.RuntimeConstraint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon_Hint

// .substrait.RelCommon.Hint.Stats stats = 1 [json_name = "stats"];
inline bool RelCommon_Hint::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void RelCommon_Hint::clear_stats() {
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon_Hint_Stats& RelCommon_Hint::_internal_stats() const {
  const ::substrait::RelCommon_Hint_Stats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint_Stats&>(
      ::substrait::_RelCommon_Hint_Stats_default_instance_);
}
inline const ::substrait::RelCommon_Hint_Stats& RelCommon_Hint::stats() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.stats)
  return _internal_stats();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_stats(
    ::substrait::RelCommon_Hint_Stats* stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = stats;
  if (stats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.stats)
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::release_stats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon_Hint_Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::unsafe_arena_release_stats() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.stats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon_Hint_Stats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::_internal_mutable_stats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint_Stats>(GetArenaForAllocation());
    _impl_.stats_ = p;
  }
  return _impl_.stats_;
}
inline ::substrait::RelCommon_Hint_Stats* RelCommon_Hint::mutable_stats() {
  ::substrait::RelCommon_Hint_Stats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.stats)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_stats(::substrait::RelCommon_Hint_Stats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stats);
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.stats)
}

// .substrait.RelCommon.Hint.RuntimeConstraint constraint = 2 [json_name = "constraint"];
inline bool RelCommon_Hint::has_constraint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.constraint_ != nullptr);
  return value;
}
inline void RelCommon_Hint::clear_constraint() {
  if (_impl_.constraint_ != nullptr) _impl_.constraint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::_internal_constraint() const {
  const ::substrait::RelCommon_Hint_RuntimeConstraint* p = _impl_.constraint_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint_RuntimeConstraint&>(
      ::substrait::_RelCommon_Hint_RuntimeConstraint_default_instance_);
}
inline const ::substrait::RelCommon_Hint_RuntimeConstraint& RelCommon_Hint::constraint() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.constraint)
  return _internal_constraint();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_constraint(
    ::substrait::RelCommon_Hint_RuntimeConstraint* constraint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.constraint_);
  }
  _impl_.constraint_ = constraint;
  if (constraint) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.constraint)
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::release_constraint() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::RelCommon_Hint_RuntimeConstraint* temp = _impl_.constraint_;
  _impl_.constraint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.constraint)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::RelCommon_Hint_RuntimeConstraint* temp = _impl_.constraint_;
  _impl_.constraint_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::_internal_mutable_constraint() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint_RuntimeConstraint>(GetArenaForAllocation());
    _impl_.constraint_ = p;
  }
  return _impl_.constraint_;
}
inline ::substrait::RelCommon_Hint_RuntimeConstraint* RelCommon_Hint::mutable_constraint() {
  ::substrait::RelCommon_Hint_RuntimeConstraint* _msg = _internal_mutable_constraint();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.constraint)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_constraint(::substrait::RelCommon_Hint_RuntimeConstraint* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.constraint_;
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(constraint);
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.constraint)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool RelCommon_Hint::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon_Hint::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.Hint.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon_Hint::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.Hint.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.Hint.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon_Hint::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.Hint.advanced_extension)
  return _msg;
}
inline void RelCommon_Hint::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.Hint.advanced_extension)
}

// -------------------------------------------------------------------

// RelCommon

// .substrait.RelCommon.Direct direct = 1 [json_name = "direct"];
inline bool RelCommon::has_direct() const {
  return emit_kind_case() == kDirect;
}
inline bool RelCommon::_internal_has_direct() const {
  return emit_kind_case() == kDirect;
}
inline void RelCommon::set_has_direct() {
  _impl_._oneof_case_[0] = kDirect;
}
inline void RelCommon::clear_direct() {
  if (emit_kind_case() == kDirect) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.emit_kind_.direct_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::RelCommon_Direct* RelCommon::release_direct() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.direct)
  if (emit_kind_case() == kDirect) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Direct* temp = _impl_.emit_kind_.direct_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelCommon_Direct& RelCommon::_internal_direct() const {
  return emit_kind_case() == kDirect
      ? *_impl_.emit_kind_.direct_
      : reinterpret_cast<::substrait::RelCommon_Direct&>(::substrait::_RelCommon_Direct_default_instance_);
}
inline const ::substrait::RelCommon_Direct& RelCommon::direct() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.direct)
  return _internal_direct();
}
inline ::substrait::RelCommon_Direct* RelCommon::unsafe_arena_release_direct() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.RelCommon.direct)
  if (emit_kind_case() == kDirect) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Direct* temp = _impl_.emit_kind_.direct_;
    _impl_.emit_kind_.direct_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_direct(::substrait::RelCommon_Direct* direct) {
  clear_emit_kind();
  if (direct) {
    set_has_direct();
    _impl_.emit_kind_.direct_ = direct;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.direct)
}
inline ::substrait::RelCommon_Direct* RelCommon::_internal_mutable_direct() {
  if (emit_kind_case() != kDirect) {
    clear_emit_kind();
    set_has_direct();
    _impl_.emit_kind_.direct_ = CreateMaybeMessage< ::substrait::RelCommon_Direct >(GetArenaForAllocation());
  }
  return _impl_.emit_kind_.direct_;
}
inline ::substrait::RelCommon_Direct* RelCommon::mutable_direct() {
  ::substrait::RelCommon_Direct* _msg = _internal_mutable_direct();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.direct)
  return _msg;
}

// .substrait.RelCommon.Emit emit = 2 [json_name = "emit"];
inline bool RelCommon::has_emit() const {
  return emit_kind_case() == kEmit;
}
inline bool RelCommon::_internal_has_emit() const {
  return emit_kind_case() == kEmit;
}
inline void RelCommon::set_has_emit() {
  _impl_._oneof_case_[0] = kEmit;
}
inline void RelCommon::clear_emit() {
  if (emit_kind_case() == kEmit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.emit_kind_.emit_;
    }
    clear_has_emit_kind();
  }
}
inline ::substrait::RelCommon_Emit* RelCommon::release_emit() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.emit)
  if (emit_kind_case() == kEmit) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Emit* temp = _impl_.emit_kind_.emit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelCommon_Emit& RelCommon::_internal_emit() const {
  return emit_kind_case() == kEmit
      ? *_impl_.emit_kind_.emit_
      : reinterpret_cast<::substrait::RelCommon_Emit&>(::substrait::_RelCommon_Emit_default_instance_);
}
inline const ::substrait::RelCommon_Emit& RelCommon::emit() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.emit)
  return _internal_emit();
}
inline ::substrait::RelCommon_Emit* RelCommon::unsafe_arena_release_emit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.RelCommon.emit)
  if (emit_kind_case() == kEmit) {
    clear_has_emit_kind();
    ::substrait::RelCommon_Emit* temp = _impl_.emit_kind_.emit_;
    _impl_.emit_kind_.emit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RelCommon::unsafe_arena_set_allocated_emit(::substrait::RelCommon_Emit* emit) {
  clear_emit_kind();
  if (emit) {
    set_has_emit();
    _impl_.emit_kind_.emit_ = emit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.emit)
}
inline ::substrait::RelCommon_Emit* RelCommon::_internal_mutable_emit() {
  if (emit_kind_case() != kEmit) {
    clear_emit_kind();
    set_has_emit();
    _impl_.emit_kind_.emit_ = CreateMaybeMessage< ::substrait::RelCommon_Emit >(GetArenaForAllocation());
  }
  return _impl_.emit_kind_.emit_;
}
inline ::substrait::RelCommon_Emit* RelCommon::mutable_emit() {
  ::substrait::RelCommon_Emit* _msg = _internal_mutable_emit();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.emit)
  return _msg;
}

// .substrait.RelCommon.Hint hint = 3 [json_name = "hint"];
inline bool RelCommon::has_hint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hint_ != nullptr);
  return value;
}
inline void RelCommon::clear_hint() {
  if (_impl_.hint_ != nullptr) _impl_.hint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon_Hint& RelCommon::_internal_hint() const {
  const ::substrait::RelCommon_Hint* p = _impl_.hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon_Hint&>(
      ::substrait::_RelCommon_Hint_default_instance_);
}
inline const ::substrait::RelCommon_Hint& RelCommon::hint() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.hint)
  return _internal_hint();
}
inline void RelCommon::unsafe_arena_set_allocated_hint(
    ::substrait::RelCommon_Hint* hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hint_);
  }
  _impl_.hint_ = hint;
  if (hint) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.hint)
}
inline ::substrait::RelCommon_Hint* RelCommon::release_hint() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon_Hint* temp = _impl_.hint_;
  _impl_.hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon_Hint* RelCommon::unsafe_arena_release_hint() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.hint)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon_Hint* temp = _impl_.hint_;
  _impl_.hint_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon_Hint* RelCommon::_internal_mutable_hint() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon_Hint>(GetArenaForAllocation());
    _impl_.hint_ = p;
  }
  return _impl_.hint_;
}
inline ::substrait::RelCommon_Hint* RelCommon::mutable_hint() {
  ::substrait::RelCommon_Hint* _msg = _internal_mutable_hint();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.hint)
  return _msg;
}
inline void RelCommon::set_allocated_hint(::substrait::RelCommon_Hint* hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hint_;
  }
  if (hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hint);
    if (message_arena != submessage_arena) {
      hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hint, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hint_ = hint;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.hint)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 4 [json_name = "advancedExtension"];
inline bool RelCommon::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& RelCommon::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.RelCommon.advanced_extension)
  return _internal_advanced_extension();
}
inline void RelCommon::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelCommon.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.RelCommon.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* RelCommon::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.RelCommon.advanced_extension)
  return _msg;
}
inline void RelCommon::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelCommon.advanced_extension)
}

inline bool RelCommon::has_emit_kind() const {
  return emit_kind_case() != EMIT_KIND_NOT_SET;
}
inline void RelCommon::clear_has_emit_kind() {
  _impl_._oneof_case_[0] = EMIT_KIND_NOT_SET;
}
inline RelCommon::EmitKindCase RelCommon::emit_kind_case() const {
  return RelCommon::EmitKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReadRel_NamedTable

// repeated string names = 1 [json_name = "names"];
inline int ReadRel_NamedTable::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int ReadRel_NamedTable::names_size() const {
  return _internal_names_size();
}
inline void ReadRel_NamedTable::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* ReadRel_NamedTable::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.ReadRel.NamedTable.names)
  return _s;
}
inline const std::string& ReadRel_NamedTable::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.NamedTable.names)
  return _internal_names(index);
}
inline std::string* ReadRel_NamedTable::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.NamedTable.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void ReadRel_NamedTable::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const std::string& value) {
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(std::string&& value) {
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(const char* value, std::size_t size) {
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.ReadRel.NamedTable.names)
}
inline void ReadRel_NamedTable::add_names(absl::string_view value) {
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.ReadRel.NamedTable.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRel_NamedTable::names() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.NamedTable.names)
  return _internal_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ReadRel_NamedTable::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.NamedTable.names)
  return _internal_mutable_names();
}
inline const std::string& ReadRel_NamedTable::_internal_names(int index) const {
  return _internal_names().Get(index);
}
inline std::string* ReadRel_NamedTable::_internal_add_names() {
  return _internal_mutable_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadRel_NamedTable::_internal_names() const {
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadRel_NamedTable::_internal_mutable_names() {
  return &_impl_.names_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel_NamedTable::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_NamedTable::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_NamedTable::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.NamedTable.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_NamedTable::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.NamedTable.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.NamedTable.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_NamedTable::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.NamedTable.advanced_extension)
  return _msg;
}
inline void ReadRel_NamedTable::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.NamedTable.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel_VirtualTable

// repeated .substrait.Expression.Literal.Struct values = 1 [json_name = "values"];
inline int ReadRel_VirtualTable::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ReadRel_VirtualTable::values_size() const {
  return _internal_values_size();
}
inline void ReadRel_VirtualTable::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.VirtualTable.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >*
ReadRel_VirtualTable::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.VirtualTable.values)
  return _internal_mutable_values();
}
inline const ::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::substrait::Expression_Literal_Struct& ReadRel_VirtualTable::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.VirtualTable.values)
  return _internal_values(index);
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::substrait::Expression_Literal_Struct* ReadRel_VirtualTable::add_values() {
  ::substrait::Expression_Literal_Struct* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:substrait.ReadRel.VirtualTable.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Struct >&
ReadRel_VirtualTable::values() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.VirtualTable.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Struct>&
ReadRel_VirtualTable::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Struct>*
ReadRel_VirtualTable::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// ReadRel_ExtensionTable

// .google.protobuf.Any detail = 1 [json_name = "detail"];
inline bool ReadRel_ExtensionTable::has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detail_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_ExtensionTable::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.ExtensionTable.detail)
  return _internal_detail();
}
inline void ReadRel_ExtensionTable::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.ExtensionTable.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::release_detail() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.ExtensionTable.detail)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_ExtensionTable::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.ExtensionTable.detail)
  return _msg;
}
inline void ReadRel_ExtensionTable::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.ExtensionTable.detail)
}

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_OrcReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions

// -------------------------------------------------------------------

// ReadRel_LocalFiles_FileOrFiles

// string uri_path = 1 [json_name = "uriPath"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path() const {
  return path_type_case() == kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path() {
  _impl_._oneof_case_[0] = kUriPath;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path() {
  if (path_type_case() == kUriPath) {
    _impl_.path_type_.uri_path_.Destroy();
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _internal_uri_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadRel_LocalFiles_FileOrFiles::set_uri_path(Arg_&& arg,
                                                     Args_... args) {
  if (path_type_case() != kUriPath) {
    clear_path_type();

    set_has_uri_path();
    _impl_.path_type_.uri_path_.InitDefault();
  }
  _impl_.path_type_.uri_path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path() {
  std::string* _s = _internal_mutable_uri_path();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path() const {
  if (path_type_case() != kUriPath) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.path_type_.uri_path_.Get();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path(const std::string& value) {
  if (path_type_case() != kUriPath) {
    clear_path_type();

    set_has_uri_path();
    _impl_.path_type_.uri_path_.InitDefault();
  }


  _impl_.path_type_.uri_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path() {
  if (path_type_case() != kUriPath) {
    clear_path_type();

    set_has_uri_path();
    _impl_.path_type_.uri_path_.InitDefault();
  }
  return _impl_.path_type_.uri_path_.Mutable( GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
  if (path_type_case() != kUriPath) {
    return nullptr;
  }
  clear_has_path_type();
  return _impl_.path_type_.uri_path_.Release();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path(std::string* value) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (value != nullptr) {
    set_has_uri_path();
    _impl_.path_type_.uri_path_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path)
}

// string uri_path_glob = 2 [json_name = "uriPathGlob"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_path_glob() const {
  return path_type_case() == kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_path_glob() {
  _impl_._oneof_case_[0] = kUriPathGlob;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_path_glob() {
  if (path_type_case() == kUriPathGlob) {
    _impl_.path_type_.uri_path_glob_.Destroy();
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_path_glob() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _internal_uri_path_glob();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadRel_LocalFiles_FileOrFiles::set_uri_path_glob(Arg_&& arg,
                                                     Args_... args) {
  if (path_type_case() != kUriPathGlob) {
    clear_path_type();

    set_has_uri_path_glob();
    _impl_.path_type_.uri_path_glob_.InitDefault();
  }
  _impl_.path_type_.uri_path_glob_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_path_glob() {
  std::string* _s = _internal_mutable_uri_path_glob();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_path_glob() const {
  if (path_type_case() != kUriPathGlob) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.path_type_.uri_path_glob_.Get();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_path_glob(const std::string& value) {
  if (path_type_case() != kUriPathGlob) {
    clear_path_type();

    set_has_uri_path_glob();
    _impl_.path_type_.uri_path_glob_.InitDefault();
  }


  _impl_.path_type_.uri_path_glob_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_path_glob() {
  if (path_type_case() != kUriPathGlob) {
    clear_path_type();

    set_has_uri_path_glob();
    _impl_.path_type_.uri_path_glob_.InitDefault();
  }
  return _impl_.path_type_.uri_path_glob_.Mutable( GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_path_glob() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
  if (path_type_case() != kUriPathGlob) {
    return nullptr;
  }
  clear_has_path_type();
  return _impl_.path_type_.uri_path_glob_.Release();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_path_glob(std::string* value) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (value != nullptr) {
    set_has_uri_path_glob();
    _impl_.path_type_.uri_path_glob_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_path_glob)
}

// string uri_file = 3 [json_name = "uriFile"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_file() const {
  return path_type_case() == kUriFile;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_file() {
  _impl_._oneof_case_[0] = kUriFile;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_file() {
  if (path_type_case() == kUriFile) {
    _impl_.path_type_.uri_file_.Destroy();
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_file() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _internal_uri_file();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadRel_LocalFiles_FileOrFiles::set_uri_file(Arg_&& arg,
                                                     Args_... args) {
  if (path_type_case() != kUriFile) {
    clear_path_type();

    set_has_uri_file();
    _impl_.path_type_.uri_file_.InitDefault();
  }
  _impl_.path_type_.uri_file_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_file() {
  std::string* _s = _internal_mutable_uri_file();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_file() const {
  if (path_type_case() != kUriFile) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.path_type_.uri_file_.Get();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_file(const std::string& value) {
  if (path_type_case() != kUriFile) {
    clear_path_type();

    set_has_uri_file();
    _impl_.path_type_.uri_file_.InitDefault();
  }


  _impl_.path_type_.uri_file_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_file() {
  if (path_type_case() != kUriFile) {
    clear_path_type();

    set_has_uri_file();
    _impl_.path_type_.uri_file_.InitDefault();
  }
  return _impl_.path_type_.uri_file_.Mutable( GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_file() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
  if (path_type_case() != kUriFile) {
    return nullptr;
  }
  clear_has_path_type();
  return _impl_.path_type_.uri_file_.Release();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_file(std::string* value) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (value != nullptr) {
    set_has_uri_file();
    _impl_.path_type_.uri_file_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_file)
}

// string uri_folder = 4 [json_name = "uriFolder"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_uri_folder() const {
  return path_type_case() == kUriFolder;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_uri_folder() {
  _impl_._oneof_case_[0] = kUriFolder;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_uri_folder() {
  if (path_type_case() == kUriFolder) {
    _impl_.path_type_.uri_folder_.Destroy();
    clear_has_path_type();
  }
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::uri_folder() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _internal_uri_folder();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ReadRel_LocalFiles_FileOrFiles::set_uri_folder(Arg_&& arg,
                                                     Args_... args) {
  if (path_type_case() != kUriFolder) {
    clear_path_type();

    set_has_uri_folder();
    _impl_.path_type_.uri_folder_.InitDefault();
  }
  _impl_.path_type_.uri_folder_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::mutable_uri_folder() {
  std::string* _s = _internal_mutable_uri_folder();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  return _s;
}
inline const std::string& ReadRel_LocalFiles_FileOrFiles::_internal_uri_folder() const {
  if (path_type_case() != kUriFolder) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.path_type_.uri_folder_.Get();
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_uri_folder(const std::string& value) {
  if (path_type_case() != kUriFolder) {
    clear_path_type();

    set_has_uri_folder();
    _impl_.path_type_.uri_folder_.InitDefault();
  }


  _impl_.path_type_.uri_folder_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_uri_folder() {
  if (path_type_case() != kUriFolder) {
    clear_path_type();

    set_has_uri_folder();
    _impl_.path_type_.uri_folder_.InitDefault();
  }
  return _impl_.path_type_.uri_folder_.Mutable( GetArenaForAllocation());
}
inline std::string* ReadRel_LocalFiles_FileOrFiles::release_uri_folder() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
  if (path_type_case() != kUriFolder) {
    return nullptr;
  }
  clear_has_path_type();
  return _impl_.path_type_.uri_folder_.Release();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_allocated_uri_folder(std::string* value) {
  if (has_path_type()) {
    clear_path_type();
  }
  if (value != nullptr) {
    set_has_uri_folder();
    _impl_.path_type_.uri_folder_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.uri_folder)
}

// uint64 partition_index = 6 [json_name = "partitionIndex"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_partition_index() {
  _impl_.partition_index_ = ::uint64_t{0u};
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::partition_index() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.partition_index)
  return _internal_partition_index();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_partition_index(::uint64_t value) {
  _internal_set_partition_index(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.partition_index)
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_partition_index() const {
  return _impl_.partition_index_;
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_partition_index(::uint64_t value) {
  ;
  _impl_.partition_index_ = value;
}

// uint64 start = 7 [json_name = "start"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_start() {
  _impl_.start_ = ::uint64_t{0u};
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::start() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.start)
  return _internal_start();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.start)
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_start() const {
  return _impl_.start_;
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_start(::uint64_t value) {
  ;
  _impl_.start_ = value;
}

// uint64 length = 8 [json_name = "length"];
inline void ReadRel_LocalFiles_FileOrFiles::clear_length() {
  _impl_.length_ = ::uint64_t{0u};
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::length() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.length)
  return _internal_length();
}
inline void ReadRel_LocalFiles_FileOrFiles::set_length(::uint64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:substrait.ReadRel.LocalFiles.FileOrFiles.length)
}
inline ::uint64_t ReadRel_LocalFiles_FileOrFiles::_internal_length() const {
  return _impl_.length_;
}
inline void ReadRel_LocalFiles_FileOrFiles::_internal_set_length(::uint64_t value) {
  ;
  _impl_.length_ = value;
}

// .substrait.ReadRel.LocalFiles.FileOrFiles.ParquetReadOptions parquet = 9 [json_name = "parquet"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_parquet() const {
  return file_format_case() == kParquet;
}
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_parquet() const {
  return file_format_case() == kParquet;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_parquet() {
  _impl_._oneof_case_[1] = kParquet;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_parquet() {
  if (file_format_case() == kParquet) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_format_.parquet_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::release_parquet() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
  if (file_format_case() == kParquet) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* temp = _impl_.file_format_.parquet_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_format_.parquet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_parquet() const {
  return file_format_case() == kParquet
      ? *_impl_.file_format_.parquet_
      : reinterpret_cast<::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions&>(::substrait::_ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions& ReadRel_LocalFiles_FileOrFiles::parquet() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
  return _internal_parquet();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_parquet() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
  if (file_format_case() == kParquet) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* temp = _impl_.file_format_.parquet_;
    _impl_.file_format_.parquet_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_parquet(::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* parquet) {
  clear_file_format();
  if (parquet) {
    set_has_parquet();
    _impl_.file_format_.parquet_ = parquet;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_parquet() {
  if (file_format_case() != kParquet) {
    clear_file_format();
    set_has_parquet();
    _impl_.file_format_.parquet_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions >(GetArenaForAllocation());
  }
  return _impl_.file_format_.parquet_;
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_parquet() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ParquetReadOptions* _msg = _internal_mutable_parquet();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.parquet)
  return _msg;
}

// .substrait.ReadRel.LocalFiles.FileOrFiles.ArrowReadOptions arrow = 10 [json_name = "arrow"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_arrow() const {
  return file_format_case() == kArrow;
}
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_arrow() const {
  return file_format_case() == kArrow;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_arrow() {
  _impl_._oneof_case_[1] = kArrow;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_arrow() {
  if (file_format_case() == kArrow) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_format_.arrow_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::release_arrow() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
  if (file_format_case() == kArrow) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* temp = _impl_.file_format_.arrow_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_format_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_arrow() const {
  return file_format_case() == kArrow
      ? *_impl_.file_format_.arrow_
      : reinterpret_cast<::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions&>(::substrait::_ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions& ReadRel_LocalFiles_FileOrFiles::arrow() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
  return _internal_arrow();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_arrow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
  if (file_format_case() == kArrow) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* temp = _impl_.file_format_.arrow_;
    _impl_.file_format_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_arrow(::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* arrow) {
  clear_file_format();
  if (arrow) {
    set_has_arrow();
    _impl_.file_format_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_arrow() {
  if (file_format_case() != kArrow) {
    clear_file_format();
    set_has_arrow();
    _impl_.file_format_.arrow_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions >(GetArenaForAllocation());
  }
  return _impl_.file_format_.arrow_;
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_arrow() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles_ArrowReadOptions* _msg = _internal_mutable_arrow();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.arrow)
  return _msg;
}

// .substrait.ReadRel.LocalFiles.FileOrFiles.OrcReadOptions orc = 11 [json_name = "orc"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_orc() const {
  return file_format_case() == kOrc;
}
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_orc() const {
  return file_format_case() == kOrc;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_orc() {
  _impl_._oneof_case_[1] = kOrc;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_orc() {
  if (file_format_case() == kOrc) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_format_.orc_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::release_orc() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
  if (file_format_case() == kOrc) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* temp = _impl_.file_format_.orc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_format_.orc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_orc() const {
  return file_format_case() == kOrc
      ? *_impl_.file_format_.orc_
      : reinterpret_cast<::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions&>(::substrait::_ReadRel_LocalFiles_FileOrFiles_OrcReadOptions_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions& ReadRel_LocalFiles_FileOrFiles::orc() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
  return _internal_orc();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_orc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
  if (file_format_case() == kOrc) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* temp = _impl_.file_format_.orc_;
    _impl_.file_format_.orc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_orc(::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* orc) {
  clear_file_format();
  if (orc) {
    set_has_orc();
    _impl_.file_format_.orc_ = orc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_orc() {
  if (file_format_case() != kOrc) {
    clear_file_format();
    set_has_orc();
    _impl_.file_format_.orc_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions >(GetArenaForAllocation());
  }
  return _impl_.file_format_.orc_;
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_orc() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles_OrcReadOptions* _msg = _internal_mutable_orc();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.orc)
  return _msg;
}

// .google.protobuf.Any extension = 12 [json_name = "extension"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_extension() const {
  return file_format_case() == kExtension;
}
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_extension() const {
  return file_format_case() == kExtension;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_extension() {
  _impl_._oneof_case_[1] = kExtension;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::release_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
  if (file_format_case() == kExtension) {
    clear_has_file_format();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.file_format_.extension_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_format_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_LocalFiles_FileOrFiles::_internal_extension() const {
  return file_format_case() == kExtension
      ? *_impl_.file_format_.extension_
      : reinterpret_cast<::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ReadRel_LocalFiles_FileOrFiles::extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
  return _internal_extension();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_extension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
  if (file_format_case() == kExtension) {
    clear_has_file_format();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.file_format_.extension_;
    _impl_.file_format_.extension_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_extension(::PROTOBUF_NAMESPACE_ID::Any* extension) {
  clear_file_format();
  if (extension) {
    set_has_extension();
    _impl_.file_format_.extension_ = extension;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_extension() {
  if (file_format_case() != kExtension) {
    clear_file_format();
    set_has_extension();
    _impl_.file_format_.extension_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return _impl_.file_format_.extension_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ReadRel_LocalFiles_FileOrFiles::mutable_extension() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.extension)
  return _msg;
}

// .substrait.ReadRel.LocalFiles.FileOrFiles.DwrfReadOptions dwrf = 13 [json_name = "dwrf"];
inline bool ReadRel_LocalFiles_FileOrFiles::has_dwrf() const {
  return file_format_case() == kDwrf;
}
inline bool ReadRel_LocalFiles_FileOrFiles::_internal_has_dwrf() const {
  return file_format_case() == kDwrf;
}
inline void ReadRel_LocalFiles_FileOrFiles::set_has_dwrf() {
  _impl_._oneof_case_[1] = kDwrf;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_dwrf() {
  if (file_format_case() == kDwrf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.file_format_.dwrf_;
    }
    clear_has_file_format();
  }
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::release_dwrf() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
  if (file_format_case() == kDwrf) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* temp = _impl_.file_format_.dwrf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.file_format_.dwrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& ReadRel_LocalFiles_FileOrFiles::_internal_dwrf() const {
  return file_format_case() == kDwrf
      ? *_impl_.file_format_.dwrf_
      : reinterpret_cast<::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions&>(::substrait::_ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions& ReadRel_LocalFiles_FileOrFiles::dwrf() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
  return _internal_dwrf();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::unsafe_arena_release_dwrf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
  if (file_format_case() == kDwrf) {
    clear_has_file_format();
    ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* temp = _impl_.file_format_.dwrf_;
    _impl_.file_format_.dwrf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel_LocalFiles_FileOrFiles::unsafe_arena_set_allocated_dwrf(::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* dwrf) {
  clear_file_format();
  if (dwrf) {
    set_has_dwrf();
    _impl_.file_format_.dwrf_ = dwrf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::_internal_mutable_dwrf() {
  if (file_format_case() != kDwrf) {
    clear_file_format();
    set_has_dwrf();
    _impl_.file_format_.dwrf_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions >(GetArenaForAllocation());
  }
  return _impl_.file_format_.dwrf_;
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* ReadRel_LocalFiles_FileOrFiles::mutable_dwrf() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles_DwrfReadOptions* _msg = _internal_mutable_dwrf();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.FileOrFiles.dwrf)
  return _msg;
}

inline bool ReadRel_LocalFiles_FileOrFiles::has_path_type() const {
  return path_type_case() != PATH_TYPE_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_path_type() {
  _impl_._oneof_case_[0] = PATH_TYPE_NOT_SET;
}
inline bool ReadRel_LocalFiles_FileOrFiles::has_file_format() const {
  return file_format_case() != FILE_FORMAT_NOT_SET;
}
inline void ReadRel_LocalFiles_FileOrFiles::clear_has_file_format() {
  _impl_._oneof_case_[1] = FILE_FORMAT_NOT_SET;
}
inline ReadRel_LocalFiles_FileOrFiles::PathTypeCase ReadRel_LocalFiles_FileOrFiles::path_type_case() const {
  return ReadRel_LocalFiles_FileOrFiles::PathTypeCase(_impl_._oneof_case_[0]);
}
inline ReadRel_LocalFiles_FileOrFiles::FileFormatCase ReadRel_LocalFiles_FileOrFiles::file_format_case() const {
  return ReadRel_LocalFiles_FileOrFiles::FileFormatCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// ReadRel_LocalFiles

// repeated .substrait.ReadRel.LocalFiles.FileOrFiles items = 1 [json_name = "items"];
inline int ReadRel_LocalFiles::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int ReadRel_LocalFiles::items_size() const {
  return _internal_items_size();
}
inline void ReadRel_LocalFiles::clear_items() {
  _internal_mutable_items()->Clear();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.items)
  return _internal_mutable_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >*
ReadRel_LocalFiles::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ReadRel.LocalFiles.items)
  return _internal_mutable_items();
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::_internal_items(int index) const {
  return _internal_items().Get(index);
}
inline const ::substrait::ReadRel_LocalFiles_FileOrFiles& ReadRel_LocalFiles::items(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.items)
  return _internal_items(index);
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::_internal_add_items() {
  return _internal_mutable_items()->Add();
}
inline ::substrait::ReadRel_LocalFiles_FileOrFiles* ReadRel_LocalFiles::add_items() {
  ::substrait::ReadRel_LocalFiles_FileOrFiles* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:substrait.ReadRel.LocalFiles.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ReadRel_LocalFiles_FileOrFiles >&
ReadRel_LocalFiles::items() const {
  // @@protoc_insertion_point(field_list:substrait.ReadRel.LocalFiles.items)
  return _internal_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ReadRel_LocalFiles_FileOrFiles>&
ReadRel_LocalFiles::_internal_items() const {
  return _impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ReadRel_LocalFiles_FileOrFiles>*
ReadRel_LocalFiles::_internal_mutable_items() {
  return &_impl_.items_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel_LocalFiles::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_LocalFiles::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel_LocalFiles::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.LocalFiles.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel_LocalFiles::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.LocalFiles.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.LocalFiles.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel_LocalFiles::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.LocalFiles.advanced_extension)
  return _msg;
}
inline void ReadRel_LocalFiles::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.LocalFiles.advanced_extension)
}

// -------------------------------------------------------------------

// ReadRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ReadRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ReadRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ReadRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ReadRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.common)
  return _internal_common();
}
inline void ReadRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.common)
}
inline ::substrait::RelCommon* ReadRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ReadRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ReadRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ReadRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.common)
  return _msg;
}
inline void ReadRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.common)
}

// .substrait.NamedStruct base_schema = 2 [json_name = "baseSchema"];
inline bool ReadRel::has_base_schema() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_schema_ != nullptr);
  return value;
}
inline const ::substrait::NamedStruct& ReadRel::_internal_base_schema() const {
  const ::substrait::NamedStruct* p = _impl_.base_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::NamedStruct&>(
      ::substrait::_NamedStruct_default_instance_);
}
inline const ::substrait::NamedStruct& ReadRel::base_schema() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.base_schema)
  return _internal_base_schema();
}
inline void ReadRel::unsafe_arena_set_allocated_base_schema(
    ::substrait::NamedStruct* base_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_schema_);
  }
  _impl_.base_schema_ = base_schema;
  if (base_schema) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.base_schema)
}
inline ::substrait::NamedStruct* ReadRel::release_base_schema() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::NamedStruct* temp = _impl_.base_schema_;
  _impl_.base_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::NamedStruct* ReadRel::unsafe_arena_release_base_schema() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.base_schema)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::NamedStruct* temp = _impl_.base_schema_;
  _impl_.base_schema_ = nullptr;
  return temp;
}
inline ::substrait::NamedStruct* ReadRel::_internal_mutable_base_schema() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.base_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::NamedStruct>(GetArenaForAllocation());
    _impl_.base_schema_ = p;
  }
  return _impl_.base_schema_;
}
inline ::substrait::NamedStruct* ReadRel::mutable_base_schema() {
  ::substrait::NamedStruct* _msg = _internal_mutable_base_schema();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.base_schema)
  return _msg;
}
inline void ReadRel::set_allocated_base_schema(::substrait::NamedStruct* base_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_schema_);
  }
  if (base_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema));
    if (message_arena != submessage_arena) {
      base_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_schema, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.base_schema_ = base_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.base_schema)
}

// .substrait.Expression filter = 3 [json_name = "filter"];
inline bool ReadRel::has_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_ != nullptr);
  return value;
}
inline void ReadRel::clear_filter() {
  if (_impl_.filter_ != nullptr) _impl_.filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Expression& ReadRel::_internal_filter() const {
  const ::substrait::Expression* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ReadRel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.filter)
  return _internal_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_filter(
    ::substrait::Expression* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = filter;
  if (filter) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.filter)
}
inline ::substrait::Expression* ReadRel::release_filter() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Expression* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* ReadRel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.filter)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Expression* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* ReadRel::_internal_mutable_filter() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.filter_ = p;
  }
  return _impl_.filter_;
}
inline ::substrait::Expression* ReadRel::mutable_filter() {
  ::substrait::Expression* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.filter)
  return _msg;
}
inline void ReadRel::set_allocated_filter(::substrait::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.filter)
}

// .substrait.Expression best_effort_filter = 11 [json_name = "bestEffortFilter"];
inline bool ReadRel::has_best_effort_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.best_effort_filter_ != nullptr);
  return value;
}
inline void ReadRel::clear_best_effort_filter() {
  if (_impl_.best_effort_filter_ != nullptr) _impl_.best_effort_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::substrait::Expression& ReadRel::_internal_best_effort_filter() const {
  const ::substrait::Expression* p = _impl_.best_effort_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ReadRel::best_effort_filter() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.best_effort_filter)
  return _internal_best_effort_filter();
}
inline void ReadRel::unsafe_arena_set_allocated_best_effort_filter(
    ::substrait::Expression* best_effort_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.best_effort_filter_);
  }
  _impl_.best_effort_filter_ = best_effort_filter;
  if (best_effort_filter) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.best_effort_filter)
}
inline ::substrait::Expression* ReadRel::release_best_effort_filter() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::substrait::Expression* temp = _impl_.best_effort_filter_;
  _impl_.best_effort_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* ReadRel::unsafe_arena_release_best_effort_filter() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.best_effort_filter)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::substrait::Expression* temp = _impl_.best_effort_filter_;
  _impl_.best_effort_filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* ReadRel::_internal_mutable_best_effort_filter() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.best_effort_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.best_effort_filter_ = p;
  }
  return _impl_.best_effort_filter_;
}
inline ::substrait::Expression* ReadRel::mutable_best_effort_filter() {
  ::substrait::Expression* _msg = _internal_mutable_best_effort_filter();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.best_effort_filter)
  return _msg;
}
inline void ReadRel::set_allocated_best_effort_filter(::substrait::Expression* best_effort_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.best_effort_filter_;
  }
  if (best_effort_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(best_effort_filter);
    if (message_arena != submessage_arena) {
      best_effort_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, best_effort_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.best_effort_filter_ = best_effort_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.best_effort_filter)
}

// .substrait.Expression.MaskExpression projection = 4 [json_name = "projection"];
inline bool ReadRel::has_projection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projection_ != nullptr);
  return value;
}
inline void ReadRel::clear_projection() {
  if (_impl_.projection_ != nullptr) _impl_.projection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::substrait::Expression_MaskExpression& ReadRel::_internal_projection() const {
  const ::substrait::Expression_MaskExpression* p = _impl_.projection_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression&>(
      ::substrait::_Expression_MaskExpression_default_instance_);
}
inline const ::substrait::Expression_MaskExpression& ReadRel::projection() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.projection)
  return _internal_projection();
}
inline void ReadRel::unsafe_arena_set_allocated_projection(
    ::substrait::Expression_MaskExpression* projection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projection_);
  }
  _impl_.projection_ = projection;
  if (projection) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.projection)
}
inline ::substrait::Expression_MaskExpression* ReadRel::release_projection() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression_MaskExpression* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression* ReadRel::unsafe_arena_release_projection() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.projection)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression_MaskExpression* temp = _impl_.projection_;
  _impl_.projection_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression* ReadRel::_internal_mutable_projection() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.projection_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression>(GetArenaForAllocation());
    _impl_.projection_ = p;
  }
  return _impl_.projection_;
}
inline ::substrait::Expression_MaskExpression* ReadRel::mutable_projection() {
  ::substrait::Expression_MaskExpression* _msg = _internal_mutable_projection();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.projection)
  return _msg;
}
inline void ReadRel::set_allocated_projection(::substrait::Expression_MaskExpression* projection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.projection_;
  }
  if (projection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(projection);
    if (message_arena != submessage_arena) {
      projection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.projection_ = projection;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.projection)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ReadRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ReadRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ReadRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ReadRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.advanced_extension)
  return _msg;
}
inline void ReadRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ReadRel.advanced_extension)
}

// .substrait.ReadRel.VirtualTable virtual_table = 5 [json_name = "virtualTable"];
inline bool ReadRel::has_virtual_table() const {
  return read_type_case() == kVirtualTable;
}
inline bool ReadRel::_internal_has_virtual_table() const {
  return read_type_case() == kVirtualTable;
}
inline void ReadRel::set_has_virtual_table() {
  _impl_._oneof_case_[0] = kVirtualTable;
}
inline void ReadRel::clear_virtual_table() {
  if (read_type_case() == kVirtualTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.read_type_.virtual_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::release_virtual_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.virtual_table)
  if (read_type_case() == kVirtualTable) {
    clear_has_read_type();
    ::substrait::ReadRel_VirtualTable* temp = _impl_.read_type_.virtual_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_VirtualTable& ReadRel::_internal_virtual_table() const {
  return read_type_case() == kVirtualTable
      ? *_impl_.read_type_.virtual_table_
      : reinterpret_cast<::substrait::ReadRel_VirtualTable&>(::substrait::_ReadRel_VirtualTable_default_instance_);
}
inline const ::substrait::ReadRel_VirtualTable& ReadRel::virtual_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.virtual_table)
  return _internal_virtual_table();
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::unsafe_arena_release_virtual_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.virtual_table)
  if (read_type_case() == kVirtualTable) {
    clear_has_read_type();
    ::substrait::ReadRel_VirtualTable* temp = _impl_.read_type_.virtual_table_;
    _impl_.read_type_.virtual_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_virtual_table(::substrait::ReadRel_VirtualTable* virtual_table) {
  clear_read_type();
  if (virtual_table) {
    set_has_virtual_table();
    _impl_.read_type_.virtual_table_ = virtual_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.virtual_table)
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::_internal_mutable_virtual_table() {
  if (read_type_case() != kVirtualTable) {
    clear_read_type();
    set_has_virtual_table();
    _impl_.read_type_.virtual_table_ = CreateMaybeMessage< ::substrait::ReadRel_VirtualTable >(GetArenaForAllocation());
  }
  return _impl_.read_type_.virtual_table_;
}
inline ::substrait::ReadRel_VirtualTable* ReadRel::mutable_virtual_table() {
  ::substrait::ReadRel_VirtualTable* _msg = _internal_mutable_virtual_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.virtual_table)
  return _msg;
}

// .substrait.ReadRel.LocalFiles local_files = 6 [json_name = "localFiles"];
inline bool ReadRel::has_local_files() const {
  return read_type_case() == kLocalFiles;
}
inline bool ReadRel::_internal_has_local_files() const {
  return read_type_case() == kLocalFiles;
}
inline void ReadRel::set_has_local_files() {
  _impl_._oneof_case_[0] = kLocalFiles;
}
inline void ReadRel::clear_local_files() {
  if (read_type_case() == kLocalFiles) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.read_type_.local_files_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::release_local_files() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.local_files)
  if (read_type_case() == kLocalFiles) {
    clear_has_read_type();
    ::substrait::ReadRel_LocalFiles* temp = _impl_.read_type_.local_files_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_LocalFiles& ReadRel::_internal_local_files() const {
  return read_type_case() == kLocalFiles
      ? *_impl_.read_type_.local_files_
      : reinterpret_cast<::substrait::ReadRel_LocalFiles&>(::substrait::_ReadRel_LocalFiles_default_instance_);
}
inline const ::substrait::ReadRel_LocalFiles& ReadRel::local_files() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.local_files)
  return _internal_local_files();
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::unsafe_arena_release_local_files() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.local_files)
  if (read_type_case() == kLocalFiles) {
    clear_has_read_type();
    ::substrait::ReadRel_LocalFiles* temp = _impl_.read_type_.local_files_;
    _impl_.read_type_.local_files_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_local_files(::substrait::ReadRel_LocalFiles* local_files) {
  clear_read_type();
  if (local_files) {
    set_has_local_files();
    _impl_.read_type_.local_files_ = local_files;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.local_files)
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::_internal_mutable_local_files() {
  if (read_type_case() != kLocalFiles) {
    clear_read_type();
    set_has_local_files();
    _impl_.read_type_.local_files_ = CreateMaybeMessage< ::substrait::ReadRel_LocalFiles >(GetArenaForAllocation());
  }
  return _impl_.read_type_.local_files_;
}
inline ::substrait::ReadRel_LocalFiles* ReadRel::mutable_local_files() {
  ::substrait::ReadRel_LocalFiles* _msg = _internal_mutable_local_files();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.local_files)
  return _msg;
}

// .substrait.ReadRel.NamedTable named_table = 7 [json_name = "namedTable"];
inline bool ReadRel::has_named_table() const {
  return read_type_case() == kNamedTable;
}
inline bool ReadRel::_internal_has_named_table() const {
  return read_type_case() == kNamedTable;
}
inline void ReadRel::set_has_named_table() {
  _impl_._oneof_case_[0] = kNamedTable;
}
inline void ReadRel::clear_named_table() {
  if (read_type_case() == kNamedTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.read_type_.named_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_NamedTable* ReadRel::release_named_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.named_table)
  if (read_type_case() == kNamedTable) {
    clear_has_read_type();
    ::substrait::ReadRel_NamedTable* temp = _impl_.read_type_.named_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_NamedTable& ReadRel::_internal_named_table() const {
  return read_type_case() == kNamedTable
      ? *_impl_.read_type_.named_table_
      : reinterpret_cast<::substrait::ReadRel_NamedTable&>(::substrait::_ReadRel_NamedTable_default_instance_);
}
inline const ::substrait::ReadRel_NamedTable& ReadRel::named_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.named_table)
  return _internal_named_table();
}
inline ::substrait::ReadRel_NamedTable* ReadRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.named_table)
  if (read_type_case() == kNamedTable) {
    clear_has_read_type();
    ::substrait::ReadRel_NamedTable* temp = _impl_.read_type_.named_table_;
    _impl_.read_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_named_table(::substrait::ReadRel_NamedTable* named_table) {
  clear_read_type();
  if (named_table) {
    set_has_named_table();
    _impl_.read_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.named_table)
}
inline ::substrait::ReadRel_NamedTable* ReadRel::_internal_mutable_named_table() {
  if (read_type_case() != kNamedTable) {
    clear_read_type();
    set_has_named_table();
    _impl_.read_type_.named_table_ = CreateMaybeMessage< ::substrait::ReadRel_NamedTable >(GetArenaForAllocation());
  }
  return _impl_.read_type_.named_table_;
}
inline ::substrait::ReadRel_NamedTable* ReadRel::mutable_named_table() {
  ::substrait::ReadRel_NamedTable* _msg = _internal_mutable_named_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.named_table)
  return _msg;
}

// .substrait.ReadRel.ExtensionTable extension_table = 8 [json_name = "extensionTable"];
inline bool ReadRel::has_extension_table() const {
  return read_type_case() == kExtensionTable;
}
inline bool ReadRel::_internal_has_extension_table() const {
  return read_type_case() == kExtensionTable;
}
inline void ReadRel::set_has_extension_table() {
  _impl_._oneof_case_[0] = kExtensionTable;
}
inline void ReadRel::clear_extension_table() {
  if (read_type_case() == kExtensionTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.read_type_.extension_table_;
    }
    clear_has_read_type();
  }
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::release_extension_table() {
  // @@protoc_insertion_point(field_release:substrait.ReadRel.extension_table)
  if (read_type_case() == kExtensionTable) {
    clear_has_read_type();
    ::substrait::ReadRel_ExtensionTable* temp = _impl_.read_type_.extension_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel_ExtensionTable& ReadRel::_internal_extension_table() const {
  return read_type_case() == kExtensionTable
      ? *_impl_.read_type_.extension_table_
      : reinterpret_cast<::substrait::ReadRel_ExtensionTable&>(::substrait::_ReadRel_ExtensionTable_default_instance_);
}
inline const ::substrait::ReadRel_ExtensionTable& ReadRel::extension_table() const {
  // @@protoc_insertion_point(field_get:substrait.ReadRel.extension_table)
  return _internal_extension_table();
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::unsafe_arena_release_extension_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ReadRel.extension_table)
  if (read_type_case() == kExtensionTable) {
    clear_has_read_type();
    ::substrait::ReadRel_ExtensionTable* temp = _impl_.read_type_.extension_table_;
    _impl_.read_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ReadRel::unsafe_arena_set_allocated_extension_table(::substrait::ReadRel_ExtensionTable* extension_table) {
  clear_read_type();
  if (extension_table) {
    set_has_extension_table();
    _impl_.read_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ReadRel.extension_table)
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::_internal_mutable_extension_table() {
  if (read_type_case() != kExtensionTable) {
    clear_read_type();
    set_has_extension_table();
    _impl_.read_type_.extension_table_ = CreateMaybeMessage< ::substrait::ReadRel_ExtensionTable >(GetArenaForAllocation());
  }
  return _impl_.read_type_.extension_table_;
}
inline ::substrait::ReadRel_ExtensionTable* ReadRel::mutable_extension_table() {
  ::substrait::ReadRel_ExtensionTable* _msg = _internal_mutable_extension_table();
  // @@protoc_insertion_point(field_mutable:substrait.ReadRel.extension_table)
  return _msg;
}

inline bool ReadRel::has_read_type() const {
  return read_type_case() != READ_TYPE_NOT_SET;
}
inline void ReadRel::clear_has_read_type() {
  _impl_._oneof_case_[0] = READ_TYPE_NOT_SET;
}
inline ReadRel::ReadTypeCase ReadRel::read_type_case() const {
  return ReadRel::ReadTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProjectRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ProjectRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ProjectRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ProjectRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ProjectRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.common)
  return _internal_common();
}
inline void ProjectRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.common)
}
inline ::substrait::RelCommon* ProjectRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ProjectRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ProjectRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ProjectRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.common)
  return _msg;
}
inline void ProjectRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool ProjectRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void ProjectRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& ProjectRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& ProjectRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.input)
  return _internal_input();
}
inline void ProjectRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.input)
}
inline ::substrait::Rel* ProjectRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* ProjectRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* ProjectRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* ProjectRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.input)
  return _msg;
}
inline void ProjectRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.input)
}

// repeated .substrait.Expression expressions = 3 [json_name = "expressions"];
inline int ProjectRel::_internal_expressions_size() const {
  return _impl_.expressions_.size();
}
inline int ProjectRel::expressions_size() const {
  return _internal_expressions_size();
}
inline void ProjectRel::clear_expressions() {
  _internal_mutable_expressions()->Clear();
}
inline ::substrait::Expression* ProjectRel::mutable_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.expressions)
  return _internal_mutable_expressions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
ProjectRel::mutable_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ProjectRel.expressions)
  return _internal_mutable_expressions();
}
inline const ::substrait::Expression& ProjectRel::_internal_expressions(int index) const {
  return _internal_expressions().Get(index);
}
inline const ::substrait::Expression& ProjectRel::expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.expressions)
  return _internal_expressions(index);
}
inline ::substrait::Expression* ProjectRel::_internal_add_expressions() {
  return _internal_mutable_expressions()->Add();
}
inline ::substrait::Expression* ProjectRel::add_expressions() {
  ::substrait::Expression* _add = _internal_add_expressions();
  // @@protoc_insertion_point(field_add:substrait.ProjectRel.expressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
ProjectRel::expressions() const {
  // @@protoc_insertion_point(field_list:substrait.ProjectRel.expressions)
  return _internal_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
ProjectRel::_internal_expressions() const {
  return _impl_.expressions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
ProjectRel::_internal_mutable_expressions() {
  return &_impl_.expressions_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ProjectRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& ProjectRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ProjectRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ProjectRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ProjectRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ProjectRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ProjectRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ProjectRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ProjectRel.advanced_extension)
  return _msg;
}
inline void ProjectRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ProjectRel.advanced_extension)
}

// -------------------------------------------------------------------

// JoinRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool JoinRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void JoinRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& JoinRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& JoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.common)
  return _internal_common();
}
inline void JoinRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.common)
}
inline ::substrait::RelCommon* JoinRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* JoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* JoinRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* JoinRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.common)
  return _msg;
}
inline void JoinRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool JoinRel::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_ != nullptr);
  return value;
}
inline void JoinRel::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& JoinRel::_internal_left() const {
  const ::substrait::Rel* p = _impl_.left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& JoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.left)
  return _internal_left();
}
inline void JoinRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_);
  }
  _impl_.left_ = left;
  if (left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.left)
}
inline ::substrait::Rel* JoinRel::release_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* JoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* JoinRel::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.left_ = p;
  }
  return _impl_.left_;
}
inline ::substrait::Rel* JoinRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.left)
  return _msg;
}
inline void JoinRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool JoinRel::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void JoinRel::clear_right() {
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Rel& JoinRel::_internal_right() const {
  const ::substrait::Rel* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& JoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.right)
  return _internal_right();
}
inline void JoinRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.right)
}
inline ::substrait::Rel* JoinRel::release_right() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* JoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.right)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* JoinRel::_internal_mutable_right() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::substrait::Rel* JoinRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.right)
  return _msg;
}
inline void JoinRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.right)
}

// .substrait.Expression expression = 4 [json_name = "expression"];
inline bool JoinRel::has_expression() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expression_ != nullptr);
  return value;
}
inline void JoinRel::clear_expression() {
  if (_impl_.expression_ != nullptr) _impl_.expression_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::substrait::Expression& JoinRel::_internal_expression() const {
  const ::substrait::Expression* p = _impl_.expression_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& JoinRel::expression() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.expression)
  return _internal_expression();
}
inline void JoinRel::unsafe_arena_set_allocated_expression(
    ::substrait::Expression* expression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expression_);
  }
  _impl_.expression_ = expression;
  if (expression) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.expression)
}
inline ::substrait::Expression* JoinRel::release_expression() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* JoinRel::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.expression)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
  return temp;
}
inline ::substrait::Expression* JoinRel::_internal_mutable_expression() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.expression_ = p;
  }
  return _impl_.expression_;
}
inline ::substrait::Expression* JoinRel::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.expression)
  return _msg;
}
inline void JoinRel::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.expression)
}

// .substrait.Expression post_join_filter = 5 [json_name = "postJoinFilter"];
inline bool JoinRel::has_post_join_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_join_filter_ != nullptr);
  return value;
}
inline void JoinRel::clear_post_join_filter() {
  if (_impl_.post_join_filter_ != nullptr) _impl_.post_join_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::substrait::Expression& JoinRel::_internal_post_join_filter() const {
  const ::substrait::Expression* p = _impl_.post_join_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& JoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void JoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::Expression* post_join_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.post_join_filter_);
  }
  _impl_.post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.post_join_filter)
}
inline ::substrait::Expression* JoinRel::release_post_join_filter() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* JoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.post_join_filter)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* JoinRel::_internal_mutable_post_join_filter() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.post_join_filter_ = p;
  }
  return _impl_.post_join_filter_;
}
inline ::substrait::Expression* JoinRel::mutable_post_join_filter() {
  ::substrait::Expression* _msg = _internal_mutable_post_join_filter();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.post_join_filter)
  return _msg;
}
inline void JoinRel::set_allocated_post_join_filter(::substrait::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.post_join_filter)
}

// .substrait.JoinRel.JoinType type = 6 [json_name = "type"];
inline void JoinRel::clear_type() {
  _impl_.type_ = 0;
}
inline ::substrait::JoinRel_JoinType JoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.type)
  return _internal_type();
}
inline void JoinRel::set_type(::substrait::JoinRel_JoinType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.JoinRel.type)
}
inline ::substrait::JoinRel_JoinType JoinRel::_internal_type() const {
  return static_cast<::substrait::JoinRel_JoinType>(_impl_.type_);
}
inline void JoinRel::_internal_set_type(::substrait::JoinRel_JoinType value) {
  ;
  _impl_.type_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool JoinRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& JoinRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& JoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.JoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void JoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.JoinRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.JoinRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* JoinRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.JoinRel.advanced_extension)
  return _msg;
}
inline void JoinRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.JoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// CrossRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool CrossRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void CrossRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& CrossRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& CrossRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.common)
  return _internal_common();
}
inline void CrossRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.common)
}
inline ::substrait::RelCommon* CrossRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* CrossRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* CrossRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* CrossRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.common)
  return _msg;
}
inline void CrossRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool CrossRel::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_ != nullptr);
  return value;
}
inline void CrossRel::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& CrossRel::_internal_left() const {
  const ::substrait::Rel* p = _impl_.left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& CrossRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.left)
  return _internal_left();
}
inline void CrossRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_);
  }
  _impl_.left_ = left;
  if (left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.left)
}
inline ::substrait::Rel* CrossRel::release_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* CrossRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* CrossRel::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.left_ = p;
  }
  return _impl_.left_;
}
inline ::substrait::Rel* CrossRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.left)
  return _msg;
}
inline void CrossRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool CrossRel::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void CrossRel::clear_right() {
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Rel& CrossRel::_internal_right() const {
  const ::substrait::Rel* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& CrossRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.right)
  return _internal_right();
}
inline void CrossRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.right)
}
inline ::substrait::Rel* CrossRel::release_right() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* CrossRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.right)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* CrossRel::_internal_mutable_right() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::substrait::Rel* CrossRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.right)
  return _msg;
}
inline void CrossRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.right)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool CrossRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& CrossRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& CrossRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.CrossRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void CrossRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.CrossRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.CrossRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* CrossRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.CrossRel.advanced_extension)
  return _msg;
}
inline void CrossRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.CrossRel.advanced_extension)
}

// -------------------------------------------------------------------

// FetchRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool FetchRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void FetchRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& FetchRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& FetchRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.common)
  return _internal_common();
}
inline void FetchRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.common)
}
inline ::substrait::RelCommon* FetchRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* FetchRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* FetchRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* FetchRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.common)
  return _msg;
}
inline void FetchRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool FetchRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void FetchRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& FetchRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& FetchRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.input)
  return _internal_input();
}
inline void FetchRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.input)
}
inline ::substrait::Rel* FetchRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* FetchRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* FetchRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* FetchRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.input)
  return _msg;
}
inline void FetchRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.input)
}

// int64 offset = 3 [json_name = "offset"];
inline void FetchRel::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t FetchRel::offset() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.offset)
  return _internal_offset();
}
inline void FetchRel::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.FetchRel.offset)
}
inline ::int64_t FetchRel::_internal_offset() const {
  return _impl_.offset_;
}
inline void FetchRel::_internal_set_offset(::int64_t value) {
  ;
  _impl_.offset_ = value;
}

// int64 count = 4 [json_name = "count"];
inline void FetchRel::clear_count() {
  _impl_.count_ = ::int64_t{0};
}
inline ::int64_t FetchRel::count() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.count)
  return _internal_count();
}
inline void FetchRel::set_count(::int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:substrait.FetchRel.count)
}
inline ::int64_t FetchRel::_internal_count() const {
  return _impl_.count_;
}
inline void FetchRel::_internal_set_count(::int64_t value) {
  ;
  _impl_.count_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool FetchRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& FetchRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& FetchRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.FetchRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FetchRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FetchRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.FetchRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* FetchRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.FetchRel.advanced_extension)
  return _msg;
}
inline void FetchRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.FetchRel.advanced_extension)
}

// -------------------------------------------------------------------

// AggregateRel_Grouping

// repeated .substrait.Expression grouping_expressions = 1 [json_name = "groupingExpressions"];
inline int AggregateRel_Grouping::_internal_grouping_expressions_size() const {
  return _impl_.grouping_expressions_.size();
}
inline int AggregateRel_Grouping::grouping_expressions_size() const {
  return _internal_grouping_expressions_size();
}
inline void AggregateRel_Grouping::clear_grouping_expressions() {
  _internal_mutable_grouping_expressions()->Clear();
}
inline ::substrait::Expression* AggregateRel_Grouping::mutable_grouping_expressions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Grouping.grouping_expressions)
  return _internal_mutable_grouping_expressions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
AggregateRel_Grouping::mutable_grouping_expressions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.Grouping.grouping_expressions)
  return _internal_mutable_grouping_expressions();
}
inline const ::substrait::Expression& AggregateRel_Grouping::_internal_grouping_expressions(int index) const {
  return _internal_grouping_expressions().Get(index);
}
inline const ::substrait::Expression& AggregateRel_Grouping::grouping_expressions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Grouping.grouping_expressions)
  return _internal_grouping_expressions(index);
}
inline ::substrait::Expression* AggregateRel_Grouping::_internal_add_grouping_expressions() {
  return _internal_mutable_grouping_expressions()->Add();
}
inline ::substrait::Expression* AggregateRel_Grouping::add_grouping_expressions() {
  ::substrait::Expression* _add = _internal_add_grouping_expressions();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.Grouping.grouping_expressions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
AggregateRel_Grouping::grouping_expressions() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.Grouping.grouping_expressions)
  return _internal_grouping_expressions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
AggregateRel_Grouping::_internal_grouping_expressions() const {
  return _impl_.grouping_expressions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
AggregateRel_Grouping::_internal_mutable_grouping_expressions() {
  return &_impl_.grouping_expressions_;
}

// -------------------------------------------------------------------

// AggregateRel_Measure

// .substrait.AggregateFunction measure = 1 [json_name = "measure"];
inline bool AggregateRel_Measure::has_measure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.measure_ != nullptr);
  return value;
}
inline void AggregateRel_Measure::clear_measure() {
  if (_impl_.measure_ != nullptr) _impl_.measure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::AggregateFunction& AggregateRel_Measure::_internal_measure() const {
  const ::substrait::AggregateFunction* p = _impl_.measure_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::AggregateFunction&>(
      ::substrait::_AggregateFunction_default_instance_);
}
inline const ::substrait::AggregateFunction& AggregateRel_Measure::measure() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Measure.measure)
  return _internal_measure();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_measure(
    ::substrait::AggregateFunction* measure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.measure_);
  }
  _impl_.measure_ = measure;
  if (measure) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.Measure.measure)
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::release_measure() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::AggregateFunction* temp = _impl_.measure_;
  _impl_.measure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::unsafe_arena_release_measure() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.Measure.measure)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::AggregateFunction* temp = _impl_.measure_;
  _impl_.measure_ = nullptr;
  return temp;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::_internal_mutable_measure() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.measure_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::AggregateFunction>(GetArenaForAllocation());
    _impl_.measure_ = p;
  }
  return _impl_.measure_;
}
inline ::substrait::AggregateFunction* AggregateRel_Measure::mutable_measure() {
  ::substrait::AggregateFunction* _msg = _internal_mutable_measure();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Measure.measure)
  return _msg;
}
inline void AggregateRel_Measure::set_allocated_measure(::substrait::AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.measure_;
  }
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(measure);
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.Measure.measure)
}

// .substrait.Expression filter = 2 [json_name = "filter"];
inline bool AggregateRel_Measure::has_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filter_ != nullptr);
  return value;
}
inline void AggregateRel_Measure::clear_filter() {
  if (_impl_.filter_ != nullptr) _impl_.filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& AggregateRel_Measure::_internal_filter() const {
  const ::substrait::Expression* p = _impl_.filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& AggregateRel_Measure::filter() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.Measure.filter)
  return _internal_filter();
}
inline void AggregateRel_Measure::unsafe_arena_set_allocated_filter(
    ::substrait::Expression* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filter_);
  }
  _impl_.filter_ = filter;
  if (filter) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.Measure.filter)
}
inline ::substrait::Expression* AggregateRel_Measure::release_filter() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* AggregateRel_Measure::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.Measure.filter)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.filter_;
  _impl_.filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* AggregateRel_Measure::_internal_mutable_filter() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.filter_ = p;
  }
  return _impl_.filter_;
}
inline ::substrait::Expression* AggregateRel_Measure::mutable_filter() {
  ::substrait::Expression* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.Measure.filter)
  return _msg;
}
inline void AggregateRel_Measure::set_allocated_filter(::substrait::Expression* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.Measure.filter)
}

// -------------------------------------------------------------------

// AggregateRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool AggregateRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void AggregateRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& AggregateRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& AggregateRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.common)
  return _internal_common();
}
inline void AggregateRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.common)
}
inline ::substrait::RelCommon* AggregateRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* AggregateRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* AggregateRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* AggregateRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.common)
  return _msg;
}
inline void AggregateRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool AggregateRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void AggregateRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& AggregateRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& AggregateRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.input)
  return _internal_input();
}
inline void AggregateRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.input)
}
inline ::substrait::Rel* AggregateRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* AggregateRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* AggregateRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* AggregateRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.input)
  return _msg;
}
inline void AggregateRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.input)
}

// repeated .substrait.AggregateRel.Grouping groupings = 3 [json_name = "groupings"];
inline int AggregateRel::_internal_groupings_size() const {
  return _impl_.groupings_.size();
}
inline int AggregateRel::groupings_size() const {
  return _internal_groupings_size();
}
inline void AggregateRel::clear_groupings() {
  _internal_mutable_groupings()->Clear();
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::mutable_groupings(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.groupings)
  return _internal_mutable_groupings()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >*
AggregateRel::mutable_groupings() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.groupings)
  return _internal_mutable_groupings();
}
inline const ::substrait::AggregateRel_Grouping& AggregateRel::_internal_groupings(int index) const {
  return _internal_groupings().Get(index);
}
inline const ::substrait::AggregateRel_Grouping& AggregateRel::groupings(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.groupings)
  return _internal_groupings(index);
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::_internal_add_groupings() {
  return _internal_mutable_groupings()->Add();
}
inline ::substrait::AggregateRel_Grouping* AggregateRel::add_groupings() {
  ::substrait::AggregateRel_Grouping* _add = _internal_add_groupings();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.groupings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Grouping >&
AggregateRel::groupings() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.groupings)
  return _internal_groupings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Grouping>&
AggregateRel::_internal_groupings() const {
  return _impl_.groupings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Grouping>*
AggregateRel::_internal_mutable_groupings() {
  return &_impl_.groupings_;
}

// repeated .substrait.AggregateRel.Measure measures = 4 [json_name = "measures"];
inline int AggregateRel::_internal_measures_size() const {
  return _impl_.measures_.size();
}
inline int AggregateRel::measures_size() const {
  return _internal_measures_size();
}
inline void AggregateRel::clear_measures() {
  _internal_mutable_measures()->Clear();
}
inline ::substrait::AggregateRel_Measure* AggregateRel::mutable_measures(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.measures)
  return _internal_mutable_measures()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >*
AggregateRel::mutable_measures() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateRel.measures)
  return _internal_mutable_measures();
}
inline const ::substrait::AggregateRel_Measure& AggregateRel::_internal_measures(int index) const {
  return _internal_measures().Get(index);
}
inline const ::substrait::AggregateRel_Measure& AggregateRel::measures(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.measures)
  return _internal_measures(index);
}
inline ::substrait::AggregateRel_Measure* AggregateRel::_internal_add_measures() {
  return _internal_mutable_measures()->Add();
}
inline ::substrait::AggregateRel_Measure* AggregateRel::add_measures() {
  ::substrait::AggregateRel_Measure* _add = _internal_add_measures();
  // @@protoc_insertion_point(field_add:substrait.AggregateRel.measures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::AggregateRel_Measure >&
AggregateRel::measures() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateRel.measures)
  return _internal_measures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Measure>&
AggregateRel::_internal_measures() const {
  return _impl_.measures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::AggregateRel_Measure>*
AggregateRel::_internal_mutable_measures() {
  return &_impl_.measures_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool AggregateRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& AggregateRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& AggregateRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void AggregateRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.AggregateRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* AggregateRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateRel.advanced_extension)
  return _msg;
}
inline void AggregateRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateRel.advanced_extension)
}

// -------------------------------------------------------------------

// SortRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool SortRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void SortRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& SortRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& SortRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.common)
  return _internal_common();
}
inline void SortRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.common)
}
inline ::substrait::RelCommon* SortRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* SortRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* SortRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* SortRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.common)
  return _msg;
}
inline void SortRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool SortRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void SortRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& SortRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& SortRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.input)
  return _internal_input();
}
inline void SortRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.input)
}
inline ::substrait::Rel* SortRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* SortRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* SortRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* SortRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.input)
  return _msg;
}
inline void SortRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.input)
}

// repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
inline int SortRel::_internal_sorts_size() const {
  return _impl_.sorts_.size();
}
inline int SortRel::sorts_size() const {
  return _internal_sorts_size();
}
inline void SortRel::clear_sorts() {
  _internal_mutable_sorts()->Clear();
}
inline ::substrait::SortField* SortRel::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.sorts)
  return _internal_mutable_sorts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
SortRel::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.SortRel.sorts)
  return _internal_mutable_sorts();
}
inline const ::substrait::SortField& SortRel::_internal_sorts(int index) const {
  return _internal_sorts().Get(index);
}
inline const ::substrait::SortField& SortRel::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.sorts)
  return _internal_sorts(index);
}
inline ::substrait::SortField* SortRel::_internal_add_sorts() {
  return _internal_mutable_sorts()->Add();
}
inline ::substrait::SortField* SortRel::add_sorts() {
  ::substrait::SortField* _add = _internal_add_sorts();
  // @@protoc_insertion_point(field_add:substrait.SortRel.sorts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
SortRel::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.SortRel.sorts)
  return _internal_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>&
SortRel::_internal_sorts() const {
  return _impl_.sorts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>*
SortRel::_internal_mutable_sorts() {
  return &_impl_.sorts_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool SortRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& SortRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& SortRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.SortRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SortRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* SortRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.SortRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* SortRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.SortRel.advanced_extension)
  return _msg;
}
inline void SortRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortRel.advanced_extension)
}

// -------------------------------------------------------------------

// FilterRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool FilterRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void FilterRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& FilterRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& FilterRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.common)
  return _internal_common();
}
inline void FilterRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.common)
}
inline ::substrait::RelCommon* FilterRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* FilterRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* FilterRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* FilterRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.common)
  return _msg;
}
inline void FilterRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool FilterRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void FilterRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& FilterRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& FilterRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.input)
  return _internal_input();
}
inline void FilterRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.input)
}
inline ::substrait::Rel* FilterRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* FilterRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* FilterRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* FilterRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.input)
  return _msg;
}
inline void FilterRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.input)
}

// .substrait.Expression condition = 3 [json_name = "condition"];
inline bool FilterRel::has_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.condition_ != nullptr);
  return value;
}
inline void FilterRel::clear_condition() {
  if (_impl_.condition_ != nullptr) _impl_.condition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Expression& FilterRel::_internal_condition() const {
  const ::substrait::Expression* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& FilterRel::condition() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.condition)
  return _internal_condition();
}
inline void FilterRel::unsafe_arena_set_allocated_condition(
    ::substrait::Expression* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.condition)
}
inline ::substrait::Expression* FilterRel::release_condition() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Expression* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* FilterRel::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.condition)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Expression* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::substrait::Expression* FilterRel::_internal_mutable_condition() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::substrait::Expression* FilterRel::mutable_condition() {
  ::substrait::Expression* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.condition)
  return _msg;
}
inline void FilterRel::set_allocated_condition(::substrait::Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(condition);
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.condition)
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool FilterRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& FilterRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& FilterRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.FilterRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void FilterRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FilterRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.FilterRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* FilterRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.FilterRel.advanced_extension)
  return _msg;
}
inline void FilterRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.FilterRel.advanced_extension)
}

// -------------------------------------------------------------------

// SetRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool SetRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void SetRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& SetRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& SetRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.common)
  return _internal_common();
}
inline void SetRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SetRel.common)
}
inline ::substrait::RelCommon* SetRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* SetRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.SetRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* SetRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* SetRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.common)
  return _msg;
}
inline void SetRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.SetRel.common)
}

// repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
inline int SetRel::_internal_inputs_size() const {
  return _impl_.inputs_.size();
}
inline int SetRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void SetRel::clear_inputs() {
  _internal_mutable_inputs()->Clear();
}
inline ::substrait::Rel* SetRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.inputs)
  return _internal_mutable_inputs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
SetRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.SetRel.inputs)
  return _internal_mutable_inputs();
}
inline const ::substrait::Rel& SetRel::_internal_inputs(int index) const {
  return _internal_inputs().Get(index);
}
inline const ::substrait::Rel& SetRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::Rel* SetRel::_internal_add_inputs() {
  return _internal_mutable_inputs()->Add();
}
inline ::substrait::Rel* SetRel::add_inputs() {
  ::substrait::Rel* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:substrait.SetRel.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
SetRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.SetRel.inputs)
  return _internal_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>&
SetRel::_internal_inputs() const {
  return _impl_.inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>*
SetRel::_internal_mutable_inputs() {
  return &_impl_.inputs_;
}

// .substrait.SetRel.SetOp op = 3 [json_name = "op"];
inline void SetRel::clear_op() {
  _impl_.op_ = 0;
}
inline ::substrait::SetRel_SetOp SetRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.op)
  return _internal_op();
}
inline void SetRel::set_op(::substrait::SetRel_SetOp value) {
   _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.SetRel.op)
}
inline ::substrait::SetRel_SetOp SetRel::_internal_op() const {
  return static_cast<::substrait::SetRel_SetOp>(_impl_.op_);
}
inline void SetRel::_internal_set_op(::substrait::SetRel_SetOp value) {
  ;
  _impl_.op_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool SetRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& SetRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& SetRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.SetRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void SetRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SetRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* SetRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.SetRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* SetRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.SetRel.advanced_extension)
  return _msg;
}
inline void SetRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.SetRel.advanced_extension)
}

// -------------------------------------------------------------------

// ExtensionSingleRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionSingleRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ExtensionSingleRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ExtensionSingleRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionSingleRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.common)
  return _internal_common();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.common)
}
inline ::substrait::RelCommon* ExtensionSingleRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionSingleRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionSingleRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ExtensionSingleRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.common)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool ExtensionSingleRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void ExtensionSingleRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& ExtensionSingleRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& ExtensionSingleRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.input)
  return _internal_input();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.input)
}
inline ::substrait::Rel* ExtensionSingleRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* ExtensionSingleRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* ExtensionSingleRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* ExtensionSingleRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.input)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.input)
}

// .google.protobuf.Any detail = 3 [json_name = "detail"];
inline bool ExtensionSingleRel::has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detail_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionSingleRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionSingleRel.detail)
  return _internal_detail();
}
inline void ExtensionSingleRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionSingleRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::release_detail() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionSingleRel.detail)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionSingleRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionSingleRel.detail)
  return _msg;
}
inline void ExtensionSingleRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionSingleRel.detail)
}

// -------------------------------------------------------------------

// ExtensionLeafRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionLeafRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ExtensionLeafRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ExtensionLeafRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionLeafRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionLeafRel.common)
  return _internal_common();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionLeafRel.common)
}
inline ::substrait::RelCommon* ExtensionLeafRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionLeafRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionLeafRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionLeafRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ExtensionLeafRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionLeafRel.common)
  return _msg;
}
inline void ExtensionLeafRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionLeafRel.common)
}

// .google.protobuf.Any detail = 2 [json_name = "detail"];
inline bool ExtensionLeafRel::has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detail_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionLeafRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionLeafRel.detail)
  return _internal_detail();
}
inline void ExtensionLeafRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionLeafRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::release_detail() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionLeafRel.detail)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionLeafRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionLeafRel.detail)
  return _msg;
}
inline void ExtensionLeafRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionLeafRel.detail)
}

// -------------------------------------------------------------------

// ExtensionMultiRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExtensionMultiRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ExtensionMultiRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ExtensionMultiRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExtensionMultiRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.common)
  return _internal_common();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionMultiRel.common)
}
inline ::substrait::RelCommon* ExtensionMultiRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExtensionMultiRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionMultiRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExtensionMultiRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ExtensionMultiRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.common)
  return _msg;
}
inline void ExtensionMultiRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionMultiRel.common)
}

// repeated .substrait.Rel inputs = 2 [json_name = "inputs"];
inline int ExtensionMultiRel::_internal_inputs_size() const {
  return _impl_.inputs_.size();
}
inline int ExtensionMultiRel::inputs_size() const {
  return _internal_inputs_size();
}
inline void ExtensionMultiRel::clear_inputs() {
  _internal_mutable_inputs()->Clear();
}
inline ::substrait::Rel* ExtensionMultiRel::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.inputs)
  return _internal_mutable_inputs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >*
ExtensionMultiRel::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtensionMultiRel.inputs)
  return _internal_mutable_inputs();
}
inline const ::substrait::Rel& ExtensionMultiRel::_internal_inputs(int index) const {
  return _internal_inputs().Get(index);
}
inline const ::substrait::Rel& ExtensionMultiRel::inputs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.inputs)
  return _internal_inputs(index);
}
inline ::substrait::Rel* ExtensionMultiRel::_internal_add_inputs() {
  return _internal_mutable_inputs()->Add();
}
inline ::substrait::Rel* ExtensionMultiRel::add_inputs() {
  ::substrait::Rel* _add = _internal_add_inputs();
  // @@protoc_insertion_point(field_add:substrait.ExtensionMultiRel.inputs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Rel >&
ExtensionMultiRel::inputs() const {
  // @@protoc_insertion_point(field_list:substrait.ExtensionMultiRel.inputs)
  return _internal_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>&
ExtensionMultiRel::_internal_inputs() const {
  return _impl_.inputs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Rel>*
ExtensionMultiRel::_internal_mutable_inputs() {
  return &_impl_.inputs_;
}

// .google.protobuf.Any detail = 3 [json_name = "detail"];
inline bool ExtensionMultiRel::has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detail_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionMultiRel::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionMultiRel.detail)
  return _internal_detail();
}
inline void ExtensionMultiRel::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionMultiRel.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::release_detail() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionMultiRel.detail)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionMultiRel::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionMultiRel.detail)
  return _msg;
}
inline void ExtensionMultiRel::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionMultiRel.detail)
}

// -------------------------------------------------------------------

// ExchangeRel_ScatterFields

// repeated .substrait.Expression.FieldReference fields = 1 [json_name = "fields"];
inline int ExchangeRel_ScatterFields::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int ExchangeRel_ScatterFields::fields_size() const {
  return _internal_fields_size();
}
inline void ExchangeRel_ScatterFields::clear_fields() {
  _internal_mutable_fields()->Clear();
}
inline ::substrait::Expression_FieldReference* ExchangeRel_ScatterFields::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.ScatterFields.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
ExchangeRel_ScatterFields::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExchangeRel.ScatterFields.fields)
  return _internal_mutable_fields();
}
inline const ::substrait::Expression_FieldReference& ExchangeRel_ScatterFields::_internal_fields(int index) const {
  return _internal_fields().Get(index);
}
inline const ::substrait::Expression_FieldReference& ExchangeRel_ScatterFields::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.ScatterFields.fields)
  return _internal_fields(index);
}
inline ::substrait::Expression_FieldReference* ExchangeRel_ScatterFields::_internal_add_fields() {
  return _internal_mutable_fields()->Add();
}
inline ::substrait::Expression_FieldReference* ExchangeRel_ScatterFields::add_fields() {
  ::substrait::Expression_FieldReference* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:substrait.ExchangeRel.ScatterFields.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
ExchangeRel_ScatterFields::fields() const {
  // @@protoc_insertion_point(field_list:substrait.ExchangeRel.ScatterFields.fields)
  return _internal_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>&
ExchangeRel_ScatterFields::_internal_fields() const {
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>*
ExchangeRel_ScatterFields::_internal_mutable_fields() {
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// ExchangeRel_SingleBucketExpression

// .substrait.Expression expression = 1 [json_name = "expression"];
inline bool ExchangeRel_SingleBucketExpression::has_expression() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expression_ != nullptr);
  return value;
}
inline void ExchangeRel_SingleBucketExpression::clear_expression() {
  if (_impl_.expression_ != nullptr) _impl_.expression_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& ExchangeRel_SingleBucketExpression::_internal_expression() const {
  const ::substrait::Expression* p = _impl_.expression_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ExchangeRel_SingleBucketExpression::expression() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.SingleBucketExpression.expression)
  return _internal_expression();
}
inline void ExchangeRel_SingleBucketExpression::unsafe_arena_set_allocated_expression(
    ::substrait::Expression* expression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expression_);
  }
  _impl_.expression_ = expression;
  if (expression) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.SingleBucketExpression.expression)
}
inline ::substrait::Expression* ExchangeRel_SingleBucketExpression::release_expression() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* ExchangeRel_SingleBucketExpression::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.SingleBucketExpression.expression)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
  return temp;
}
inline ::substrait::Expression* ExchangeRel_SingleBucketExpression::_internal_mutable_expression() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.expression_ = p;
  }
  return _impl_.expression_;
}
inline ::substrait::Expression* ExchangeRel_SingleBucketExpression::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.SingleBucketExpression.expression)
  return _msg;
}
inline void ExchangeRel_SingleBucketExpression::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.SingleBucketExpression.expression)
}

// -------------------------------------------------------------------

// ExchangeRel_MultiBucketExpression

// .substrait.Expression expression = 1 [json_name = "expression"];
inline bool ExchangeRel_MultiBucketExpression::has_expression() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expression_ != nullptr);
  return value;
}
inline void ExchangeRel_MultiBucketExpression::clear_expression() {
  if (_impl_.expression_ != nullptr) _impl_.expression_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& ExchangeRel_MultiBucketExpression::_internal_expression() const {
  const ::substrait::Expression* p = _impl_.expression_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ExchangeRel_MultiBucketExpression::expression() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.MultiBucketExpression.expression)
  return _internal_expression();
}
inline void ExchangeRel_MultiBucketExpression::unsafe_arena_set_allocated_expression(
    ::substrait::Expression* expression) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expression_);
  }
  _impl_.expression_ = expression;
  if (expression) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.MultiBucketExpression.expression)
}
inline ::substrait::Expression* ExchangeRel_MultiBucketExpression::release_expression() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* ExchangeRel_MultiBucketExpression::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.MultiBucketExpression.expression)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expression_;
  _impl_.expression_ = nullptr;
  return temp;
}
inline ::substrait::Expression* ExchangeRel_MultiBucketExpression::_internal_mutable_expression() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.expression_ = p;
  }
  return _impl_.expression_;
}
inline ::substrait::Expression* ExchangeRel_MultiBucketExpression::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.MultiBucketExpression.expression)
  return _msg;
}
inline void ExchangeRel_MultiBucketExpression::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expression);
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.MultiBucketExpression.expression)
}

// bool constrained_to_count = 2 [json_name = "constrainedToCount"];
inline void ExchangeRel_MultiBucketExpression::clear_constrained_to_count() {
  _impl_.constrained_to_count_ = false;
}
inline bool ExchangeRel_MultiBucketExpression::constrained_to_count() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.MultiBucketExpression.constrained_to_count)
  return _internal_constrained_to_count();
}
inline void ExchangeRel_MultiBucketExpression::set_constrained_to_count(bool value) {
  _internal_set_constrained_to_count(value);
  // @@protoc_insertion_point(field_set:substrait.ExchangeRel.MultiBucketExpression.constrained_to_count)
}
inline bool ExchangeRel_MultiBucketExpression::_internal_constrained_to_count() const {
  return _impl_.constrained_to_count_;
}
inline void ExchangeRel_MultiBucketExpression::_internal_set_constrained_to_count(bool value) {
  ;
  _impl_.constrained_to_count_ = value;
}

// -------------------------------------------------------------------

// ExchangeRel_Broadcast

// -------------------------------------------------------------------

// ExchangeRel_RoundRobin

// bool exact = 1 [json_name = "exact"];
inline void ExchangeRel_RoundRobin::clear_exact() {
  _impl_.exact_ = false;
}
inline bool ExchangeRel_RoundRobin::exact() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.RoundRobin.exact)
  return _internal_exact();
}
inline void ExchangeRel_RoundRobin::set_exact(bool value) {
  _internal_set_exact(value);
  // @@protoc_insertion_point(field_set:substrait.ExchangeRel.RoundRobin.exact)
}
inline bool ExchangeRel_RoundRobin::_internal_exact() const {
  return _impl_.exact_;
}
inline void ExchangeRel_RoundRobin::_internal_set_exact(bool value) {
  ;
  _impl_.exact_ = value;
}

// -------------------------------------------------------------------

// ExchangeRel_ExchangeTarget

// repeated int32 partition_id = 1 [json_name = "partitionId"];
inline int ExchangeRel_ExchangeTarget::_internal_partition_id_size() const {
  return _impl_.partition_id_.size();
}
inline int ExchangeRel_ExchangeTarget::partition_id_size() const {
  return _internal_partition_id_size();
}
inline void ExchangeRel_ExchangeTarget::clear_partition_id() {
  _internal_mutable_partition_id()->Clear();
}
inline ::int32_t ExchangeRel_ExchangeTarget::partition_id(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_partition_id(index);
}
inline void ExchangeRel_ExchangeTarget::set_partition_id(int index, ::int32_t value) {
  _internal_mutable_partition_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:substrait.ExchangeRel.ExchangeTarget.partition_id)
}
inline void ExchangeRel_ExchangeTarget::add_partition_id(::int32_t value) {
  _internal_add_partition_id(value);
  // @@protoc_insertion_point(field_add:substrait.ExchangeRel.ExchangeTarget.partition_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ExchangeRel_ExchangeTarget::partition_id() const {
  // @@protoc_insertion_point(field_list:substrait.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_partition_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ExchangeRel_ExchangeTarget::mutable_partition_id() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExchangeRel.ExchangeTarget.partition_id)
  return _internal_mutable_partition_id();
}

inline ::int32_t ExchangeRel_ExchangeTarget::_internal_partition_id(int index) const {
  return _internal_partition_id().Get(index);
}
inline void ExchangeRel_ExchangeTarget::_internal_add_partition_id(::int32_t value) {
  _internal_mutable_partition_id()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& ExchangeRel_ExchangeTarget::_internal_partition_id() const {
  return _impl_.partition_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* ExchangeRel_ExchangeTarget::_internal_mutable_partition_id() {
  return &_impl_.partition_id_;
}

// string uri = 2 [json_name = "uri"];
inline bool ExchangeRel_ExchangeTarget::has_uri() const {
  return target_type_case() == kUri;
}
inline void ExchangeRel_ExchangeTarget::set_has_uri() {
  _impl_._oneof_case_[0] = kUri;
}
inline void ExchangeRel_ExchangeTarget::clear_uri() {
  if (target_type_case() == kUri) {
    _impl_.target_type_.uri_.Destroy();
    clear_has_target_type();
  }
}
inline const std::string& ExchangeRel_ExchangeTarget::uri() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.ExchangeTarget.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ExchangeRel_ExchangeTarget::set_uri(Arg_&& arg,
                                                     Args_... args) {
  if (target_type_case() != kUri) {
    clear_target_type();

    set_has_uri();
    _impl_.target_type_.uri_.InitDefault();
  }
  _impl_.target_type_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.ExchangeRel.ExchangeTarget.uri)
}
inline std::string* ExchangeRel_ExchangeTarget::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.ExchangeTarget.uri)
  return _s;
}
inline const std::string& ExchangeRel_ExchangeTarget::_internal_uri() const {
  if (target_type_case() != kUri) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.target_type_.uri_.Get();
}
inline void ExchangeRel_ExchangeTarget::_internal_set_uri(const std::string& value) {
  if (target_type_case() != kUri) {
    clear_target_type();

    set_has_uri();
    _impl_.target_type_.uri_.InitDefault();
  }


  _impl_.target_type_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ExchangeRel_ExchangeTarget::_internal_mutable_uri() {
  if (target_type_case() != kUri) {
    clear_target_type();

    set_has_uri();
    _impl_.target_type_.uri_.InitDefault();
  }
  return _impl_.target_type_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* ExchangeRel_ExchangeTarget::release_uri() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.ExchangeTarget.uri)
  if (target_type_case() != kUri) {
    return nullptr;
  }
  clear_has_target_type();
  return _impl_.target_type_.uri_.Release();
}
inline void ExchangeRel_ExchangeTarget::set_allocated_uri(std::string* value) {
  if (has_target_type()) {
    clear_target_type();
  }
  if (value != nullptr) {
    set_has_uri();
    _impl_.target_type_.uri_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.ExchangeTarget.uri)
}

// .google.protobuf.Any extended = 3 [json_name = "extended"];
inline bool ExchangeRel_ExchangeTarget::has_extended() const {
  return target_type_case() == kExtended;
}
inline bool ExchangeRel_ExchangeTarget::_internal_has_extended() const {
  return target_type_case() == kExtended;
}
inline void ExchangeRel_ExchangeTarget::set_has_extended() {
  _impl_._oneof_case_[0] = kExtended;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::release_extended() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.ExchangeTarget.extended)
  if (target_type_case() == kExtended) {
    clear_has_target_type();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.target_type_.extended_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_type_.extended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExchangeRel_ExchangeTarget::_internal_extended() const {
  return target_type_case() == kExtended
      ? *_impl_.target_type_.extended_
      : reinterpret_cast<::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExchangeRel_ExchangeTarget::extended() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.ExchangeTarget.extended)
  return _internal_extended();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::unsafe_arena_release_extended() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.ExchangeTarget.extended)
  if (target_type_case() == kExtended) {
    clear_has_target_type();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.target_type_.extended_;
    _impl_.target_type_.extended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel_ExchangeTarget::unsafe_arena_set_allocated_extended(::PROTOBUF_NAMESPACE_ID::Any* extended) {
  clear_target_type();
  if (extended) {
    set_has_extended();
    _impl_.target_type_.extended_ = extended;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.ExchangeTarget.extended)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::_internal_mutable_extended() {
  if (target_type_case() != kExtended) {
    clear_target_type();
    set_has_extended();
    _impl_.target_type_.extended_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return _impl_.target_type_.extended_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExchangeRel_ExchangeTarget::mutable_extended() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_extended();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.ExchangeTarget.extended)
  return _msg;
}

inline bool ExchangeRel_ExchangeTarget::has_target_type() const {
  return target_type_case() != TARGET_TYPE_NOT_SET;
}
inline void ExchangeRel_ExchangeTarget::clear_has_target_type() {
  _impl_._oneof_case_[0] = TARGET_TYPE_NOT_SET;
}
inline ExchangeRel_ExchangeTarget::TargetTypeCase ExchangeRel_ExchangeTarget::target_type_case() const {
  return ExchangeRel_ExchangeTarget::TargetTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExchangeRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool ExchangeRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void ExchangeRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& ExchangeRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& ExchangeRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.common)
  return _internal_common();
}
inline void ExchangeRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.common)
}
inline ::substrait::RelCommon* ExchangeRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* ExchangeRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* ExchangeRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* ExchangeRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.common)
  return _msg;
}
inline void ExchangeRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.common)
}

// .substrait.Rel input = 2 [json_name = "input"];
inline bool ExchangeRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void ExchangeRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& ExchangeRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& ExchangeRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.input)
  return _internal_input();
}
inline void ExchangeRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.input)
}
inline ::substrait::Rel* ExchangeRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* ExchangeRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* ExchangeRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* ExchangeRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.input)
  return _msg;
}
inline void ExchangeRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.input)
}

// int32 partition_count = 3 [json_name = "partitionCount"];
inline void ExchangeRel::clear_partition_count() {
  _impl_.partition_count_ = 0;
}
inline ::int32_t ExchangeRel::partition_count() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.partition_count)
  return _internal_partition_count();
}
inline void ExchangeRel::set_partition_count(::int32_t value) {
  _internal_set_partition_count(value);
  // @@protoc_insertion_point(field_set:substrait.ExchangeRel.partition_count)
}
inline ::int32_t ExchangeRel::_internal_partition_count() const {
  return _impl_.partition_count_;
}
inline void ExchangeRel::_internal_set_partition_count(::int32_t value) {
  ;
  _impl_.partition_count_ = value;
}

// repeated .substrait.ExchangeRel.ExchangeTarget targets = 4 [json_name = "targets"];
inline int ExchangeRel::_internal_targets_size() const {
  return _impl_.targets_.size();
}
inline int ExchangeRel::targets_size() const {
  return _internal_targets_size();
}
inline void ExchangeRel::clear_targets() {
  _internal_mutable_targets()->Clear();
}
inline ::substrait::ExchangeRel_ExchangeTarget* ExchangeRel::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.targets)
  return _internal_mutable_targets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExchangeRel_ExchangeTarget >*
ExchangeRel::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExchangeRel.targets)
  return _internal_mutable_targets();
}
inline const ::substrait::ExchangeRel_ExchangeTarget& ExchangeRel::_internal_targets(int index) const {
  return _internal_targets().Get(index);
}
inline const ::substrait::ExchangeRel_ExchangeTarget& ExchangeRel::targets(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.targets)
  return _internal_targets(index);
}
inline ::substrait::ExchangeRel_ExchangeTarget* ExchangeRel::_internal_add_targets() {
  return _internal_mutable_targets()->Add();
}
inline ::substrait::ExchangeRel_ExchangeTarget* ExchangeRel::add_targets() {
  ::substrait::ExchangeRel_ExchangeTarget* _add = _internal_add_targets();
  // @@protoc_insertion_point(field_add:substrait.ExchangeRel.targets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExchangeRel_ExchangeTarget >&
ExchangeRel::targets() const {
  // @@protoc_insertion_point(field_list:substrait.ExchangeRel.targets)
  return _internal_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ExchangeRel_ExchangeTarget>&
ExchangeRel::_internal_targets() const {
  return _impl_.targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::ExchangeRel_ExchangeTarget>*
ExchangeRel::_internal_mutable_targets() {
  return &_impl_.targets_;
}

// .substrait.ExchangeRel.ScatterFields scatter_by_fields = 5 [json_name = "scatterByFields"];
inline bool ExchangeRel::has_scatter_by_fields() const {
  return exchange_kind_case() == kScatterByFields;
}
inline bool ExchangeRel::_internal_has_scatter_by_fields() const {
  return exchange_kind_case() == kScatterByFields;
}
inline void ExchangeRel::set_has_scatter_by_fields() {
  _impl_._oneof_case_[0] = kScatterByFields;
}
inline void ExchangeRel::clear_scatter_by_fields() {
  if (exchange_kind_case() == kScatterByFields) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.exchange_kind_.scatter_by_fields_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::ExchangeRel_ScatterFields* ExchangeRel::release_scatter_by_fields() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.scatter_by_fields)
  if (exchange_kind_case() == kScatterByFields) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_ScatterFields* temp = _impl_.exchange_kind_.scatter_by_fields_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.exchange_kind_.scatter_by_fields_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExchangeRel_ScatterFields& ExchangeRel::_internal_scatter_by_fields() const {
  return exchange_kind_case() == kScatterByFields
      ? *_impl_.exchange_kind_.scatter_by_fields_
      : reinterpret_cast<::substrait::ExchangeRel_ScatterFields&>(::substrait::_ExchangeRel_ScatterFields_default_instance_);
}
inline const ::substrait::ExchangeRel_ScatterFields& ExchangeRel::scatter_by_fields() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.scatter_by_fields)
  return _internal_scatter_by_fields();
}
inline ::substrait::ExchangeRel_ScatterFields* ExchangeRel::unsafe_arena_release_scatter_by_fields() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.scatter_by_fields)
  if (exchange_kind_case() == kScatterByFields) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_ScatterFields* temp = _impl_.exchange_kind_.scatter_by_fields_;
    _impl_.exchange_kind_.scatter_by_fields_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_scatter_by_fields(::substrait::ExchangeRel_ScatterFields* scatter_by_fields) {
  clear_exchange_kind();
  if (scatter_by_fields) {
    set_has_scatter_by_fields();
    _impl_.exchange_kind_.scatter_by_fields_ = scatter_by_fields;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.scatter_by_fields)
}
inline ::substrait::ExchangeRel_ScatterFields* ExchangeRel::_internal_mutable_scatter_by_fields() {
  if (exchange_kind_case() != kScatterByFields) {
    clear_exchange_kind();
    set_has_scatter_by_fields();
    _impl_.exchange_kind_.scatter_by_fields_ = CreateMaybeMessage< ::substrait::ExchangeRel_ScatterFields >(GetArenaForAllocation());
  }
  return _impl_.exchange_kind_.scatter_by_fields_;
}
inline ::substrait::ExchangeRel_ScatterFields* ExchangeRel::mutable_scatter_by_fields() {
  ::substrait::ExchangeRel_ScatterFields* _msg = _internal_mutable_scatter_by_fields();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.scatter_by_fields)
  return _msg;
}

// .substrait.ExchangeRel.SingleBucketExpression single_target = 6 [json_name = "singleTarget"];
inline bool ExchangeRel::has_single_target() const {
  return exchange_kind_case() == kSingleTarget;
}
inline bool ExchangeRel::_internal_has_single_target() const {
  return exchange_kind_case() == kSingleTarget;
}
inline void ExchangeRel::set_has_single_target() {
  _impl_._oneof_case_[0] = kSingleTarget;
}
inline void ExchangeRel::clear_single_target() {
  if (exchange_kind_case() == kSingleTarget) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.exchange_kind_.single_target_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::ExchangeRel_SingleBucketExpression* ExchangeRel::release_single_target() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.single_target)
  if (exchange_kind_case() == kSingleTarget) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_SingleBucketExpression* temp = _impl_.exchange_kind_.single_target_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.exchange_kind_.single_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExchangeRel_SingleBucketExpression& ExchangeRel::_internal_single_target() const {
  return exchange_kind_case() == kSingleTarget
      ? *_impl_.exchange_kind_.single_target_
      : reinterpret_cast<::substrait::ExchangeRel_SingleBucketExpression&>(::substrait::_ExchangeRel_SingleBucketExpression_default_instance_);
}
inline const ::substrait::ExchangeRel_SingleBucketExpression& ExchangeRel::single_target() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.single_target)
  return _internal_single_target();
}
inline ::substrait::ExchangeRel_SingleBucketExpression* ExchangeRel::unsafe_arena_release_single_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.single_target)
  if (exchange_kind_case() == kSingleTarget) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_SingleBucketExpression* temp = _impl_.exchange_kind_.single_target_;
    _impl_.exchange_kind_.single_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_single_target(::substrait::ExchangeRel_SingleBucketExpression* single_target) {
  clear_exchange_kind();
  if (single_target) {
    set_has_single_target();
    _impl_.exchange_kind_.single_target_ = single_target;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.single_target)
}
inline ::substrait::ExchangeRel_SingleBucketExpression* ExchangeRel::_internal_mutable_single_target() {
  if (exchange_kind_case() != kSingleTarget) {
    clear_exchange_kind();
    set_has_single_target();
    _impl_.exchange_kind_.single_target_ = CreateMaybeMessage< ::substrait::ExchangeRel_SingleBucketExpression >(GetArenaForAllocation());
  }
  return _impl_.exchange_kind_.single_target_;
}
inline ::substrait::ExchangeRel_SingleBucketExpression* ExchangeRel::mutable_single_target() {
  ::substrait::ExchangeRel_SingleBucketExpression* _msg = _internal_mutable_single_target();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.single_target)
  return _msg;
}

// .substrait.ExchangeRel.MultiBucketExpression multi_target = 7 [json_name = "multiTarget"];
inline bool ExchangeRel::has_multi_target() const {
  return exchange_kind_case() == kMultiTarget;
}
inline bool ExchangeRel::_internal_has_multi_target() const {
  return exchange_kind_case() == kMultiTarget;
}
inline void ExchangeRel::set_has_multi_target() {
  _impl_._oneof_case_[0] = kMultiTarget;
}
inline void ExchangeRel::clear_multi_target() {
  if (exchange_kind_case() == kMultiTarget) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.exchange_kind_.multi_target_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::ExchangeRel_MultiBucketExpression* ExchangeRel::release_multi_target() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.multi_target)
  if (exchange_kind_case() == kMultiTarget) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_MultiBucketExpression* temp = _impl_.exchange_kind_.multi_target_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.exchange_kind_.multi_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExchangeRel_MultiBucketExpression& ExchangeRel::_internal_multi_target() const {
  return exchange_kind_case() == kMultiTarget
      ? *_impl_.exchange_kind_.multi_target_
      : reinterpret_cast<::substrait::ExchangeRel_MultiBucketExpression&>(::substrait::_ExchangeRel_MultiBucketExpression_default_instance_);
}
inline const ::substrait::ExchangeRel_MultiBucketExpression& ExchangeRel::multi_target() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.multi_target)
  return _internal_multi_target();
}
inline ::substrait::ExchangeRel_MultiBucketExpression* ExchangeRel::unsafe_arena_release_multi_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.multi_target)
  if (exchange_kind_case() == kMultiTarget) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_MultiBucketExpression* temp = _impl_.exchange_kind_.multi_target_;
    _impl_.exchange_kind_.multi_target_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_multi_target(::substrait::ExchangeRel_MultiBucketExpression* multi_target) {
  clear_exchange_kind();
  if (multi_target) {
    set_has_multi_target();
    _impl_.exchange_kind_.multi_target_ = multi_target;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.multi_target)
}
inline ::substrait::ExchangeRel_MultiBucketExpression* ExchangeRel::_internal_mutable_multi_target() {
  if (exchange_kind_case() != kMultiTarget) {
    clear_exchange_kind();
    set_has_multi_target();
    _impl_.exchange_kind_.multi_target_ = CreateMaybeMessage< ::substrait::ExchangeRel_MultiBucketExpression >(GetArenaForAllocation());
  }
  return _impl_.exchange_kind_.multi_target_;
}
inline ::substrait::ExchangeRel_MultiBucketExpression* ExchangeRel::mutable_multi_target() {
  ::substrait::ExchangeRel_MultiBucketExpression* _msg = _internal_mutable_multi_target();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.multi_target)
  return _msg;
}

// .substrait.ExchangeRel.RoundRobin round_robin = 8 [json_name = "roundRobin"];
inline bool ExchangeRel::has_round_robin() const {
  return exchange_kind_case() == kRoundRobin;
}
inline bool ExchangeRel::_internal_has_round_robin() const {
  return exchange_kind_case() == kRoundRobin;
}
inline void ExchangeRel::set_has_round_robin() {
  _impl_._oneof_case_[0] = kRoundRobin;
}
inline void ExchangeRel::clear_round_robin() {
  if (exchange_kind_case() == kRoundRobin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.exchange_kind_.round_robin_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::ExchangeRel_RoundRobin* ExchangeRel::release_round_robin() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.round_robin)
  if (exchange_kind_case() == kRoundRobin) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_RoundRobin* temp = _impl_.exchange_kind_.round_robin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.exchange_kind_.round_robin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExchangeRel_RoundRobin& ExchangeRel::_internal_round_robin() const {
  return exchange_kind_case() == kRoundRobin
      ? *_impl_.exchange_kind_.round_robin_
      : reinterpret_cast<::substrait::ExchangeRel_RoundRobin&>(::substrait::_ExchangeRel_RoundRobin_default_instance_);
}
inline const ::substrait::ExchangeRel_RoundRobin& ExchangeRel::round_robin() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.round_robin)
  return _internal_round_robin();
}
inline ::substrait::ExchangeRel_RoundRobin* ExchangeRel::unsafe_arena_release_round_robin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.round_robin)
  if (exchange_kind_case() == kRoundRobin) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_RoundRobin* temp = _impl_.exchange_kind_.round_robin_;
    _impl_.exchange_kind_.round_robin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_round_robin(::substrait::ExchangeRel_RoundRobin* round_robin) {
  clear_exchange_kind();
  if (round_robin) {
    set_has_round_robin();
    _impl_.exchange_kind_.round_robin_ = round_robin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.round_robin)
}
inline ::substrait::ExchangeRel_RoundRobin* ExchangeRel::_internal_mutable_round_robin() {
  if (exchange_kind_case() != kRoundRobin) {
    clear_exchange_kind();
    set_has_round_robin();
    _impl_.exchange_kind_.round_robin_ = CreateMaybeMessage< ::substrait::ExchangeRel_RoundRobin >(GetArenaForAllocation());
  }
  return _impl_.exchange_kind_.round_robin_;
}
inline ::substrait::ExchangeRel_RoundRobin* ExchangeRel::mutable_round_robin() {
  ::substrait::ExchangeRel_RoundRobin* _msg = _internal_mutable_round_robin();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.round_robin)
  return _msg;
}

// .substrait.ExchangeRel.Broadcast broadcast = 9 [json_name = "broadcast"];
inline bool ExchangeRel::has_broadcast() const {
  return exchange_kind_case() == kBroadcast;
}
inline bool ExchangeRel::_internal_has_broadcast() const {
  return exchange_kind_case() == kBroadcast;
}
inline void ExchangeRel::set_has_broadcast() {
  _impl_._oneof_case_[0] = kBroadcast;
}
inline void ExchangeRel::clear_broadcast() {
  if (exchange_kind_case() == kBroadcast) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.exchange_kind_.broadcast_;
    }
    clear_has_exchange_kind();
  }
}
inline ::substrait::ExchangeRel_Broadcast* ExchangeRel::release_broadcast() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.broadcast)
  if (exchange_kind_case() == kBroadcast) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_Broadcast* temp = _impl_.exchange_kind_.broadcast_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.exchange_kind_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExchangeRel_Broadcast& ExchangeRel::_internal_broadcast() const {
  return exchange_kind_case() == kBroadcast
      ? *_impl_.exchange_kind_.broadcast_
      : reinterpret_cast<::substrait::ExchangeRel_Broadcast&>(::substrait::_ExchangeRel_Broadcast_default_instance_);
}
inline const ::substrait::ExchangeRel_Broadcast& ExchangeRel::broadcast() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.broadcast)
  return _internal_broadcast();
}
inline ::substrait::ExchangeRel_Broadcast* ExchangeRel::unsafe_arena_release_broadcast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExchangeRel.broadcast)
  if (exchange_kind_case() == kBroadcast) {
    clear_has_exchange_kind();
    ::substrait::ExchangeRel_Broadcast* temp = _impl_.exchange_kind_.broadcast_;
    _impl_.exchange_kind_.broadcast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExchangeRel::unsafe_arena_set_allocated_broadcast(::substrait::ExchangeRel_Broadcast* broadcast) {
  clear_exchange_kind();
  if (broadcast) {
    set_has_broadcast();
    _impl_.exchange_kind_.broadcast_ = broadcast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.broadcast)
}
inline ::substrait::ExchangeRel_Broadcast* ExchangeRel::_internal_mutable_broadcast() {
  if (exchange_kind_case() != kBroadcast) {
    clear_exchange_kind();
    set_has_broadcast();
    _impl_.exchange_kind_.broadcast_ = CreateMaybeMessage< ::substrait::ExchangeRel_Broadcast >(GetArenaForAllocation());
  }
  return _impl_.exchange_kind_.broadcast_;
}
inline ::substrait::ExchangeRel_Broadcast* ExchangeRel::mutable_broadcast() {
  ::substrait::ExchangeRel_Broadcast* _msg = _internal_mutable_broadcast();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.broadcast)
  return _msg;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool ExchangeRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& ExchangeRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ExchangeRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.ExchangeRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void ExchangeRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExchangeRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* ExchangeRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ExchangeRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.ExchangeRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ExchangeRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* ExchangeRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.ExchangeRel.advanced_extension)
  return _msg;
}
inline void ExchangeRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExchangeRel.advanced_extension)
}

inline bool ExchangeRel::has_exchange_kind() const {
  return exchange_kind_case() != EXCHANGE_KIND_NOT_SET;
}
inline void ExchangeRel::clear_has_exchange_kind() {
  _impl_._oneof_case_[0] = EXCHANGE_KIND_NOT_SET;
}
inline ExchangeRel::ExchangeKindCase ExchangeRel::exchange_kind_case() const {
  return ExchangeRel::ExchangeKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RelRoot

// .substrait.Rel input = 1 [json_name = "input"];
inline bool RelRoot::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void RelRoot::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Rel& RelRoot::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& RelRoot::input() const {
  // @@protoc_insertion_point(field_get:substrait.RelRoot.input)
  return _internal_input();
}
inline void RelRoot::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.RelRoot.input)
}
inline ::substrait::Rel* RelRoot::release_input() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* RelRoot::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.RelRoot.input)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* RelRoot::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* RelRoot::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.RelRoot.input)
  return _msg;
}
inline void RelRoot::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.RelRoot.input)
}

// repeated string names = 2 [json_name = "names"];
inline int RelRoot::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int RelRoot::names_size() const {
  return _internal_names_size();
}
inline void RelRoot::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* RelRoot::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.RelRoot.names)
  return _s;
}
inline const std::string& RelRoot::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.RelRoot.names)
  return _internal_names(index);
}
inline std::string* RelRoot::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.RelRoot.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void RelRoot::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.RelRoot.names)
}
inline void RelRoot::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.RelRoot.names)
}
inline void RelRoot::add_names(const std::string& value) {
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.RelRoot.names)
}
inline void RelRoot::add_names(std::string&& value) {
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.RelRoot.names)
}
inline void RelRoot::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.RelRoot.names)
}
inline void RelRoot::add_names(const char* value, std::size_t size) {
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.RelRoot.names)
}
inline void RelRoot::add_names(absl::string_view value) {
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.RelRoot.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelRoot::names() const {
  // @@protoc_insertion_point(field_list:substrait.RelRoot.names)
  return _internal_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* RelRoot::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.RelRoot.names)
  return _internal_mutable_names();
}
inline const std::string& RelRoot::_internal_names(int index) const {
  return _internal_names().Get(index);
}
inline std::string* RelRoot::_internal_add_names() {
  return _internal_mutable_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RelRoot::_internal_names() const {
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RelRoot::_internal_mutable_names() {
  return &_impl_.names_;
}

// -------------------------------------------------------------------

// Rel

// .substrait.ReadRel read = 1 [json_name = "read"];
inline bool Rel::has_read() const {
  return rel_type_case() == kRead;
}
inline bool Rel::_internal_has_read() const {
  return rel_type_case() == kRead;
}
inline void Rel::set_has_read() {
  _impl_._oneof_case_[0] = kRead;
}
inline void Rel::clear_read() {
  if (rel_type_case() == kRead) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.read_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ReadRel* Rel::release_read() {
  // @@protoc_insertion_point(field_release:substrait.Rel.read)
  if (rel_type_case() == kRead) {
    clear_has_rel_type();
    ::substrait::ReadRel* temp = _impl_.rel_type_.read_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ReadRel& Rel::_internal_read() const {
  return rel_type_case() == kRead
      ? *_impl_.rel_type_.read_
      : reinterpret_cast<::substrait::ReadRel&>(::substrait::_ReadRel_default_instance_);
}
inline const ::substrait::ReadRel& Rel::read() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.read)
  return _internal_read();
}
inline ::substrait::ReadRel* Rel::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.read)
  if (rel_type_case() == kRead) {
    clear_has_rel_type();
    ::substrait::ReadRel* temp = _impl_.rel_type_.read_;
    _impl_.rel_type_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_read(::substrait::ReadRel* read) {
  clear_rel_type();
  if (read) {
    set_has_read();
    _impl_.rel_type_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.read)
}
inline ::substrait::ReadRel* Rel::_internal_mutable_read() {
  if (rel_type_case() != kRead) {
    clear_rel_type();
    set_has_read();
    _impl_.rel_type_.read_ = CreateMaybeMessage< ::substrait::ReadRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.read_;
}
inline ::substrait::ReadRel* Rel::mutable_read() {
  ::substrait::ReadRel* _msg = _internal_mutable_read();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.read)
  return _msg;
}

// .substrait.FilterRel filter = 2 [json_name = "filter"];
inline bool Rel::has_filter() const {
  return rel_type_case() == kFilter;
}
inline bool Rel::_internal_has_filter() const {
  return rel_type_case() == kFilter;
}
inline void Rel::set_has_filter() {
  _impl_._oneof_case_[0] = kFilter;
}
inline void Rel::clear_filter() {
  if (rel_type_case() == kFilter) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.filter_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::FilterRel* Rel::release_filter() {
  // @@protoc_insertion_point(field_release:substrait.Rel.filter)
  if (rel_type_case() == kFilter) {
    clear_has_rel_type();
    ::substrait::FilterRel* temp = _impl_.rel_type_.filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::FilterRel& Rel::_internal_filter() const {
  return rel_type_case() == kFilter
      ? *_impl_.rel_type_.filter_
      : reinterpret_cast<::substrait::FilterRel&>(::substrait::_FilterRel_default_instance_);
}
inline const ::substrait::FilterRel& Rel::filter() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.filter)
  return _internal_filter();
}
inline ::substrait::FilterRel* Rel::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.filter)
  if (rel_type_case() == kFilter) {
    clear_has_rel_type();
    ::substrait::FilterRel* temp = _impl_.rel_type_.filter_;
    _impl_.rel_type_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_filter(::substrait::FilterRel* filter) {
  clear_rel_type();
  if (filter) {
    set_has_filter();
    _impl_.rel_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.filter)
}
inline ::substrait::FilterRel* Rel::_internal_mutable_filter() {
  if (rel_type_case() != kFilter) {
    clear_rel_type();
    set_has_filter();
    _impl_.rel_type_.filter_ = CreateMaybeMessage< ::substrait::FilterRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.filter_;
}
inline ::substrait::FilterRel* Rel::mutable_filter() {
  ::substrait::FilterRel* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.filter)
  return _msg;
}

// .substrait.FetchRel fetch = 3 [json_name = "fetch"];
inline bool Rel::has_fetch() const {
  return rel_type_case() == kFetch;
}
inline bool Rel::_internal_has_fetch() const {
  return rel_type_case() == kFetch;
}
inline void Rel::set_has_fetch() {
  _impl_._oneof_case_[0] = kFetch;
}
inline void Rel::clear_fetch() {
  if (rel_type_case() == kFetch) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.fetch_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::FetchRel* Rel::release_fetch() {
  // @@protoc_insertion_point(field_release:substrait.Rel.fetch)
  if (rel_type_case() == kFetch) {
    clear_has_rel_type();
    ::substrait::FetchRel* temp = _impl_.rel_type_.fetch_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::FetchRel& Rel::_internal_fetch() const {
  return rel_type_case() == kFetch
      ? *_impl_.rel_type_.fetch_
      : reinterpret_cast<::substrait::FetchRel&>(::substrait::_FetchRel_default_instance_);
}
inline const ::substrait::FetchRel& Rel::fetch() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.fetch)
  return _internal_fetch();
}
inline ::substrait::FetchRel* Rel::unsafe_arena_release_fetch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.fetch)
  if (rel_type_case() == kFetch) {
    clear_has_rel_type();
    ::substrait::FetchRel* temp = _impl_.rel_type_.fetch_;
    _impl_.rel_type_.fetch_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_fetch(::substrait::FetchRel* fetch) {
  clear_rel_type();
  if (fetch) {
    set_has_fetch();
    _impl_.rel_type_.fetch_ = fetch;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.fetch)
}
inline ::substrait::FetchRel* Rel::_internal_mutable_fetch() {
  if (rel_type_case() != kFetch) {
    clear_rel_type();
    set_has_fetch();
    _impl_.rel_type_.fetch_ = CreateMaybeMessage< ::substrait::FetchRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.fetch_;
}
inline ::substrait::FetchRel* Rel::mutable_fetch() {
  ::substrait::FetchRel* _msg = _internal_mutable_fetch();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.fetch)
  return _msg;
}

// .substrait.AggregateRel aggregate = 4 [json_name = "aggregate"];
inline bool Rel::has_aggregate() const {
  return rel_type_case() == kAggregate;
}
inline bool Rel::_internal_has_aggregate() const {
  return rel_type_case() == kAggregate;
}
inline void Rel::set_has_aggregate() {
  _impl_._oneof_case_[0] = kAggregate;
}
inline void Rel::clear_aggregate() {
  if (rel_type_case() == kAggregate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.aggregate_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::AggregateRel* Rel::release_aggregate() {
  // @@protoc_insertion_point(field_release:substrait.Rel.aggregate)
  if (rel_type_case() == kAggregate) {
    clear_has_rel_type();
    ::substrait::AggregateRel* temp = _impl_.rel_type_.aggregate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::AggregateRel& Rel::_internal_aggregate() const {
  return rel_type_case() == kAggregate
      ? *_impl_.rel_type_.aggregate_
      : reinterpret_cast<::substrait::AggregateRel&>(::substrait::_AggregateRel_default_instance_);
}
inline const ::substrait::AggregateRel& Rel::aggregate() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.aggregate)
  return _internal_aggregate();
}
inline ::substrait::AggregateRel* Rel::unsafe_arena_release_aggregate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.aggregate)
  if (rel_type_case() == kAggregate) {
    clear_has_rel_type();
    ::substrait::AggregateRel* temp = _impl_.rel_type_.aggregate_;
    _impl_.rel_type_.aggregate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_aggregate(::substrait::AggregateRel* aggregate) {
  clear_rel_type();
  if (aggregate) {
    set_has_aggregate();
    _impl_.rel_type_.aggregate_ = aggregate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.aggregate)
}
inline ::substrait::AggregateRel* Rel::_internal_mutable_aggregate() {
  if (rel_type_case() != kAggregate) {
    clear_rel_type();
    set_has_aggregate();
    _impl_.rel_type_.aggregate_ = CreateMaybeMessage< ::substrait::AggregateRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.aggregate_;
}
inline ::substrait::AggregateRel* Rel::mutable_aggregate() {
  ::substrait::AggregateRel* _msg = _internal_mutable_aggregate();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.aggregate)
  return _msg;
}

// .substrait.SortRel sort = 5 [json_name = "sort"];
inline bool Rel::has_sort() const {
  return rel_type_case() == kSort;
}
inline bool Rel::_internal_has_sort() const {
  return rel_type_case() == kSort;
}
inline void Rel::set_has_sort() {
  _impl_._oneof_case_[0] = kSort;
}
inline void Rel::clear_sort() {
  if (rel_type_case() == kSort) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.sort_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::SortRel* Rel::release_sort() {
  // @@protoc_insertion_point(field_release:substrait.Rel.sort)
  if (rel_type_case() == kSort) {
    clear_has_rel_type();
    ::substrait::SortRel* temp = _impl_.rel_type_.sort_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::SortRel& Rel::_internal_sort() const {
  return rel_type_case() == kSort
      ? *_impl_.rel_type_.sort_
      : reinterpret_cast<::substrait::SortRel&>(::substrait::_SortRel_default_instance_);
}
inline const ::substrait::SortRel& Rel::sort() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.sort)
  return _internal_sort();
}
inline ::substrait::SortRel* Rel::unsafe_arena_release_sort() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.sort)
  if (rel_type_case() == kSort) {
    clear_has_rel_type();
    ::substrait::SortRel* temp = _impl_.rel_type_.sort_;
    _impl_.rel_type_.sort_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_sort(::substrait::SortRel* sort) {
  clear_rel_type();
  if (sort) {
    set_has_sort();
    _impl_.rel_type_.sort_ = sort;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.sort)
}
inline ::substrait::SortRel* Rel::_internal_mutable_sort() {
  if (rel_type_case() != kSort) {
    clear_rel_type();
    set_has_sort();
    _impl_.rel_type_.sort_ = CreateMaybeMessage< ::substrait::SortRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.sort_;
}
inline ::substrait::SortRel* Rel::mutable_sort() {
  ::substrait::SortRel* _msg = _internal_mutable_sort();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.sort)
  return _msg;
}

// .substrait.JoinRel join = 6 [json_name = "join"];
inline bool Rel::has_join() const {
  return rel_type_case() == kJoin;
}
inline bool Rel::_internal_has_join() const {
  return rel_type_case() == kJoin;
}
inline void Rel::set_has_join() {
  _impl_._oneof_case_[0] = kJoin;
}
inline void Rel::clear_join() {
  if (rel_type_case() == kJoin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::JoinRel* Rel::release_join() {
  // @@protoc_insertion_point(field_release:substrait.Rel.join)
  if (rel_type_case() == kJoin) {
    clear_has_rel_type();
    ::substrait::JoinRel* temp = _impl_.rel_type_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::JoinRel& Rel::_internal_join() const {
  return rel_type_case() == kJoin
      ? *_impl_.rel_type_.join_
      : reinterpret_cast<::substrait::JoinRel&>(::substrait::_JoinRel_default_instance_);
}
inline const ::substrait::JoinRel& Rel::join() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.join)
  return _internal_join();
}
inline ::substrait::JoinRel* Rel::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.join)
  if (rel_type_case() == kJoin) {
    clear_has_rel_type();
    ::substrait::JoinRel* temp = _impl_.rel_type_.join_;
    _impl_.rel_type_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_join(::substrait::JoinRel* join) {
  clear_rel_type();
  if (join) {
    set_has_join();
    _impl_.rel_type_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.join)
}
inline ::substrait::JoinRel* Rel::_internal_mutable_join() {
  if (rel_type_case() != kJoin) {
    clear_rel_type();
    set_has_join();
    _impl_.rel_type_.join_ = CreateMaybeMessage< ::substrait::JoinRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.join_;
}
inline ::substrait::JoinRel* Rel::mutable_join() {
  ::substrait::JoinRel* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.join)
  return _msg;
}

// .substrait.ProjectRel project = 7 [json_name = "project"];
inline bool Rel::has_project() const {
  return rel_type_case() == kProject;
}
inline bool Rel::_internal_has_project() const {
  return rel_type_case() == kProject;
}
inline void Rel::set_has_project() {
  _impl_._oneof_case_[0] = kProject;
}
inline void Rel::clear_project() {
  if (rel_type_case() == kProject) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.project_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ProjectRel* Rel::release_project() {
  // @@protoc_insertion_point(field_release:substrait.Rel.project)
  if (rel_type_case() == kProject) {
    clear_has_rel_type();
    ::substrait::ProjectRel* temp = _impl_.rel_type_.project_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ProjectRel& Rel::_internal_project() const {
  return rel_type_case() == kProject
      ? *_impl_.rel_type_.project_
      : reinterpret_cast<::substrait::ProjectRel&>(::substrait::_ProjectRel_default_instance_);
}
inline const ::substrait::ProjectRel& Rel::project() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.project)
  return _internal_project();
}
inline ::substrait::ProjectRel* Rel::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.project)
  if (rel_type_case() == kProject) {
    clear_has_rel_type();
    ::substrait::ProjectRel* temp = _impl_.rel_type_.project_;
    _impl_.rel_type_.project_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_project(::substrait::ProjectRel* project) {
  clear_rel_type();
  if (project) {
    set_has_project();
    _impl_.rel_type_.project_ = project;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.project)
}
inline ::substrait::ProjectRel* Rel::_internal_mutable_project() {
  if (rel_type_case() != kProject) {
    clear_rel_type();
    set_has_project();
    _impl_.rel_type_.project_ = CreateMaybeMessage< ::substrait::ProjectRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.project_;
}
inline ::substrait::ProjectRel* Rel::mutable_project() {
  ::substrait::ProjectRel* _msg = _internal_mutable_project();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.project)
  return _msg;
}

// .substrait.SetRel set = 8 [json_name = "set"];
inline bool Rel::has_set() const {
  return rel_type_case() == kSet;
}
inline bool Rel::_internal_has_set() const {
  return rel_type_case() == kSet;
}
inline void Rel::set_has_set() {
  _impl_._oneof_case_[0] = kSet;
}
inline void Rel::clear_set() {
  if (rel_type_case() == kSet) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.set_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::SetRel* Rel::release_set() {
  // @@protoc_insertion_point(field_release:substrait.Rel.set)
  if (rel_type_case() == kSet) {
    clear_has_rel_type();
    ::substrait::SetRel* temp = _impl_.rel_type_.set_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::SetRel& Rel::_internal_set() const {
  return rel_type_case() == kSet
      ? *_impl_.rel_type_.set_
      : reinterpret_cast<::substrait::SetRel&>(::substrait::_SetRel_default_instance_);
}
inline const ::substrait::SetRel& Rel::set() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.set)
  return _internal_set();
}
inline ::substrait::SetRel* Rel::unsafe_arena_release_set() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.set)
  if (rel_type_case() == kSet) {
    clear_has_rel_type();
    ::substrait::SetRel* temp = _impl_.rel_type_.set_;
    _impl_.rel_type_.set_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_set(::substrait::SetRel* set) {
  clear_rel_type();
  if (set) {
    set_has_set();
    _impl_.rel_type_.set_ = set;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.set)
}
inline ::substrait::SetRel* Rel::_internal_mutable_set() {
  if (rel_type_case() != kSet) {
    clear_rel_type();
    set_has_set();
    _impl_.rel_type_.set_ = CreateMaybeMessage< ::substrait::SetRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.set_;
}
inline ::substrait::SetRel* Rel::mutable_set() {
  ::substrait::SetRel* _msg = _internal_mutable_set();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.set)
  return _msg;
}

// .substrait.ExtensionSingleRel extension_single = 9 [json_name = "extensionSingle"];
inline bool Rel::has_extension_single() const {
  return rel_type_case() == kExtensionSingle;
}
inline bool Rel::_internal_has_extension_single() const {
  return rel_type_case() == kExtensionSingle;
}
inline void Rel::set_has_extension_single() {
  _impl_._oneof_case_[0] = kExtensionSingle;
}
inline void Rel::clear_extension_single() {
  if (rel_type_case() == kExtensionSingle) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.extension_single_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionSingleRel* Rel::release_extension_single() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_single)
  if (rel_type_case() == kExtensionSingle) {
    clear_has_rel_type();
    ::substrait::ExtensionSingleRel* temp = _impl_.rel_type_.extension_single_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionSingleRel& Rel::_internal_extension_single() const {
  return rel_type_case() == kExtensionSingle
      ? *_impl_.rel_type_.extension_single_
      : reinterpret_cast<::substrait::ExtensionSingleRel&>(::substrait::_ExtensionSingleRel_default_instance_);
}
inline const ::substrait::ExtensionSingleRel& Rel::extension_single() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_single)
  return _internal_extension_single();
}
inline ::substrait::ExtensionSingleRel* Rel::unsafe_arena_release_extension_single() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_single)
  if (rel_type_case() == kExtensionSingle) {
    clear_has_rel_type();
    ::substrait::ExtensionSingleRel* temp = _impl_.rel_type_.extension_single_;
    _impl_.rel_type_.extension_single_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_single(::substrait::ExtensionSingleRel* extension_single) {
  clear_rel_type();
  if (extension_single) {
    set_has_extension_single();
    _impl_.rel_type_.extension_single_ = extension_single;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_single)
}
inline ::substrait::ExtensionSingleRel* Rel::_internal_mutable_extension_single() {
  if (rel_type_case() != kExtensionSingle) {
    clear_rel_type();
    set_has_extension_single();
    _impl_.rel_type_.extension_single_ = CreateMaybeMessage< ::substrait::ExtensionSingleRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.extension_single_;
}
inline ::substrait::ExtensionSingleRel* Rel::mutable_extension_single() {
  ::substrait::ExtensionSingleRel* _msg = _internal_mutable_extension_single();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_single)
  return _msg;
}

// .substrait.ExtensionMultiRel extension_multi = 10 [json_name = "extensionMulti"];
inline bool Rel::has_extension_multi() const {
  return rel_type_case() == kExtensionMulti;
}
inline bool Rel::_internal_has_extension_multi() const {
  return rel_type_case() == kExtensionMulti;
}
inline void Rel::set_has_extension_multi() {
  _impl_._oneof_case_[0] = kExtensionMulti;
}
inline void Rel::clear_extension_multi() {
  if (rel_type_case() == kExtensionMulti) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.extension_multi_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionMultiRel* Rel::release_extension_multi() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_multi)
  if (rel_type_case() == kExtensionMulti) {
    clear_has_rel_type();
    ::substrait::ExtensionMultiRel* temp = _impl_.rel_type_.extension_multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionMultiRel& Rel::_internal_extension_multi() const {
  return rel_type_case() == kExtensionMulti
      ? *_impl_.rel_type_.extension_multi_
      : reinterpret_cast<::substrait::ExtensionMultiRel&>(::substrait::_ExtensionMultiRel_default_instance_);
}
inline const ::substrait::ExtensionMultiRel& Rel::extension_multi() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_multi)
  return _internal_extension_multi();
}
inline ::substrait::ExtensionMultiRel* Rel::unsafe_arena_release_extension_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_multi)
  if (rel_type_case() == kExtensionMulti) {
    clear_has_rel_type();
    ::substrait::ExtensionMultiRel* temp = _impl_.rel_type_.extension_multi_;
    _impl_.rel_type_.extension_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_multi(::substrait::ExtensionMultiRel* extension_multi) {
  clear_rel_type();
  if (extension_multi) {
    set_has_extension_multi();
    _impl_.rel_type_.extension_multi_ = extension_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_multi)
}
inline ::substrait::ExtensionMultiRel* Rel::_internal_mutable_extension_multi() {
  if (rel_type_case() != kExtensionMulti) {
    clear_rel_type();
    set_has_extension_multi();
    _impl_.rel_type_.extension_multi_ = CreateMaybeMessage< ::substrait::ExtensionMultiRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.extension_multi_;
}
inline ::substrait::ExtensionMultiRel* Rel::mutable_extension_multi() {
  ::substrait::ExtensionMultiRel* _msg = _internal_mutable_extension_multi();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_multi)
  return _msg;
}

// .substrait.ExtensionLeafRel extension_leaf = 11 [json_name = "extensionLeaf"];
inline bool Rel::has_extension_leaf() const {
  return rel_type_case() == kExtensionLeaf;
}
inline bool Rel::_internal_has_extension_leaf() const {
  return rel_type_case() == kExtensionLeaf;
}
inline void Rel::set_has_extension_leaf() {
  _impl_._oneof_case_[0] = kExtensionLeaf;
}
inline void Rel::clear_extension_leaf() {
  if (rel_type_case() == kExtensionLeaf) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.extension_leaf_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::ExtensionLeafRel* Rel::release_extension_leaf() {
  // @@protoc_insertion_point(field_release:substrait.Rel.extension_leaf)
  if (rel_type_case() == kExtensionLeaf) {
    clear_has_rel_type();
    ::substrait::ExtensionLeafRel* temp = _impl_.rel_type_.extension_leaf_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionLeafRel& Rel::_internal_extension_leaf() const {
  return rel_type_case() == kExtensionLeaf
      ? *_impl_.rel_type_.extension_leaf_
      : reinterpret_cast<::substrait::ExtensionLeafRel&>(::substrait::_ExtensionLeafRel_default_instance_);
}
inline const ::substrait::ExtensionLeafRel& Rel::extension_leaf() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.extension_leaf)
  return _internal_extension_leaf();
}
inline ::substrait::ExtensionLeafRel* Rel::unsafe_arena_release_extension_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.extension_leaf)
  if (rel_type_case() == kExtensionLeaf) {
    clear_has_rel_type();
    ::substrait::ExtensionLeafRel* temp = _impl_.rel_type_.extension_leaf_;
    _impl_.rel_type_.extension_leaf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_extension_leaf(::substrait::ExtensionLeafRel* extension_leaf) {
  clear_rel_type();
  if (extension_leaf) {
    set_has_extension_leaf();
    _impl_.rel_type_.extension_leaf_ = extension_leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.extension_leaf)
}
inline ::substrait::ExtensionLeafRel* Rel::_internal_mutable_extension_leaf() {
  if (rel_type_case() != kExtensionLeaf) {
    clear_rel_type();
    set_has_extension_leaf();
    _impl_.rel_type_.extension_leaf_ = CreateMaybeMessage< ::substrait::ExtensionLeafRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.extension_leaf_;
}
inline ::substrait::ExtensionLeafRel* Rel::mutable_extension_leaf() {
  ::substrait::ExtensionLeafRel* _msg = _internal_mutable_extension_leaf();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.extension_leaf)
  return _msg;
}

// .substrait.CrossRel cross = 12 [json_name = "cross"];
inline bool Rel::has_cross() const {
  return rel_type_case() == kCross;
}
inline bool Rel::_internal_has_cross() const {
  return rel_type_case() == kCross;
}
inline void Rel::set_has_cross() {
  _impl_._oneof_case_[0] = kCross;
}
inline void Rel::clear_cross() {
  if (rel_type_case() == kCross) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.cross_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::CrossRel* Rel::release_cross() {
  // @@protoc_insertion_point(field_release:substrait.Rel.cross)
  if (rel_type_case() == kCross) {
    clear_has_rel_type();
    ::substrait::CrossRel* temp = _impl_.rel_type_.cross_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::CrossRel& Rel::_internal_cross() const {
  return rel_type_case() == kCross
      ? *_impl_.rel_type_.cross_
      : reinterpret_cast<::substrait::CrossRel&>(::substrait::_CrossRel_default_instance_);
}
inline const ::substrait::CrossRel& Rel::cross() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.cross)
  return _internal_cross();
}
inline ::substrait::CrossRel* Rel::unsafe_arena_release_cross() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.cross)
  if (rel_type_case() == kCross) {
    clear_has_rel_type();
    ::substrait::CrossRel* temp = _impl_.rel_type_.cross_;
    _impl_.rel_type_.cross_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_cross(::substrait::CrossRel* cross) {
  clear_rel_type();
  if (cross) {
    set_has_cross();
    _impl_.rel_type_.cross_ = cross;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.cross)
}
inline ::substrait::CrossRel* Rel::_internal_mutable_cross() {
  if (rel_type_case() != kCross) {
    clear_rel_type();
    set_has_cross();
    _impl_.rel_type_.cross_ = CreateMaybeMessage< ::substrait::CrossRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.cross_;
}
inline ::substrait::CrossRel* Rel::mutable_cross() {
  ::substrait::CrossRel* _msg = _internal_mutable_cross();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.cross)
  return _msg;
}

// .substrait.HashJoinRel hash_join = 13 [json_name = "hashJoin"];
inline bool Rel::has_hash_join() const {
  return rel_type_case() == kHashJoin;
}
inline bool Rel::_internal_has_hash_join() const {
  return rel_type_case() == kHashJoin;
}
inline void Rel::set_has_hash_join() {
  _impl_._oneof_case_[0] = kHashJoin;
}
inline void Rel::clear_hash_join() {
  if (rel_type_case() == kHashJoin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.hash_join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::HashJoinRel* Rel::release_hash_join() {
  // @@protoc_insertion_point(field_release:substrait.Rel.hash_join)
  if (rel_type_case() == kHashJoin) {
    clear_has_rel_type();
    ::substrait::HashJoinRel* temp = _impl_.rel_type_.hash_join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.hash_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::HashJoinRel& Rel::_internal_hash_join() const {
  return rel_type_case() == kHashJoin
      ? *_impl_.rel_type_.hash_join_
      : reinterpret_cast<::substrait::HashJoinRel&>(::substrait::_HashJoinRel_default_instance_);
}
inline const ::substrait::HashJoinRel& Rel::hash_join() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.hash_join)
  return _internal_hash_join();
}
inline ::substrait::HashJoinRel* Rel::unsafe_arena_release_hash_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.hash_join)
  if (rel_type_case() == kHashJoin) {
    clear_has_rel_type();
    ::substrait::HashJoinRel* temp = _impl_.rel_type_.hash_join_;
    _impl_.rel_type_.hash_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_hash_join(::substrait::HashJoinRel* hash_join) {
  clear_rel_type();
  if (hash_join) {
    set_has_hash_join();
    _impl_.rel_type_.hash_join_ = hash_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.hash_join)
}
inline ::substrait::HashJoinRel* Rel::_internal_mutable_hash_join() {
  if (rel_type_case() != kHashJoin) {
    clear_rel_type();
    set_has_hash_join();
    _impl_.rel_type_.hash_join_ = CreateMaybeMessage< ::substrait::HashJoinRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.hash_join_;
}
inline ::substrait::HashJoinRel* Rel::mutable_hash_join() {
  ::substrait::HashJoinRel* _msg = _internal_mutable_hash_join();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.hash_join)
  return _msg;
}

// .substrait.MergeJoinRel merge_join = 14 [json_name = "mergeJoin"];
inline bool Rel::has_merge_join() const {
  return rel_type_case() == kMergeJoin;
}
inline bool Rel::_internal_has_merge_join() const {
  return rel_type_case() == kMergeJoin;
}
inline void Rel::set_has_merge_join() {
  _impl_._oneof_case_[0] = kMergeJoin;
}
inline void Rel::clear_merge_join() {
  if (rel_type_case() == kMergeJoin) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.merge_join_;
    }
    clear_has_rel_type();
  }
}
inline ::substrait::MergeJoinRel* Rel::release_merge_join() {
  // @@protoc_insertion_point(field_release:substrait.Rel.merge_join)
  if (rel_type_case() == kMergeJoin) {
    clear_has_rel_type();
    ::substrait::MergeJoinRel* temp = _impl_.rel_type_.merge_join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.merge_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::MergeJoinRel& Rel::_internal_merge_join() const {
  return rel_type_case() == kMergeJoin
      ? *_impl_.rel_type_.merge_join_
      : reinterpret_cast<::substrait::MergeJoinRel&>(::substrait::_MergeJoinRel_default_instance_);
}
inline const ::substrait::MergeJoinRel& Rel::merge_join() const {
  // @@protoc_insertion_point(field_get:substrait.Rel.merge_join)
  return _internal_merge_join();
}
inline ::substrait::MergeJoinRel* Rel::unsafe_arena_release_merge_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Rel.merge_join)
  if (rel_type_case() == kMergeJoin) {
    clear_has_rel_type();
    ::substrait::MergeJoinRel* temp = _impl_.rel_type_.merge_join_;
    _impl_.rel_type_.merge_join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Rel::unsafe_arena_set_allocated_merge_join(::substrait::MergeJoinRel* merge_join) {
  clear_rel_type();
  if (merge_join) {
    set_has_merge_join();
    _impl_.rel_type_.merge_join_ = merge_join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Rel.merge_join)
}
inline ::substrait::MergeJoinRel* Rel::_internal_mutable_merge_join() {
  if (rel_type_case() != kMergeJoin) {
    clear_rel_type();
    set_has_merge_join();
    _impl_.rel_type_.merge_join_ = CreateMaybeMessage< ::substrait::MergeJoinRel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.merge_join_;
}
inline ::substrait::MergeJoinRel* Rel::mutable_merge_join() {
  ::substrait::MergeJoinRel* _msg = _internal_mutable_merge_join();
  // @@protoc_insertion_point(field_mutable:substrait.Rel.merge_join)
  return _msg;
}

inline bool Rel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void Rel::clear_has_rel_type() {
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline Rel::RelTypeCase Rel::rel_type_case() const {
  return Rel::RelTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NamedObjectWrite

// repeated string names = 1 [json_name = "names"];
inline int NamedObjectWrite::_internal_names_size() const {
  return _impl_.names_.size();
}
inline int NamedObjectWrite::names_size() const {
  return _internal_names_size();
}
inline void NamedObjectWrite::clear_names() {
  _internal_mutable_names()->Clear();
}
inline std::string* NamedObjectWrite::add_names() {
  std::string* _s = _internal_add_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.NamedObjectWrite.names)
  return _s;
}
inline const std::string& NamedObjectWrite::names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.NamedObjectWrite.names)
  return _internal_names(index);
}
inline std::string* NamedObjectWrite::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.NamedObjectWrite.names)
  return _internal_mutable_names()->Mutable(index);
}
inline void NamedObjectWrite::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(const std::string& value) {
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(std::string&& value) {
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(const char* value, std::size_t size) {
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.NamedObjectWrite.names)
}
inline void NamedObjectWrite::add_names(absl::string_view value) {
  _internal_mutable_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.NamedObjectWrite.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NamedObjectWrite::names() const {
  // @@protoc_insertion_point(field_list:substrait.NamedObjectWrite.names)
  return _internal_names();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* NamedObjectWrite::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.NamedObjectWrite.names)
  return _internal_mutable_names();
}
inline const std::string& NamedObjectWrite::_internal_names(int index) const {
  return _internal_names().Get(index);
}
inline std::string* NamedObjectWrite::_internal_add_names() {
  return _internal_mutable_names()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NamedObjectWrite::_internal_names() const {
  return _impl_.names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NamedObjectWrite::_internal_mutable_names() {
  return &_impl_.names_;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool NamedObjectWrite::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& NamedObjectWrite::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& NamedObjectWrite::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.NamedObjectWrite.advanced_extension)
  return _internal_advanced_extension();
}
inline void NamedObjectWrite::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.NamedObjectWrite.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* NamedObjectWrite::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* NamedObjectWrite::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.NamedObjectWrite.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* NamedObjectWrite::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* NamedObjectWrite::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.NamedObjectWrite.advanced_extension)
  return _msg;
}
inline void NamedObjectWrite::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.NamedObjectWrite.advanced_extension)
}

// -------------------------------------------------------------------

// ExtensionObject

// .google.protobuf.Any detail = 1 [json_name = "detail"];
inline bool ExtensionObject::has_detail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.detail_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionObject::_internal_detail() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.detail_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ExtensionObject::detail() const {
  // @@protoc_insertion_point(field_get:substrait.ExtensionObject.detail)
  return _internal_detail();
}
inline void ExtensionObject::unsafe_arena_set_allocated_detail(
    ::PROTOBUF_NAMESPACE_ID::Any* detail) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  _impl_.detail_ = detail;
  if (detail) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtensionObject.detail)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::release_detail() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::unsafe_arena_release_detail() {
  // @@protoc_insertion_point(field_release:substrait.ExtensionObject.detail)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.detail_;
  _impl_.detail_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::_internal_mutable_detail() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.detail_ = p;
  }
  return _impl_.detail_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ExtensionObject::mutable_detail() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:substrait.ExtensionObject.detail)
  return _msg;
}
inline void ExtensionObject::set_allocated_detail(::PROTOBUF_NAMESPACE_ID::Any* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.detail_);
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detail));
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtensionObject.detail)
}

// -------------------------------------------------------------------

// DdlRel

// .substrait.NamedObjectWrite named_object = 1 [json_name = "namedObject"];
inline bool DdlRel::has_named_object() const {
  return write_type_case() == kNamedObject;
}
inline bool DdlRel::_internal_has_named_object() const {
  return write_type_case() == kNamedObject;
}
inline void DdlRel::set_has_named_object() {
  _impl_._oneof_case_[0] = kNamedObject;
}
inline void DdlRel::clear_named_object() {
  if (write_type_case() == kNamedObject) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_type_.named_object_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::NamedObjectWrite* DdlRel::release_named_object() {
  // @@protoc_insertion_point(field_release:substrait.DdlRel.named_object)
  if (write_type_case() == kNamedObject) {
    clear_has_write_type();
    ::substrait::NamedObjectWrite* temp = _impl_.write_type_.named_object_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_type_.named_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::NamedObjectWrite& DdlRel::_internal_named_object() const {
  return write_type_case() == kNamedObject
      ? *_impl_.write_type_.named_object_
      : reinterpret_cast<::substrait::NamedObjectWrite&>(::substrait::_NamedObjectWrite_default_instance_);
}
inline const ::substrait::NamedObjectWrite& DdlRel::named_object() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.named_object)
  return _internal_named_object();
}
inline ::substrait::NamedObjectWrite* DdlRel::unsafe_arena_release_named_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.DdlRel.named_object)
  if (write_type_case() == kNamedObject) {
    clear_has_write_type();
    ::substrait::NamedObjectWrite* temp = _impl_.write_type_.named_object_;
    _impl_.write_type_.named_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DdlRel::unsafe_arena_set_allocated_named_object(::substrait::NamedObjectWrite* named_object) {
  clear_write_type();
  if (named_object) {
    set_has_named_object();
    _impl_.write_type_.named_object_ = named_object;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.DdlRel.named_object)
}
inline ::substrait::NamedObjectWrite* DdlRel::_internal_mutable_named_object() {
  if (write_type_case() != kNamedObject) {
    clear_write_type();
    set_has_named_object();
    _impl_.write_type_.named_object_ = CreateMaybeMessage< ::substrait::NamedObjectWrite >(GetArenaForAllocation());
  }
  return _impl_.write_type_.named_object_;
}
inline ::substrait::NamedObjectWrite* DdlRel::mutable_named_object() {
  ::substrait::NamedObjectWrite* _msg = _internal_mutable_named_object();
  // @@protoc_insertion_point(field_mutable:substrait.DdlRel.named_object)
  return _msg;
}

// .substrait.ExtensionObject extension_object = 2 [json_name = "extensionObject"];
inline bool DdlRel::has_extension_object() const {
  return write_type_case() == kExtensionObject;
}
inline bool DdlRel::_internal_has_extension_object() const {
  return write_type_case() == kExtensionObject;
}
inline void DdlRel::set_has_extension_object() {
  _impl_._oneof_case_[0] = kExtensionObject;
}
inline void DdlRel::clear_extension_object() {
  if (write_type_case() == kExtensionObject) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_type_.extension_object_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::ExtensionObject* DdlRel::release_extension_object() {
  // @@protoc_insertion_point(field_release:substrait.DdlRel.extension_object)
  if (write_type_case() == kExtensionObject) {
    clear_has_write_type();
    ::substrait::ExtensionObject* temp = _impl_.write_type_.extension_object_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_type_.extension_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionObject& DdlRel::_internal_extension_object() const {
  return write_type_case() == kExtensionObject
      ? *_impl_.write_type_.extension_object_
      : reinterpret_cast<::substrait::ExtensionObject&>(::substrait::_ExtensionObject_default_instance_);
}
inline const ::substrait::ExtensionObject& DdlRel::extension_object() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.extension_object)
  return _internal_extension_object();
}
inline ::substrait::ExtensionObject* DdlRel::unsafe_arena_release_extension_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.DdlRel.extension_object)
  if (write_type_case() == kExtensionObject) {
    clear_has_write_type();
    ::substrait::ExtensionObject* temp = _impl_.write_type_.extension_object_;
    _impl_.write_type_.extension_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DdlRel::unsafe_arena_set_allocated_extension_object(::substrait::ExtensionObject* extension_object) {
  clear_write_type();
  if (extension_object) {
    set_has_extension_object();
    _impl_.write_type_.extension_object_ = extension_object;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.DdlRel.extension_object)
}
inline ::substrait::ExtensionObject* DdlRel::_internal_mutable_extension_object() {
  if (write_type_case() != kExtensionObject) {
    clear_write_type();
    set_has_extension_object();
    _impl_.write_type_.extension_object_ = CreateMaybeMessage< ::substrait::ExtensionObject >(GetArenaForAllocation());
  }
  return _impl_.write_type_.extension_object_;
}
inline ::substrait::ExtensionObject* DdlRel::mutable_extension_object() {
  ::substrait::ExtensionObject* _msg = _internal_mutable_extension_object();
  // @@protoc_insertion_point(field_mutable:substrait.DdlRel.extension_object)
  return _msg;
}

// .substrait.NamedStruct table_schema = 3 [json_name = "tableSchema"];
inline bool DdlRel::has_table_schema() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_schema_ != nullptr);
  return value;
}
inline const ::substrait::NamedStruct& DdlRel::_internal_table_schema() const {
  const ::substrait::NamedStruct* p = _impl_.table_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::NamedStruct&>(
      ::substrait::_NamedStruct_default_instance_);
}
inline const ::substrait::NamedStruct& DdlRel::table_schema() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.table_schema)
  return _internal_table_schema();
}
inline void DdlRel::unsafe_arena_set_allocated_table_schema(
    ::substrait::NamedStruct* table_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  _impl_.table_schema_ = table_schema;
  if (table_schema) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.DdlRel.table_schema)
}
inline ::substrait::NamedStruct* DdlRel::release_table_schema() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::NamedStruct* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::NamedStruct* DdlRel::unsafe_arena_release_table_schema() {
  // @@protoc_insertion_point(field_release:substrait.DdlRel.table_schema)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::NamedStruct* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
  return temp;
}
inline ::substrait::NamedStruct* DdlRel::_internal_mutable_table_schema() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::NamedStruct>(GetArenaForAllocation());
    _impl_.table_schema_ = p;
  }
  return _impl_.table_schema_;
}
inline ::substrait::NamedStruct* DdlRel::mutable_table_schema() {
  ::substrait::NamedStruct* _msg = _internal_mutable_table_schema();
  // @@protoc_insertion_point(field_mutable:substrait.DdlRel.table_schema)
  return _msg;
}
inline void DdlRel::set_allocated_table_schema(::substrait::NamedStruct* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema));
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.DdlRel.table_schema)
}

// .substrait.Expression.Literal.Struct table_defaults = 4 [json_name = "tableDefaults"];
inline bool DdlRel::has_table_defaults() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_defaults_ != nullptr);
  return value;
}
inline void DdlRel::clear_table_defaults() {
  if (_impl_.table_defaults_ != nullptr) _impl_.table_defaults_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression_Literal_Struct& DdlRel::_internal_table_defaults() const {
  const ::substrait::Expression_Literal_Struct* p = _impl_.table_defaults_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal_Struct&>(
      ::substrait::_Expression_Literal_Struct_default_instance_);
}
inline const ::substrait::Expression_Literal_Struct& DdlRel::table_defaults() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.table_defaults)
  return _internal_table_defaults();
}
inline void DdlRel::unsafe_arena_set_allocated_table_defaults(
    ::substrait::Expression_Literal_Struct* table_defaults) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_defaults_);
  }
  _impl_.table_defaults_ = table_defaults;
  if (table_defaults) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.DdlRel.table_defaults)
}
inline ::substrait::Expression_Literal_Struct* DdlRel::release_table_defaults() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_Literal_Struct* temp = _impl_.table_defaults_;
  _impl_.table_defaults_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal_Struct* DdlRel::unsafe_arena_release_table_defaults() {
  // @@protoc_insertion_point(field_release:substrait.DdlRel.table_defaults)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_Literal_Struct* temp = _impl_.table_defaults_;
  _impl_.table_defaults_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal_Struct* DdlRel::_internal_mutable_table_defaults() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.table_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal_Struct>(GetArenaForAllocation());
    _impl_.table_defaults_ = p;
  }
  return _impl_.table_defaults_;
}
inline ::substrait::Expression_Literal_Struct* DdlRel::mutable_table_defaults() {
  ::substrait::Expression_Literal_Struct* _msg = _internal_mutable_table_defaults();
  // @@protoc_insertion_point(field_mutable:substrait.DdlRel.table_defaults)
  return _msg;
}
inline void DdlRel::set_allocated_table_defaults(::substrait::Expression_Literal_Struct* table_defaults) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_defaults_;
  }
  if (table_defaults) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table_defaults);
    if (message_arena != submessage_arena) {
      table_defaults = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_defaults, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.table_defaults_ = table_defaults;
  // @@protoc_insertion_point(field_set_allocated:substrait.DdlRel.table_defaults)
}

// .substrait.DdlRel.DdlObject object = 5 [json_name = "object"];
inline void DdlRel::clear_object() {
  _impl_.object_ = 0;
}
inline ::substrait::DdlRel_DdlObject DdlRel::object() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.object)
  return _internal_object();
}
inline void DdlRel::set_object(::substrait::DdlRel_DdlObject value) {
   _internal_set_object(value);
  // @@protoc_insertion_point(field_set:substrait.DdlRel.object)
}
inline ::substrait::DdlRel_DdlObject DdlRel::_internal_object() const {
  return static_cast<::substrait::DdlRel_DdlObject>(_impl_.object_);
}
inline void DdlRel::_internal_set_object(::substrait::DdlRel_DdlObject value) {
  ;
  _impl_.object_ = value;
}

// .substrait.DdlRel.DdlOp op = 6 [json_name = "op"];
inline void DdlRel::clear_op() {
  _impl_.op_ = 0;
}
inline ::substrait::DdlRel_DdlOp DdlRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.op)
  return _internal_op();
}
inline void DdlRel::set_op(::substrait::DdlRel_DdlOp value) {
   _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.DdlRel.op)
}
inline ::substrait::DdlRel_DdlOp DdlRel::_internal_op() const {
  return static_cast<::substrait::DdlRel_DdlOp>(_impl_.op_);
}
inline void DdlRel::_internal_set_op(::substrait::DdlRel_DdlOp value) {
  ;
  _impl_.op_ = value;
}

// .substrait.Rel view_definition = 7 [json_name = "viewDefinition"];
inline bool DdlRel::has_view_definition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_definition_ != nullptr);
  return value;
}
inline void DdlRel::clear_view_definition() {
  if (_impl_.view_definition_ != nullptr) _impl_.view_definition_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Rel& DdlRel::_internal_view_definition() const {
  const ::substrait::Rel* p = _impl_.view_definition_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& DdlRel::view_definition() const {
  // @@protoc_insertion_point(field_get:substrait.DdlRel.view_definition)
  return _internal_view_definition();
}
inline void DdlRel::unsafe_arena_set_allocated_view_definition(
    ::substrait::Rel* view_definition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_definition_);
  }
  _impl_.view_definition_ = view_definition;
  if (view_definition) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.DdlRel.view_definition)
}
inline ::substrait::Rel* DdlRel::release_view_definition() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.view_definition_;
  _impl_.view_definition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* DdlRel::unsafe_arena_release_view_definition() {
  // @@protoc_insertion_point(field_release:substrait.DdlRel.view_definition)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.view_definition_;
  _impl_.view_definition_ = nullptr;
  return temp;
}
inline ::substrait::Rel* DdlRel::_internal_mutable_view_definition() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.view_definition_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.view_definition_ = p;
  }
  return _impl_.view_definition_;
}
inline ::substrait::Rel* DdlRel::mutable_view_definition() {
  ::substrait::Rel* _msg = _internal_mutable_view_definition();
  // @@protoc_insertion_point(field_mutable:substrait.DdlRel.view_definition)
  return _msg;
}
inline void DdlRel::set_allocated_view_definition(::substrait::Rel* view_definition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.view_definition_;
  }
  if (view_definition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(view_definition);
    if (message_arena != submessage_arena) {
      view_definition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_definition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.view_definition_ = view_definition;
  // @@protoc_insertion_point(field_set_allocated:substrait.DdlRel.view_definition)
}

inline bool DdlRel::has_write_type() const {
  return write_type_case() != WRITE_TYPE_NOT_SET;
}
inline void DdlRel::clear_has_write_type() {
  _impl_._oneof_case_[0] = WRITE_TYPE_NOT_SET;
}
inline DdlRel::WriteTypeCase DdlRel::write_type_case() const {
  return DdlRel::WriteTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// WriteRel

// .substrait.NamedObjectWrite named_table = 1 [json_name = "namedTable"];
inline bool WriteRel::has_named_table() const {
  return write_type_case() == kNamedTable;
}
inline bool WriteRel::_internal_has_named_table() const {
  return write_type_case() == kNamedTable;
}
inline void WriteRel::set_has_named_table() {
  _impl_._oneof_case_[0] = kNamedTable;
}
inline void WriteRel::clear_named_table() {
  if (write_type_case() == kNamedTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_type_.named_table_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::NamedObjectWrite* WriteRel::release_named_table() {
  // @@protoc_insertion_point(field_release:substrait.WriteRel.named_table)
  if (write_type_case() == kNamedTable) {
    clear_has_write_type();
    ::substrait::NamedObjectWrite* temp = _impl_.write_type_.named_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::NamedObjectWrite& WriteRel::_internal_named_table() const {
  return write_type_case() == kNamedTable
      ? *_impl_.write_type_.named_table_
      : reinterpret_cast<::substrait::NamedObjectWrite&>(::substrait::_NamedObjectWrite_default_instance_);
}
inline const ::substrait::NamedObjectWrite& WriteRel::named_table() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.named_table)
  return _internal_named_table();
}
inline ::substrait::NamedObjectWrite* WriteRel::unsafe_arena_release_named_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.WriteRel.named_table)
  if (write_type_case() == kNamedTable) {
    clear_has_write_type();
    ::substrait::NamedObjectWrite* temp = _impl_.write_type_.named_table_;
    _impl_.write_type_.named_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteRel::unsafe_arena_set_allocated_named_table(::substrait::NamedObjectWrite* named_table) {
  clear_write_type();
  if (named_table) {
    set_has_named_table();
    _impl_.write_type_.named_table_ = named_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.WriteRel.named_table)
}
inline ::substrait::NamedObjectWrite* WriteRel::_internal_mutable_named_table() {
  if (write_type_case() != kNamedTable) {
    clear_write_type();
    set_has_named_table();
    _impl_.write_type_.named_table_ = CreateMaybeMessage< ::substrait::NamedObjectWrite >(GetArenaForAllocation());
  }
  return _impl_.write_type_.named_table_;
}
inline ::substrait::NamedObjectWrite* WriteRel::mutable_named_table() {
  ::substrait::NamedObjectWrite* _msg = _internal_mutable_named_table();
  // @@protoc_insertion_point(field_mutable:substrait.WriteRel.named_table)
  return _msg;
}

// .substrait.ExtensionObject extension_table = 2 [json_name = "extensionTable"];
inline bool WriteRel::has_extension_table() const {
  return write_type_case() == kExtensionTable;
}
inline bool WriteRel::_internal_has_extension_table() const {
  return write_type_case() == kExtensionTable;
}
inline void WriteRel::set_has_extension_table() {
  _impl_._oneof_case_[0] = kExtensionTable;
}
inline void WriteRel::clear_extension_table() {
  if (write_type_case() == kExtensionTable) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.write_type_.extension_table_;
    }
    clear_has_write_type();
  }
}
inline ::substrait::ExtensionObject* WriteRel::release_extension_table() {
  // @@protoc_insertion_point(field_release:substrait.WriteRel.extension_table)
  if (write_type_case() == kExtensionTable) {
    clear_has_write_type();
    ::substrait::ExtensionObject* temp = _impl_.write_type_.extension_table_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.write_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::ExtensionObject& WriteRel::_internal_extension_table() const {
  return write_type_case() == kExtensionTable
      ? *_impl_.write_type_.extension_table_
      : reinterpret_cast<::substrait::ExtensionObject&>(::substrait::_ExtensionObject_default_instance_);
}
inline const ::substrait::ExtensionObject& WriteRel::extension_table() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.extension_table)
  return _internal_extension_table();
}
inline ::substrait::ExtensionObject* WriteRel::unsafe_arena_release_extension_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.WriteRel.extension_table)
  if (write_type_case() == kExtensionTable) {
    clear_has_write_type();
    ::substrait::ExtensionObject* temp = _impl_.write_type_.extension_table_;
    _impl_.write_type_.extension_table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WriteRel::unsafe_arena_set_allocated_extension_table(::substrait::ExtensionObject* extension_table) {
  clear_write_type();
  if (extension_table) {
    set_has_extension_table();
    _impl_.write_type_.extension_table_ = extension_table;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.WriteRel.extension_table)
}
inline ::substrait::ExtensionObject* WriteRel::_internal_mutable_extension_table() {
  if (write_type_case() != kExtensionTable) {
    clear_write_type();
    set_has_extension_table();
    _impl_.write_type_.extension_table_ = CreateMaybeMessage< ::substrait::ExtensionObject >(GetArenaForAllocation());
  }
  return _impl_.write_type_.extension_table_;
}
inline ::substrait::ExtensionObject* WriteRel::mutable_extension_table() {
  ::substrait::ExtensionObject* _msg = _internal_mutable_extension_table();
  // @@protoc_insertion_point(field_mutable:substrait.WriteRel.extension_table)
  return _msg;
}

// .substrait.NamedStruct table_schema = 3 [json_name = "tableSchema"];
inline bool WriteRel::has_table_schema() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.table_schema_ != nullptr);
  return value;
}
inline const ::substrait::NamedStruct& WriteRel::_internal_table_schema() const {
  const ::substrait::NamedStruct* p = _impl_.table_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::NamedStruct&>(
      ::substrait::_NamedStruct_default_instance_);
}
inline const ::substrait::NamedStruct& WriteRel::table_schema() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.table_schema)
  return _internal_table_schema();
}
inline void WriteRel::unsafe_arena_set_allocated_table_schema(
    ::substrait::NamedStruct* table_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  _impl_.table_schema_ = table_schema;
  if (table_schema) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.WriteRel.table_schema)
}
inline ::substrait::NamedStruct* WriteRel::release_table_schema() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::NamedStruct* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::NamedStruct* WriteRel::unsafe_arena_release_table_schema() {
  // @@protoc_insertion_point(field_release:substrait.WriteRel.table_schema)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::NamedStruct* temp = _impl_.table_schema_;
  _impl_.table_schema_ = nullptr;
  return temp;
}
inline ::substrait::NamedStruct* WriteRel::_internal_mutable_table_schema() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.table_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::NamedStruct>(GetArenaForAllocation());
    _impl_.table_schema_ = p;
  }
  return _impl_.table_schema_;
}
inline ::substrait::NamedStruct* WriteRel::mutable_table_schema() {
  ::substrait::NamedStruct* _msg = _internal_mutable_table_schema();
  // @@protoc_insertion_point(field_mutable:substrait.WriteRel.table_schema)
  return _msg;
}
inline void WriteRel::set_allocated_table_schema(::substrait::NamedStruct* table_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_schema_);
  }
  if (table_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_schema));
    if (message_arena != submessage_arena) {
      table_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table_schema, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.table_schema_ = table_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.WriteRel.table_schema)
}

// .substrait.WriteRel.WriteOp op = 4 [json_name = "op"];
inline void WriteRel::clear_op() {
  _impl_.op_ = 0;
}
inline ::substrait::WriteRel_WriteOp WriteRel::op() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.op)
  return _internal_op();
}
inline void WriteRel::set_op(::substrait::WriteRel_WriteOp value) {
   _internal_set_op(value);
  // @@protoc_insertion_point(field_set:substrait.WriteRel.op)
}
inline ::substrait::WriteRel_WriteOp WriteRel::_internal_op() const {
  return static_cast<::substrait::WriteRel_WriteOp>(_impl_.op_);
}
inline void WriteRel::_internal_set_op(::substrait::WriteRel_WriteOp value) {
  ;
  _impl_.op_ = value;
}

// .substrait.Rel input = 5 [json_name = "input"];
inline bool WriteRel::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void WriteRel::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& WriteRel::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& WriteRel::input() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.input)
  return _internal_input();
}
inline void WriteRel::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.WriteRel.input)
}
inline ::substrait::Rel* WriteRel::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* WriteRel::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.WriteRel.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* WriteRel::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* WriteRel::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.WriteRel.input)
  return _msg;
}
inline void WriteRel::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.WriteRel.input)
}

// .substrait.WriteRel.OutputMode output = 6 [json_name = "output"];
inline void WriteRel::clear_output() {
  _impl_.output_ = 0;
}
inline ::substrait::WriteRel_OutputMode WriteRel::output() const {
  // @@protoc_insertion_point(field_get:substrait.WriteRel.output)
  return _internal_output();
}
inline void WriteRel::set_output(::substrait::WriteRel_OutputMode value) {
   _internal_set_output(value);
  // @@protoc_insertion_point(field_set:substrait.WriteRel.output)
}
inline ::substrait::WriteRel_OutputMode WriteRel::_internal_output() const {
  return static_cast<::substrait::WriteRel_OutputMode>(_impl_.output_);
}
inline void WriteRel::_internal_set_output(::substrait::WriteRel_OutputMode value) {
  ;
  _impl_.output_ = value;
}

inline bool WriteRel::has_write_type() const {
  return write_type_case() != WRITE_TYPE_NOT_SET;
}
inline void WriteRel::clear_has_write_type() {
  _impl_._oneof_case_[0] = WRITE_TYPE_NOT_SET;
}
inline WriteRel::WriteTypeCase WriteRel::write_type_case() const {
  return WriteRel::WriteTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// HashJoinRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool HashJoinRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void HashJoinRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& HashJoinRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& HashJoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.common)
  return _internal_common();
}
inline void HashJoinRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.HashJoinRel.common)
}
inline ::substrait::RelCommon* HashJoinRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* HashJoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.HashJoinRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* HashJoinRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* HashJoinRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.common)
  return _msg;
}
inline void HashJoinRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.HashJoinRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool HashJoinRel::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_ != nullptr);
  return value;
}
inline void HashJoinRel::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& HashJoinRel::_internal_left() const {
  const ::substrait::Rel* p = _impl_.left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& HashJoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.left)
  return _internal_left();
}
inline void HashJoinRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_);
  }
  _impl_.left_ = left;
  if (left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.HashJoinRel.left)
}
inline ::substrait::Rel* HashJoinRel::release_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* HashJoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.HashJoinRel.left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* HashJoinRel::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.left_ = p;
  }
  return _impl_.left_;
}
inline ::substrait::Rel* HashJoinRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.left)
  return _msg;
}
inline void HashJoinRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.HashJoinRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool HashJoinRel::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void HashJoinRel::clear_right() {
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Rel& HashJoinRel::_internal_right() const {
  const ::substrait::Rel* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& HashJoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.right)
  return _internal_right();
}
inline void HashJoinRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.HashJoinRel.right)
}
inline ::substrait::Rel* HashJoinRel::release_right() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* HashJoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.HashJoinRel.right)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* HashJoinRel::_internal_mutable_right() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::substrait::Rel* HashJoinRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.right)
  return _msg;
}
inline void HashJoinRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.HashJoinRel.right)
}

// repeated .substrait.Expression.FieldReference left_keys = 4 [json_name = "leftKeys"];
inline int HashJoinRel::_internal_left_keys_size() const {
  return _impl_.left_keys_.size();
}
inline int HashJoinRel::left_keys_size() const {
  return _internal_left_keys_size();
}
inline void HashJoinRel::clear_left_keys() {
  _internal_mutable_left_keys()->Clear();
}
inline ::substrait::Expression_FieldReference* HashJoinRel::mutable_left_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.left_keys)
  return _internal_mutable_left_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
HashJoinRel::mutable_left_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.HashJoinRel.left_keys)
  return _internal_mutable_left_keys();
}
inline const ::substrait::Expression_FieldReference& HashJoinRel::_internal_left_keys(int index) const {
  return _internal_left_keys().Get(index);
}
inline const ::substrait::Expression_FieldReference& HashJoinRel::left_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.left_keys)
  return _internal_left_keys(index);
}
inline ::substrait::Expression_FieldReference* HashJoinRel::_internal_add_left_keys() {
  return _internal_mutable_left_keys()->Add();
}
inline ::substrait::Expression_FieldReference* HashJoinRel::add_left_keys() {
  ::substrait::Expression_FieldReference* _add = _internal_add_left_keys();
  // @@protoc_insertion_point(field_add:substrait.HashJoinRel.left_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
HashJoinRel::left_keys() const {
  // @@protoc_insertion_point(field_list:substrait.HashJoinRel.left_keys)
  return _internal_left_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>&
HashJoinRel::_internal_left_keys() const {
  return _impl_.left_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>*
HashJoinRel::_internal_mutable_left_keys() {
  return &_impl_.left_keys_;
}

// repeated .substrait.Expression.FieldReference right_keys = 5 [json_name = "rightKeys"];
inline int HashJoinRel::_internal_right_keys_size() const {
  return _impl_.right_keys_.size();
}
inline int HashJoinRel::right_keys_size() const {
  return _internal_right_keys_size();
}
inline void HashJoinRel::clear_right_keys() {
  _internal_mutable_right_keys()->Clear();
}
inline ::substrait::Expression_FieldReference* HashJoinRel::mutable_right_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.right_keys)
  return _internal_mutable_right_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
HashJoinRel::mutable_right_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.HashJoinRel.right_keys)
  return _internal_mutable_right_keys();
}
inline const ::substrait::Expression_FieldReference& HashJoinRel::_internal_right_keys(int index) const {
  return _internal_right_keys().Get(index);
}
inline const ::substrait::Expression_FieldReference& HashJoinRel::right_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.right_keys)
  return _internal_right_keys(index);
}
inline ::substrait::Expression_FieldReference* HashJoinRel::_internal_add_right_keys() {
  return _internal_mutable_right_keys()->Add();
}
inline ::substrait::Expression_FieldReference* HashJoinRel::add_right_keys() {
  ::substrait::Expression_FieldReference* _add = _internal_add_right_keys();
  // @@protoc_insertion_point(field_add:substrait.HashJoinRel.right_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
HashJoinRel::right_keys() const {
  // @@protoc_insertion_point(field_list:substrait.HashJoinRel.right_keys)
  return _internal_right_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>&
HashJoinRel::_internal_right_keys() const {
  return _impl_.right_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>*
HashJoinRel::_internal_mutable_right_keys() {
  return &_impl_.right_keys_;
}

// .substrait.Expression post_join_filter = 6 [json_name = "postJoinFilter"];
inline bool HashJoinRel::has_post_join_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_join_filter_ != nullptr);
  return value;
}
inline void HashJoinRel::clear_post_join_filter() {
  if (_impl_.post_join_filter_ != nullptr) _impl_.post_join_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::substrait::Expression& HashJoinRel::_internal_post_join_filter() const {
  const ::substrait::Expression* p = _impl_.post_join_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& HashJoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void HashJoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::Expression* post_join_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.post_join_filter_);
  }
  _impl_.post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.HashJoinRel.post_join_filter)
}
inline ::substrait::Expression* HashJoinRel::release_post_join_filter() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* HashJoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.HashJoinRel.post_join_filter)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* HashJoinRel::_internal_mutable_post_join_filter() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.post_join_filter_ = p;
  }
  return _impl_.post_join_filter_;
}
inline ::substrait::Expression* HashJoinRel::mutable_post_join_filter() {
  ::substrait::Expression* _msg = _internal_mutable_post_join_filter();
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.post_join_filter)
  return _msg;
}
inline void HashJoinRel::set_allocated_post_join_filter(::substrait::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.HashJoinRel.post_join_filter)
}

// .substrait.HashJoinRel.JoinType type = 7 [json_name = "type"];
inline void HashJoinRel::clear_type() {
  _impl_.type_ = 0;
}
inline ::substrait::HashJoinRel_JoinType HashJoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.type)
  return _internal_type();
}
inline void HashJoinRel::set_type(::substrait::HashJoinRel_JoinType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.HashJoinRel.type)
}
inline ::substrait::HashJoinRel_JoinType HashJoinRel::_internal_type() const {
  return static_cast<::substrait::HashJoinRel_JoinType>(_impl_.type_);
}
inline void HashJoinRel::_internal_set_type(::substrait::HashJoinRel_JoinType value) {
  ;
  _impl_.type_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool HashJoinRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& HashJoinRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& HashJoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.HashJoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void HashJoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.HashJoinRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* HashJoinRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* HashJoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.HashJoinRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* HashJoinRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* HashJoinRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.HashJoinRel.advanced_extension)
  return _msg;
}
inline void HashJoinRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.HashJoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// MergeJoinRel

// .substrait.RelCommon common = 1 [json_name = "common"];
inline bool MergeJoinRel::has_common() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.common_ != nullptr);
  return value;
}
inline void MergeJoinRel::clear_common() {
  if (_impl_.common_ != nullptr) _impl_.common_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::RelCommon& MergeJoinRel::_internal_common() const {
  const ::substrait::RelCommon* p = _impl_.common_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::RelCommon&>(
      ::substrait::_RelCommon_default_instance_);
}
inline const ::substrait::RelCommon& MergeJoinRel::common() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.common)
  return _internal_common();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_common(
    ::substrait::RelCommon* common) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.common_);
  }
  _impl_.common_ = common;
  if (common) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.MergeJoinRel.common)
}
inline ::substrait::RelCommon* MergeJoinRel::release_common() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::RelCommon* MergeJoinRel::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:substrait.MergeJoinRel.common)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::RelCommon* temp = _impl_.common_;
  _impl_.common_ = nullptr;
  return temp;
}
inline ::substrait::RelCommon* MergeJoinRel::_internal_mutable_common() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.common_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::RelCommon>(GetArenaForAllocation());
    _impl_.common_ = p;
  }
  return _impl_.common_;
}
inline ::substrait::RelCommon* MergeJoinRel::mutable_common() {
  ::substrait::RelCommon* _msg = _internal_mutable_common();
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.common)
  return _msg;
}
inline void MergeJoinRel::set_allocated_common(::substrait::RelCommon* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.common_ = common;
  // @@protoc_insertion_point(field_set_allocated:substrait.MergeJoinRel.common)
}

// .substrait.Rel left = 2 [json_name = "left"];
inline bool MergeJoinRel::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_ != nullptr);
  return value;
}
inline void MergeJoinRel::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& MergeJoinRel::_internal_left() const {
  const ::substrait::Rel* p = _impl_.left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& MergeJoinRel::left() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.left)
  return _internal_left();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_left(
    ::substrait::Rel* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_);
  }
  _impl_.left_ = left;
  if (left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.MergeJoinRel.left)
}
inline ::substrait::Rel* MergeJoinRel::release_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* MergeJoinRel::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.MergeJoinRel.left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.left_;
  _impl_.left_ = nullptr;
  return temp;
}
inline ::substrait::Rel* MergeJoinRel::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.left_ = p;
  }
  return _impl_.left_;
}
inline ::substrait::Rel* MergeJoinRel::mutable_left() {
  ::substrait::Rel* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.left)
  return _msg;
}
inline void MergeJoinRel::set_allocated_left(::substrait::Rel* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.MergeJoinRel.left)
}

// .substrait.Rel right = 3 [json_name = "right"];
inline bool MergeJoinRel::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void MergeJoinRel::clear_right() {
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::substrait::Rel& MergeJoinRel::_internal_right() const {
  const ::substrait::Rel* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& MergeJoinRel::right() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.right)
  return _internal_right();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.MergeJoinRel.right)
}
inline ::substrait::Rel* MergeJoinRel::release_right() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* MergeJoinRel::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.MergeJoinRel.right)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* MergeJoinRel::_internal_mutable_right() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::substrait::Rel* MergeJoinRel::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.right)
  return _msg;
}
inline void MergeJoinRel::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.MergeJoinRel.right)
}

// repeated .substrait.Expression.FieldReference left_keys = 4 [json_name = "leftKeys"];
inline int MergeJoinRel::_internal_left_keys_size() const {
  return _impl_.left_keys_.size();
}
inline int MergeJoinRel::left_keys_size() const {
  return _internal_left_keys_size();
}
inline void MergeJoinRel::clear_left_keys() {
  _internal_mutable_left_keys()->Clear();
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::mutable_left_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.left_keys)
  return _internal_mutable_left_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
MergeJoinRel::mutable_left_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.MergeJoinRel.left_keys)
  return _internal_mutable_left_keys();
}
inline const ::substrait::Expression_FieldReference& MergeJoinRel::_internal_left_keys(int index) const {
  return _internal_left_keys().Get(index);
}
inline const ::substrait::Expression_FieldReference& MergeJoinRel::left_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.left_keys)
  return _internal_left_keys(index);
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::_internal_add_left_keys() {
  return _internal_mutable_left_keys()->Add();
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::add_left_keys() {
  ::substrait::Expression_FieldReference* _add = _internal_add_left_keys();
  // @@protoc_insertion_point(field_add:substrait.MergeJoinRel.left_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
MergeJoinRel::left_keys() const {
  // @@protoc_insertion_point(field_list:substrait.MergeJoinRel.left_keys)
  return _internal_left_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>&
MergeJoinRel::_internal_left_keys() const {
  return _impl_.left_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>*
MergeJoinRel::_internal_mutable_left_keys() {
  return &_impl_.left_keys_;
}

// repeated .substrait.Expression.FieldReference right_keys = 5 [json_name = "rightKeys"];
inline int MergeJoinRel::_internal_right_keys_size() const {
  return _impl_.right_keys_.size();
}
inline int MergeJoinRel::right_keys_size() const {
  return _internal_right_keys_size();
}
inline void MergeJoinRel::clear_right_keys() {
  _internal_mutable_right_keys()->Clear();
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::mutable_right_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.right_keys)
  return _internal_mutable_right_keys()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >*
MergeJoinRel::mutable_right_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.MergeJoinRel.right_keys)
  return _internal_mutable_right_keys();
}
inline const ::substrait::Expression_FieldReference& MergeJoinRel::_internal_right_keys(int index) const {
  return _internal_right_keys().Get(index);
}
inline const ::substrait::Expression_FieldReference& MergeJoinRel::right_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.right_keys)
  return _internal_right_keys(index);
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::_internal_add_right_keys() {
  return _internal_mutable_right_keys()->Add();
}
inline ::substrait::Expression_FieldReference* MergeJoinRel::add_right_keys() {
  ::substrait::Expression_FieldReference* _add = _internal_add_right_keys();
  // @@protoc_insertion_point(field_add:substrait.MergeJoinRel.right_keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_FieldReference >&
MergeJoinRel::right_keys() const {
  // @@protoc_insertion_point(field_list:substrait.MergeJoinRel.right_keys)
  return _internal_right_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>&
MergeJoinRel::_internal_right_keys() const {
  return _impl_.right_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_FieldReference>*
MergeJoinRel::_internal_mutable_right_keys() {
  return &_impl_.right_keys_;
}

// .substrait.Expression post_join_filter = 6 [json_name = "postJoinFilter"];
inline bool MergeJoinRel::has_post_join_filter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.post_join_filter_ != nullptr);
  return value;
}
inline void MergeJoinRel::clear_post_join_filter() {
  if (_impl_.post_join_filter_ != nullptr) _impl_.post_join_filter_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::substrait::Expression& MergeJoinRel::_internal_post_join_filter() const {
  const ::substrait::Expression* p = _impl_.post_join_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& MergeJoinRel::post_join_filter() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.post_join_filter)
  return _internal_post_join_filter();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_post_join_filter(
    ::substrait::Expression* post_join_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.post_join_filter_);
  }
  _impl_.post_join_filter_ = post_join_filter;
  if (post_join_filter) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.MergeJoinRel.post_join_filter)
}
inline ::substrait::Expression* MergeJoinRel::release_post_join_filter() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* MergeJoinRel::unsafe_arena_release_post_join_filter() {
  // @@protoc_insertion_point(field_release:substrait.MergeJoinRel.post_join_filter)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::substrait::Expression* temp = _impl_.post_join_filter_;
  _impl_.post_join_filter_ = nullptr;
  return temp;
}
inline ::substrait::Expression* MergeJoinRel::_internal_mutable_post_join_filter() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.post_join_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.post_join_filter_ = p;
  }
  return _impl_.post_join_filter_;
}
inline ::substrait::Expression* MergeJoinRel::mutable_post_join_filter() {
  ::substrait::Expression* _msg = _internal_mutable_post_join_filter();
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.post_join_filter)
  return _msg;
}
inline void MergeJoinRel::set_allocated_post_join_filter(::substrait::Expression* post_join_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.post_join_filter_;
  }
  if (post_join_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(post_join_filter);
    if (message_arena != submessage_arena) {
      post_join_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, post_join_filter, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.post_join_filter_ = post_join_filter;
  // @@protoc_insertion_point(field_set_allocated:substrait.MergeJoinRel.post_join_filter)
}

// .substrait.MergeJoinRel.JoinType type = 7 [json_name = "type"];
inline void MergeJoinRel::clear_type() {
  _impl_.type_ = 0;
}
inline ::substrait::MergeJoinRel_JoinType MergeJoinRel::type() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.type)
  return _internal_type();
}
inline void MergeJoinRel::set_type(::substrait::MergeJoinRel_JoinType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:substrait.MergeJoinRel.type)
}
inline ::substrait::MergeJoinRel_JoinType MergeJoinRel::_internal_type() const {
  return static_cast<::substrait::MergeJoinRel_JoinType>(_impl_.type_);
}
inline void MergeJoinRel::_internal_set_type(::substrait::MergeJoinRel_JoinType value) {
  ;
  _impl_.type_ = value;
}

// .substrait.extensions.AdvancedExtension advanced_extension = 10 [json_name = "advancedExtension"];
inline bool MergeJoinRel::has_advanced_extension() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extension_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& MergeJoinRel::_internal_advanced_extension() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extension_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& MergeJoinRel::advanced_extension() const {
  // @@protoc_insertion_point(field_get:substrait.MergeJoinRel.advanced_extension)
  return _internal_advanced_extension();
}
inline void MergeJoinRel::unsafe_arena_set_allocated_advanced_extension(
    ::substrait::extensions::AdvancedExtension* advanced_extension) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  _impl_.advanced_extension_ = advanced_extension;
  if (advanced_extension) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.MergeJoinRel.advanced_extension)
}
inline ::substrait::extensions::AdvancedExtension* MergeJoinRel::release_advanced_extension() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* MergeJoinRel::unsafe_arena_release_advanced_extension() {
  // @@protoc_insertion_point(field_release:substrait.MergeJoinRel.advanced_extension)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extension_;
  _impl_.advanced_extension_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* MergeJoinRel::_internal_mutable_advanced_extension() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.advanced_extension_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extension_ = p;
  }
  return _impl_.advanced_extension_;
}
inline ::substrait::extensions::AdvancedExtension* MergeJoinRel::mutable_advanced_extension() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extension();
  // @@protoc_insertion_point(field_mutable:substrait.MergeJoinRel.advanced_extension)
  return _msg;
}
inline void MergeJoinRel::set_allocated_advanced_extension(::substrait::extensions::AdvancedExtension* advanced_extension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extension_);
  }
  if (advanced_extension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extension));
    if (message_arena != submessage_arena) {
      advanced_extension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extension, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.advanced_extension_ = advanced_extension;
  // @@protoc_insertion_point(field_set_allocated:substrait.MergeJoinRel.advanced_extension)
}

// -------------------------------------------------------------------

// FunctionArgument

// string enum = 1 [json_name = "enum"];
inline bool FunctionArgument::has_enum_() const {
  return arg_type_case() == kEnum;
}
inline void FunctionArgument::set_has_enum_() {
  _impl_._oneof_case_[0] = kEnum;
}
inline void FunctionArgument::clear_enum_() {
  if (arg_type_case() == kEnum) {
    _impl_.arg_type_.enum__.Destroy();
    clear_has_arg_type();
  }
}
inline const std::string& FunctionArgument::enum_() const {
  // @@protoc_insertion_point(field_get:substrait.FunctionArgument.enum)
  return _internal_enum_();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FunctionArgument::set_enum_(Arg_&& arg,
                                                     Args_... args) {
  if (arg_type_case() != kEnum) {
    clear_arg_type();

    set_has_enum_();
    _impl_.arg_type_.enum__.InitDefault();
  }
  _impl_.arg_type_.enum__.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.FunctionArgument.enum)
}
inline std::string* FunctionArgument::mutable_enum_() {
  std::string* _s = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:substrait.FunctionArgument.enum)
  return _s;
}
inline const std::string& FunctionArgument::_internal_enum_() const {
  if (arg_type_case() != kEnum) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.arg_type_.enum__.Get();
}
inline void FunctionArgument::_internal_set_enum_(const std::string& value) {
  if (arg_type_case() != kEnum) {
    clear_arg_type();

    set_has_enum_();
    _impl_.arg_type_.enum__.InitDefault();
  }


  _impl_.arg_type_.enum__.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionArgument::_internal_mutable_enum_() {
  if (arg_type_case() != kEnum) {
    clear_arg_type();

    set_has_enum_();
    _impl_.arg_type_.enum__.InitDefault();
  }
  return _impl_.arg_type_.enum__.Mutable( GetArenaForAllocation());
}
inline std::string* FunctionArgument::release_enum_() {
  // @@protoc_insertion_point(field_release:substrait.FunctionArgument.enum)
  if (arg_type_case() != kEnum) {
    return nullptr;
  }
  clear_has_arg_type();
  return _impl_.arg_type_.enum__.Release();
}
inline void FunctionArgument::set_allocated_enum_(std::string* value) {
  if (has_arg_type()) {
    clear_arg_type();
  }
  if (value != nullptr) {
    set_has_enum_();
    _impl_.arg_type_.enum__.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionArgument.enum)
}

// .substrait.Type type = 2 [json_name = "type"];
inline bool FunctionArgument::has_type() const {
  return arg_type_case() == kType;
}
inline bool FunctionArgument::_internal_has_type() const {
  return arg_type_case() == kType;
}
inline void FunctionArgument::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline ::substrait::Type* FunctionArgument::release_type() {
  // @@protoc_insertion_point(field_release:substrait.FunctionArgument.type)
  if (arg_type_case() == kType) {
    clear_has_arg_type();
    ::substrait::Type* temp = _impl_.arg_type_.type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.arg_type_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Type& FunctionArgument::_internal_type() const {
  return arg_type_case() == kType
      ? *_impl_.arg_type_.type_
      : reinterpret_cast<::substrait::Type&>(::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& FunctionArgument::type() const {
  // @@protoc_insertion_point(field_get:substrait.FunctionArgument.type)
  return _internal_type();
}
inline ::substrait::Type* FunctionArgument::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.FunctionArgument.type)
  if (arg_type_case() == kType) {
    clear_has_arg_type();
    ::substrait::Type* temp = _impl_.arg_type_.type_;
    _impl_.arg_type_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::unsafe_arena_set_allocated_type(::substrait::Type* type) {
  clear_arg_type();
  if (type) {
    set_has_type();
    _impl_.arg_type_.type_ = type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FunctionArgument.type)
}
inline ::substrait::Type* FunctionArgument::_internal_mutable_type() {
  if (arg_type_case() != kType) {
    clear_arg_type();
    set_has_type();
    _impl_.arg_type_.type_ = CreateMaybeMessage< ::substrait::Type >(GetArenaForAllocation());
  }
  return _impl_.arg_type_.type_;
}
inline ::substrait::Type* FunctionArgument::mutable_type() {
  ::substrait::Type* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:substrait.FunctionArgument.type)
  return _msg;
}

// .substrait.Expression value = 3 [json_name = "value"];
inline bool FunctionArgument::has_value() const {
  return arg_type_case() == kValue;
}
inline bool FunctionArgument::_internal_has_value() const {
  return arg_type_case() == kValue;
}
inline void FunctionArgument::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void FunctionArgument::clear_value() {
  if (arg_type_case() == kValue) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.arg_type_.value_;
    }
    clear_has_arg_type();
  }
}
inline ::substrait::Expression* FunctionArgument::release_value() {
  // @@protoc_insertion_point(field_release:substrait.FunctionArgument.value)
  if (arg_type_case() == kValue) {
    clear_has_arg_type();
    ::substrait::Expression* temp = _impl_.arg_type_.value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.arg_type_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression& FunctionArgument::_internal_value() const {
  return arg_type_case() == kValue
      ? *_impl_.arg_type_.value_
      : reinterpret_cast<::substrait::Expression&>(::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& FunctionArgument::value() const {
  // @@protoc_insertion_point(field_get:substrait.FunctionArgument.value)
  return _internal_value();
}
inline ::substrait::Expression* FunctionArgument::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.FunctionArgument.value)
  if (arg_type_case() == kValue) {
    clear_has_arg_type();
    ::substrait::Expression* temp = _impl_.arg_type_.value_;
    _impl_.arg_type_.value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FunctionArgument::unsafe_arena_set_allocated_value(::substrait::Expression* value) {
  clear_arg_type();
  if (value) {
    set_has_value();
    _impl_.arg_type_.value_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.FunctionArgument.value)
}
inline ::substrait::Expression* FunctionArgument::_internal_mutable_value() {
  if (arg_type_case() != kValue) {
    clear_arg_type();
    set_has_value();
    _impl_.arg_type_.value_ = CreateMaybeMessage< ::substrait::Expression >(GetArenaForAllocation());
  }
  return _impl_.arg_type_.value_;
}
inline ::substrait::Expression* FunctionArgument::mutable_value() {
  ::substrait::Expression* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.FunctionArgument.value)
  return _msg;
}

inline bool FunctionArgument::has_arg_type() const {
  return arg_type_case() != ARG_TYPE_NOT_SET;
}
inline void FunctionArgument::clear_has_arg_type() {
  _impl_._oneof_case_[0] = ARG_TYPE_NOT_SET;
}
inline FunctionArgument::ArgTypeCase FunctionArgument::arg_type_case() const {
  return FunctionArgument::ArgTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FunctionOption

// string name = 1 [json_name = "name"];
inline void FunctionOption::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FunctionOption::name() const {
  // @@protoc_insertion_point(field_get:substrait.FunctionOption.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FunctionOption::set_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.FunctionOption.name)
}
inline std::string* FunctionOption::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:substrait.FunctionOption.name)
  return _s;
}
inline const std::string& FunctionOption::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FunctionOption::_internal_set_name(const std::string& value) {
  ;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FunctionOption::_internal_mutable_name() {
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* FunctionOption::release_name() {
  // @@protoc_insertion_point(field_release:substrait.FunctionOption.name)
  return _impl_.name_.Release();
}
inline void FunctionOption::set_allocated_name(std::string* value) {
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.FunctionOption.name)
}

// repeated string preference = 2 [json_name = "preference"];
inline int FunctionOption::_internal_preference_size() const {
  return _impl_.preference_.size();
}
inline int FunctionOption::preference_size() const {
  return _internal_preference_size();
}
inline void FunctionOption::clear_preference() {
  _internal_mutable_preference()->Clear();
}
inline std::string* FunctionOption::add_preference() {
  std::string* _s = _internal_add_preference();
  // @@protoc_insertion_point(field_add_mutable:substrait.FunctionOption.preference)
  return _s;
}
inline const std::string& FunctionOption::preference(int index) const {
  // @@protoc_insertion_point(field_get:substrait.FunctionOption.preference)
  return _internal_preference(index);
}
inline std::string* FunctionOption::mutable_preference(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.FunctionOption.preference)
  return _internal_mutable_preference()->Mutable(index);
}
inline void FunctionOption::set_preference(int index, const std::string& value) {
  _internal_mutable_preference()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.FunctionOption.preference)
}
inline void FunctionOption::set_preference(int index, std::string&& value) {
  _internal_mutable_preference()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.FunctionOption.preference)
}
inline void FunctionOption::set_preference(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_preference()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.FunctionOption.preference)
}
inline void FunctionOption::set_preference(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_preference()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.FunctionOption.preference)
}
inline void FunctionOption::set_preference(int index, absl::string_view value) {
  _internal_mutable_preference()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.FunctionOption.preference)
}
inline void FunctionOption::add_preference(const std::string& value) {
  _internal_mutable_preference()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.FunctionOption.preference)
}
inline void FunctionOption::add_preference(std::string&& value) {
  _internal_mutable_preference()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.FunctionOption.preference)
}
inline void FunctionOption::add_preference(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_preference()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.FunctionOption.preference)
}
inline void FunctionOption::add_preference(const char* value, std::size_t size) {
  _internal_mutable_preference()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.FunctionOption.preference)
}
inline void FunctionOption::add_preference(absl::string_view value) {
  _internal_mutable_preference()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.FunctionOption.preference)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionOption::preference() const {
  // @@protoc_insertion_point(field_list:substrait.FunctionOption.preference)
  return _internal_preference();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* FunctionOption::mutable_preference() {
  // @@protoc_insertion_point(field_mutable_list:substrait.FunctionOption.preference)
  return _internal_mutable_preference();
}
inline const std::string& FunctionOption::_internal_preference(int index) const {
  return _internal_preference().Get(index);
}
inline std::string* FunctionOption::_internal_add_preference() {
  return _internal_mutable_preference()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FunctionOption::_internal_preference() const {
  return _impl_.preference_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FunctionOption::_internal_mutable_preference() {
  return &_impl_.preference_;
}

// -------------------------------------------------------------------

// Expression_Enum_Empty

// -------------------------------------------------------------------

// Expression_Enum

// string specified = 1 [json_name = "specified"];
inline bool Expression_Enum::has_specified() const {
  return enum_kind_case() == kSpecified;
}
inline void Expression_Enum::set_has_specified() {
  _impl_._oneof_case_[0] = kSpecified;
}
inline void Expression_Enum::clear_specified() {
  if (enum_kind_case() == kSpecified) {
    _impl_.enum_kind_.specified_.Destroy();
    clear_has_enum_kind();
  }
}
inline const std::string& Expression_Enum::specified() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Enum.specified)
  return _internal_specified();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Enum::set_specified(Arg_&& arg,
                                                     Args_... args) {
  if (enum_kind_case() != kSpecified) {
    clear_enum_kind();

    set_has_specified();
    _impl_.enum_kind_.specified_.InitDefault();
  }
  _impl_.enum_kind_.specified_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Enum.specified)
}
inline std::string* Expression_Enum::mutable_specified() {
  std::string* _s = _internal_mutable_specified();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Enum.specified)
  return _s;
}
inline const std::string& Expression_Enum::_internal_specified() const {
  if (enum_kind_case() != kSpecified) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.enum_kind_.specified_.Get();
}
inline void Expression_Enum::_internal_set_specified(const std::string& value) {
  if (enum_kind_case() != kSpecified) {
    clear_enum_kind();

    set_has_specified();
    _impl_.enum_kind_.specified_.InitDefault();
  }


  _impl_.enum_kind_.specified_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Enum::_internal_mutable_specified() {
  if (enum_kind_case() != kSpecified) {
    clear_enum_kind();

    set_has_specified();
    _impl_.enum_kind_.specified_.InitDefault();
  }
  return _impl_.enum_kind_.specified_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Enum::release_specified() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Enum.specified)
  if (enum_kind_case() != kSpecified) {
    return nullptr;
  }
  clear_has_enum_kind();
  return _impl_.enum_kind_.specified_.Release();
}
inline void Expression_Enum::set_allocated_specified(std::string* value) {
  if (has_enum_kind()) {
    clear_enum_kind();
  }
  if (value != nullptr) {
    set_has_specified();
    _impl_.enum_kind_.specified_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Enum.specified)
}

// .substrait.Expression.Enum.Empty unspecified = 2 [json_name = "unspecified"];
inline bool Expression_Enum::has_unspecified() const {
  return enum_kind_case() == kUnspecified;
}
inline bool Expression_Enum::_internal_has_unspecified() const {
  return enum_kind_case() == kUnspecified;
}
inline void Expression_Enum::set_has_unspecified() {
  _impl_._oneof_case_[0] = kUnspecified;
}
inline void Expression_Enum::clear_unspecified() {
  if (enum_kind_case() == kUnspecified) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.enum_kind_.unspecified_;
    }
    clear_has_enum_kind();
  }
}
inline ::substrait::Expression_Enum_Empty* Expression_Enum::release_unspecified() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Enum.unspecified)
  if (enum_kind_case() == kUnspecified) {
    clear_has_enum_kind();
    ::substrait::Expression_Enum_Empty* temp = _impl_.enum_kind_.unspecified_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.enum_kind_.unspecified_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Enum_Empty& Expression_Enum::_internal_unspecified() const {
  return enum_kind_case() == kUnspecified
      ? *_impl_.enum_kind_.unspecified_
      : reinterpret_cast<::substrait::Expression_Enum_Empty&>(::substrait::_Expression_Enum_Empty_default_instance_);
}
inline const ::substrait::Expression_Enum_Empty& Expression_Enum::unspecified() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Enum.unspecified)
  return _internal_unspecified();
}
inline ::substrait::Expression_Enum_Empty* Expression_Enum::unsafe_arena_release_unspecified() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Enum.unspecified)
  if (enum_kind_case() == kUnspecified) {
    clear_has_enum_kind();
    ::substrait::Expression_Enum_Empty* temp = _impl_.enum_kind_.unspecified_;
    _impl_.enum_kind_.unspecified_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Enum::unsafe_arena_set_allocated_unspecified(::substrait::Expression_Enum_Empty* unspecified) {
  clear_enum_kind();
  if (unspecified) {
    set_has_unspecified();
    _impl_.enum_kind_.unspecified_ = unspecified;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Enum.unspecified)
}
inline ::substrait::Expression_Enum_Empty* Expression_Enum::_internal_mutable_unspecified() {
  if (enum_kind_case() != kUnspecified) {
    clear_enum_kind();
    set_has_unspecified();
    _impl_.enum_kind_.unspecified_ = CreateMaybeMessage< ::substrait::Expression_Enum_Empty >(GetArenaForAllocation());
  }
  return _impl_.enum_kind_.unspecified_;
}
inline ::substrait::Expression_Enum_Empty* Expression_Enum::mutable_unspecified() {
  ::substrait::Expression_Enum_Empty* _msg = _internal_mutable_unspecified();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Enum.unspecified)
  return _msg;
}

inline bool Expression_Enum::has_enum_kind() const {
  return enum_kind_case() != ENUM_KIND_NOT_SET;
}
inline void Expression_Enum::clear_has_enum_kind() {
  _impl_._oneof_case_[0] = ENUM_KIND_NOT_SET;
}
inline Expression_Enum::EnumKindCase Expression_Enum::enum_kind_case() const {
  return Expression_Enum::EnumKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_Literal_VarChar

// string value = 1 [json_name = "value"];
inline void Expression_Literal_VarChar::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Expression_Literal_VarChar::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.VarChar.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal_VarChar::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.VarChar.value)
}
inline std::string* Expression_Literal_VarChar::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.VarChar.value)
  return _s;
}
inline const std::string& Expression_Literal_VarChar::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Expression_Literal_VarChar::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal_VarChar::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal_VarChar::release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.VarChar.value)
  return _impl_.value_.Release();
}
inline void Expression_Literal_VarChar::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.VarChar.value)
}

// uint32 length = 2 [json_name = "length"];
inline void Expression_Literal_VarChar::clear_length() {
  _impl_.length_ = 0u;
}
inline ::uint32_t Expression_Literal_VarChar::length() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.VarChar.length)
  return _internal_length();
}
inline void Expression_Literal_VarChar::set_length(::uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.VarChar.length)
}
inline ::uint32_t Expression_Literal_VarChar::_internal_length() const {
  return _impl_.length_;
}
inline void Expression_Literal_VarChar::_internal_set_length(::uint32_t value) {
  ;
  _impl_.length_ = value;
}

// -------------------------------------------------------------------

// Expression_Literal_Decimal

// bytes value = 1 [json_name = "value"];
inline void Expression_Literal_Decimal::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Expression_Literal_Decimal::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Decimal.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal_Decimal::set_value(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.Decimal.value)
}
inline std::string* Expression_Literal_Decimal::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.Decimal.value)
  return _s;
}
inline const std::string& Expression_Literal_Decimal::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Expression_Literal_Decimal::_internal_set_value(const std::string& value) {
  ;


  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal_Decimal::_internal_mutable_value() {
  ;
  return _impl_.value_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal_Decimal::release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.Decimal.value)
  return _impl_.value_.Release();
}
inline void Expression_Literal_Decimal::set_allocated_value(std::string* value) {
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.Decimal.value)
}

// int32 precision = 2 [json_name = "precision"];
inline void Expression_Literal_Decimal::clear_precision() {
  _impl_.precision_ = 0;
}
inline ::int32_t Expression_Literal_Decimal::precision() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Decimal.precision)
  return _internal_precision();
}
inline void Expression_Literal_Decimal::set_precision(::int32_t value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.Decimal.precision)
}
inline ::int32_t Expression_Literal_Decimal::_internal_precision() const {
  return _impl_.precision_;
}
inline void Expression_Literal_Decimal::_internal_set_precision(::int32_t value) {
  ;
  _impl_.precision_ = value;
}

// int32 scale = 3 [json_name = "scale"];
inline void Expression_Literal_Decimal::clear_scale() {
  _impl_.scale_ = 0;
}
inline ::int32_t Expression_Literal_Decimal::scale() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Decimal.scale)
  return _internal_scale();
}
inline void Expression_Literal_Decimal::set_scale(::int32_t value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.Decimal.scale)
}
inline ::int32_t Expression_Literal_Decimal::_internal_scale() const {
  return _impl_.scale_;
}
inline void Expression_Literal_Decimal::_internal_set_scale(::int32_t value) {
  ;
  _impl_.scale_ = value;
}

// -------------------------------------------------------------------

// Expression_Literal_Map_KeyValue

// .substrait.Expression.Literal key = 1 [json_name = "key"];
inline bool Expression_Literal_Map_KeyValue::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline void Expression_Literal_Map_KeyValue::clear_key() {
  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_Literal& Expression_Literal_Map_KeyValue::_internal_key() const {
  const ::substrait::Expression_Literal* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Expression_Literal_Map_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Map.KeyValue.key)
  return _internal_key();
}
inline void Expression_Literal_Map_KeyValue::unsafe_arena_set_allocated_key(
    ::substrait::Expression_Literal* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.Map.KeyValue.key)
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.Map.KeyValue.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::mutable_key() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.Map.KeyValue.key)
  return _msg;
}
inline void Expression_Literal_Map_KeyValue::set_allocated_key(::substrait::Expression_Literal* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.Map.KeyValue.key)
}

// .substrait.Expression.Literal value = 2 [json_name = "value"];
inline bool Expression_Literal_Map_KeyValue::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void Expression_Literal_Map_KeyValue::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression_Literal& Expression_Literal_Map_KeyValue::_internal_value() const {
  const ::substrait::Expression_Literal* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Expression_Literal_Map_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Map.KeyValue.value)
  return _internal_value();
}
inline void Expression_Literal_Map_KeyValue::unsafe_arena_set_allocated_value(
    ::substrait::Expression_Literal* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.Map.KeyValue.value)
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_Literal* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.Map.KeyValue.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_Literal* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::substrait::Expression_Literal* Expression_Literal_Map_KeyValue::mutable_value() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.Map.KeyValue.value)
  return _msg;
}
inline void Expression_Literal_Map_KeyValue::set_allocated_value(::substrait::Expression_Literal* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.Map.KeyValue.value)
}

// -------------------------------------------------------------------

// Expression_Literal_Map

// repeated .substrait.Expression.Literal.Map.KeyValue key_values = 1 [json_name = "keyValues"];
inline int Expression_Literal_Map::_internal_key_values_size() const {
  return _impl_.key_values_.size();
}
inline int Expression_Literal_Map::key_values_size() const {
  return _internal_key_values_size();
}
inline void Expression_Literal_Map::clear_key_values() {
  _internal_mutable_key_values()->Clear();
}
inline ::substrait::Expression_Literal_Map_KeyValue* Expression_Literal_Map::mutable_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.Map.key_values)
  return _internal_mutable_key_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Map_KeyValue >*
Expression_Literal_Map::mutable_key_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Literal.Map.key_values)
  return _internal_mutable_key_values();
}
inline const ::substrait::Expression_Literal_Map_KeyValue& Expression_Literal_Map::_internal_key_values(int index) const {
  return _internal_key_values().Get(index);
}
inline const ::substrait::Expression_Literal_Map_KeyValue& Expression_Literal_Map::key_values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Map.key_values)
  return _internal_key_values(index);
}
inline ::substrait::Expression_Literal_Map_KeyValue* Expression_Literal_Map::_internal_add_key_values() {
  return _internal_mutable_key_values()->Add();
}
inline ::substrait::Expression_Literal_Map_KeyValue* Expression_Literal_Map::add_key_values() {
  ::substrait::Expression_Literal_Map_KeyValue* _add = _internal_add_key_values();
  // @@protoc_insertion_point(field_add:substrait.Expression.Literal.Map.key_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal_Map_KeyValue >&
Expression_Literal_Map::key_values() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Literal.Map.key_values)
  return _internal_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Map_KeyValue>&
Expression_Literal_Map::_internal_key_values() const {
  return _impl_.key_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal_Map_KeyValue>*
Expression_Literal_Map::_internal_mutable_key_values() {
  return &_impl_.key_values_;
}

// -------------------------------------------------------------------

// Expression_Literal_IntervalYearToMonth

// int32 years = 1 [json_name = "years"];
inline void Expression_Literal_IntervalYearToMonth::clear_years() {
  _impl_.years_ = 0;
}
inline ::int32_t Expression_Literal_IntervalYearToMonth::years() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.IntervalYearToMonth.years)
  return _internal_years();
}
inline void Expression_Literal_IntervalYearToMonth::set_years(::int32_t value) {
  _internal_set_years(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.IntervalYearToMonth.years)
}
inline ::int32_t Expression_Literal_IntervalYearToMonth::_internal_years() const {
  return _impl_.years_;
}
inline void Expression_Literal_IntervalYearToMonth::_internal_set_years(::int32_t value) {
  ;
  _impl_.years_ = value;
}

// int32 months = 2 [json_name = "months"];
inline void Expression_Literal_IntervalYearToMonth::clear_months() {
  _impl_.months_ = 0;
}
inline ::int32_t Expression_Literal_IntervalYearToMonth::months() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.IntervalYearToMonth.months)
  return _internal_months();
}
inline void Expression_Literal_IntervalYearToMonth::set_months(::int32_t value) {
  _internal_set_months(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.IntervalYearToMonth.months)
}
inline ::int32_t Expression_Literal_IntervalYearToMonth::_internal_months() const {
  return _impl_.months_;
}
inline void Expression_Literal_IntervalYearToMonth::_internal_set_months(::int32_t value) {
  ;
  _impl_.months_ = value;
}

// -------------------------------------------------------------------

// Expression_Literal_IntervalDayToSecond

// int32 days = 1 [json_name = "days"];
inline void Expression_Literal_IntervalDayToSecond::clear_days() {
  _impl_.days_ = 0;
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::days() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.IntervalDayToSecond.days)
  return _internal_days();
}
inline void Expression_Literal_IntervalDayToSecond::set_days(::int32_t value) {
  _internal_set_days(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.IntervalDayToSecond.days)
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::_internal_days() const {
  return _impl_.days_;
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_days(::int32_t value) {
  ;
  _impl_.days_ = value;
}

// int32 seconds = 2 [json_name = "seconds"];
inline void Expression_Literal_IntervalDayToSecond::clear_seconds() {
  _impl_.seconds_ = 0;
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::seconds() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.IntervalDayToSecond.seconds)
  return _internal_seconds();
}
inline void Expression_Literal_IntervalDayToSecond::set_seconds(::int32_t value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.IntervalDayToSecond.seconds)
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::_internal_seconds() const {
  return _impl_.seconds_;
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_seconds(::int32_t value) {
  ;
  _impl_.seconds_ = value;
}

// int32 microseconds = 3 [json_name = "microseconds"];
inline void Expression_Literal_IntervalDayToSecond::clear_microseconds() {
  _impl_.microseconds_ = 0;
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::microseconds() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.IntervalDayToSecond.microseconds)
  return _internal_microseconds();
}
inline void Expression_Literal_IntervalDayToSecond::set_microseconds(::int32_t value) {
  _internal_set_microseconds(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.IntervalDayToSecond.microseconds)
}
inline ::int32_t Expression_Literal_IntervalDayToSecond::_internal_microseconds() const {
  return _impl_.microseconds_;
}
inline void Expression_Literal_IntervalDayToSecond::_internal_set_microseconds(::int32_t value) {
  ;
  _impl_.microseconds_ = value;
}

// -------------------------------------------------------------------

// Expression_Literal_Struct

// repeated .substrait.Expression.Literal fields = 1 [json_name = "fields"];
inline int Expression_Literal_Struct::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int Expression_Literal_Struct::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_Literal_Struct::clear_fields() {
  _internal_mutable_fields()->Clear();
}
inline ::substrait::Expression_Literal* Expression_Literal_Struct::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.Struct.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >*
Expression_Literal_Struct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Literal.Struct.fields)
  return _internal_mutable_fields();
}
inline const ::substrait::Expression_Literal& Expression_Literal_Struct::_internal_fields(int index) const {
  return _internal_fields().Get(index);
}
inline const ::substrait::Expression_Literal& Expression_Literal_Struct::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.Struct.fields)
  return _internal_fields(index);
}
inline ::substrait::Expression_Literal* Expression_Literal_Struct::_internal_add_fields() {
  return _internal_mutable_fields()->Add();
}
inline ::substrait::Expression_Literal* Expression_Literal_Struct::add_fields() {
  ::substrait::Expression_Literal* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:substrait.Expression.Literal.Struct.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >&
Expression_Literal_Struct::fields() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Literal.Struct.fields)
  return _internal_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>&
Expression_Literal_Struct::_internal_fields() const {
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>*
Expression_Literal_Struct::_internal_mutable_fields() {
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// Expression_Literal_List

// repeated .substrait.Expression.Literal values = 1 [json_name = "values"];
inline int Expression_Literal_List::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int Expression_Literal_List::values_size() const {
  return _internal_values_size();
}
inline void Expression_Literal_List::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::substrait::Expression_Literal* Expression_Literal_List::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.List.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >*
Expression_Literal_List::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Literal.List.values)
  return _internal_mutable_values();
}
inline const ::substrait::Expression_Literal& Expression_Literal_List::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::substrait::Expression_Literal& Expression_Literal_List::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.List.values)
  return _internal_values(index);
}
inline ::substrait::Expression_Literal* Expression_Literal_List::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::substrait::Expression_Literal* Expression_Literal_List::add_values() {
  ::substrait::Expression_Literal* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:substrait.Expression.Literal.List.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Literal >&
Expression_Literal_List::values() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Literal.List.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>&
Expression_Literal_List::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Literal>*
Expression_Literal_List::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// Expression_Literal_UserDefined

// uint32 type_reference = 1 [json_name = "typeReference"];
inline void Expression_Literal_UserDefined::clear_type_reference() {
  _impl_.type_reference_ = 0u;
}
inline ::uint32_t Expression_Literal_UserDefined::type_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.UserDefined.type_reference)
  return _internal_type_reference();
}
inline void Expression_Literal_UserDefined::set_type_reference(::uint32_t value) {
  _internal_set_type_reference(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.UserDefined.type_reference)
}
inline ::uint32_t Expression_Literal_UserDefined::_internal_type_reference() const {
  return _impl_.type_reference_;
}
inline void Expression_Literal_UserDefined::_internal_set_type_reference(::uint32_t value) {
  ;
  _impl_.type_reference_ = value;
}

// repeated .substrait.Type.Parameter type_parameters = 3 [json_name = "typeParameters"];
inline int Expression_Literal_UserDefined::_internal_type_parameters_size() const {
  return _impl_.type_parameters_.size();
}
inline int Expression_Literal_UserDefined::type_parameters_size() const {
  return _internal_type_parameters_size();
}
inline ::substrait::Type_Parameter* Expression_Literal_UserDefined::mutable_type_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.UserDefined.type_parameters)
  return _internal_mutable_type_parameters()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Type_Parameter >*
Expression_Literal_UserDefined::mutable_type_parameters() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Literal.UserDefined.type_parameters)
  return _internal_mutable_type_parameters();
}
inline const ::substrait::Type_Parameter& Expression_Literal_UserDefined::_internal_type_parameters(int index) const {
  return _internal_type_parameters().Get(index);
}
inline const ::substrait::Type_Parameter& Expression_Literal_UserDefined::type_parameters(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.UserDefined.type_parameters)
  return _internal_type_parameters(index);
}
inline ::substrait::Type_Parameter* Expression_Literal_UserDefined::_internal_add_type_parameters() {
  return _internal_mutable_type_parameters()->Add();
}
inline ::substrait::Type_Parameter* Expression_Literal_UserDefined::add_type_parameters() {
  ::substrait::Type_Parameter* _add = _internal_add_type_parameters();
  // @@protoc_insertion_point(field_add:substrait.Expression.Literal.UserDefined.type_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Type_Parameter >&
Expression_Literal_UserDefined::type_parameters() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Literal.UserDefined.type_parameters)
  return _internal_type_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Type_Parameter>&
Expression_Literal_UserDefined::_internal_type_parameters() const {
  return _impl_.type_parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Type_Parameter>*
Expression_Literal_UserDefined::_internal_mutable_type_parameters() {
  return &_impl_.type_parameters_;
}

// .google.protobuf.Any value = 2 [json_name = "value"];
inline bool Expression_Literal_UserDefined::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Expression_Literal_UserDefined::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Expression_Literal_UserDefined::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.UserDefined.value)
  return _internal_value();
}
inline void Expression_Literal_UserDefined::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Any* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.UserDefined.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.UserDefined.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Expression_Literal_UserDefined::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.UserDefined.value)
  return _msg;
}
inline void Expression_Literal_UserDefined::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Any* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.UserDefined.value)
}

// -------------------------------------------------------------------

// Expression_Literal

// bool boolean = 1 [json_name = "boolean"];
inline bool Expression_Literal::has_boolean() const {
  return literal_type_case() == kBoolean;
}
inline void Expression_Literal::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void Expression_Literal::clear_boolean() {
  if (literal_type_case() == kBoolean) {
    _impl_.literal_type_.boolean_ = false;
    clear_has_literal_type();
  }
}
inline bool Expression_Literal::boolean() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.boolean)
  return _internal_boolean();
}
inline void Expression_Literal::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.boolean)
}
inline bool Expression_Literal::_internal_boolean() const {
  if (literal_type_case() == kBoolean) {
    return _impl_.literal_type_.boolean_;
  }
  return false;
}
inline void Expression_Literal::_internal_set_boolean(bool value) {
  if (literal_type_case() != kBoolean) {
    clear_literal_type();
    set_has_boolean();
  }
  _impl_.literal_type_.boolean_ = value;
}

// int32 i8 = 2 [json_name = "i8"];
inline bool Expression_Literal::has_i8() const {
  return literal_type_case() == kI8;
}
inline void Expression_Literal::set_has_i8() {
  _impl_._oneof_case_[0] = kI8;
}
inline void Expression_Literal::clear_i8() {
  if (literal_type_case() == kI8) {
    _impl_.literal_type_.i8_ = 0;
    clear_has_literal_type();
  }
}
inline ::int32_t Expression_Literal::i8() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.i8)
  return _internal_i8();
}
inline void Expression_Literal::set_i8(::int32_t value) {
  _internal_set_i8(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.i8)
}
inline ::int32_t Expression_Literal::_internal_i8() const {
  if (literal_type_case() == kI8) {
    return _impl_.literal_type_.i8_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i8(::int32_t value) {
  if (literal_type_case() != kI8) {
    clear_literal_type();
    set_has_i8();
  }
  _impl_.literal_type_.i8_ = value;
}

// int32 i16 = 3 [json_name = "i16"];
inline bool Expression_Literal::has_i16() const {
  return literal_type_case() == kI16;
}
inline void Expression_Literal::set_has_i16() {
  _impl_._oneof_case_[0] = kI16;
}
inline void Expression_Literal::clear_i16() {
  if (literal_type_case() == kI16) {
    _impl_.literal_type_.i16_ = 0;
    clear_has_literal_type();
  }
}
inline ::int32_t Expression_Literal::i16() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.i16)
  return _internal_i16();
}
inline void Expression_Literal::set_i16(::int32_t value) {
  _internal_set_i16(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.i16)
}
inline ::int32_t Expression_Literal::_internal_i16() const {
  if (literal_type_case() == kI16) {
    return _impl_.literal_type_.i16_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i16(::int32_t value) {
  if (literal_type_case() != kI16) {
    clear_literal_type();
    set_has_i16();
  }
  _impl_.literal_type_.i16_ = value;
}

// int32 i32 = 5 [json_name = "i32"];
inline bool Expression_Literal::has_i32() const {
  return literal_type_case() == kI32;
}
inline void Expression_Literal::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void Expression_Literal::clear_i32() {
  if (literal_type_case() == kI32) {
    _impl_.literal_type_.i32_ = 0;
    clear_has_literal_type();
  }
}
inline ::int32_t Expression_Literal::i32() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.i32)
  return _internal_i32();
}
inline void Expression_Literal::set_i32(::int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.i32)
}
inline ::int32_t Expression_Literal::_internal_i32() const {
  if (literal_type_case() == kI32) {
    return _impl_.literal_type_.i32_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_i32(::int32_t value) {
  if (literal_type_case() != kI32) {
    clear_literal_type();
    set_has_i32();
  }
  _impl_.literal_type_.i32_ = value;
}

// int64 i64 = 7 [json_name = "i64"];
inline bool Expression_Literal::has_i64() const {
  return literal_type_case() == kI64;
}
inline void Expression_Literal::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void Expression_Literal::clear_i64() {
  if (literal_type_case() == kI64) {
    _impl_.literal_type_.i64_ = ::int64_t{0};
    clear_has_literal_type();
  }
}
inline ::int64_t Expression_Literal::i64() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.i64)
  return _internal_i64();
}
inline void Expression_Literal::set_i64(::int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.i64)
}
inline ::int64_t Expression_Literal::_internal_i64() const {
  if (literal_type_case() == kI64) {
    return _impl_.literal_type_.i64_;
  }
  return ::int64_t{0};
}
inline void Expression_Literal::_internal_set_i64(::int64_t value) {
  if (literal_type_case() != kI64) {
    clear_literal_type();
    set_has_i64();
  }
  _impl_.literal_type_.i64_ = value;
}

// float fp32 = 10 [json_name = "fp32"];
inline bool Expression_Literal::has_fp32() const {
  return literal_type_case() == kFp32;
}
inline void Expression_Literal::set_has_fp32() {
  _impl_._oneof_case_[0] = kFp32;
}
inline void Expression_Literal::clear_fp32() {
  if (literal_type_case() == kFp32) {
    _impl_.literal_type_.fp32_ = 0;
    clear_has_literal_type();
  }
}
inline float Expression_Literal::fp32() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.fp32)
  return _internal_fp32();
}
inline void Expression_Literal::set_fp32(float value) {
  _internal_set_fp32(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.fp32)
}
inline float Expression_Literal::_internal_fp32() const {
  if (literal_type_case() == kFp32) {
    return _impl_.literal_type_.fp32_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_fp32(float value) {
  if (literal_type_case() != kFp32) {
    clear_literal_type();
    set_has_fp32();
  }
  _impl_.literal_type_.fp32_ = value;
}

// double fp64 = 11 [json_name = "fp64"];
inline bool Expression_Literal::has_fp64() const {
  return literal_type_case() == kFp64;
}
inline void Expression_Literal::set_has_fp64() {
  _impl_._oneof_case_[0] = kFp64;
}
inline void Expression_Literal::clear_fp64() {
  if (literal_type_case() == kFp64) {
    _impl_.literal_type_.fp64_ = 0;
    clear_has_literal_type();
  }
}
inline double Expression_Literal::fp64() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.fp64)
  return _internal_fp64();
}
inline void Expression_Literal::set_fp64(double value) {
  _internal_set_fp64(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.fp64)
}
inline double Expression_Literal::_internal_fp64() const {
  if (literal_type_case() == kFp64) {
    return _impl_.literal_type_.fp64_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_fp64(double value) {
  if (literal_type_case() != kFp64) {
    clear_literal_type();
    set_has_fp64();
  }
  _impl_.literal_type_.fp64_ = value;
}

// string string = 12 [json_name = "string"];
inline bool Expression_Literal::has_string() const {
  return literal_type_case() == kString;
}
inline void Expression_Literal::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void Expression_Literal::clear_string() {
  if (literal_type_case() == kString) {
    _impl_.literal_type_.string_.Destroy();
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::string() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.string)
  return _internal_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal::set_string(Arg_&& arg,
                                                     Args_... args) {
  if (literal_type_case() != kString) {
    clear_literal_type();

    set_has_string();
    _impl_.literal_type_.string_.InitDefault();
  }
  _impl_.literal_type_.string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.string)
}
inline std::string* Expression_Literal::mutable_string() {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.string)
  return _s;
}
inline const std::string& Expression_Literal::_internal_string() const {
  if (literal_type_case() != kString) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.literal_type_.string_.Get();
}
inline void Expression_Literal::_internal_set_string(const std::string& value) {
  if (literal_type_case() != kString) {
    clear_literal_type();

    set_has_string();
    _impl_.literal_type_.string_.InitDefault();
  }


  _impl_.literal_type_.string_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal::_internal_mutable_string() {
  if (literal_type_case() != kString) {
    clear_literal_type();

    set_has_string();
    _impl_.literal_type_.string_.InitDefault();
  }
  return _impl_.literal_type_.string_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal::release_string() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.string)
  if (literal_type_case() != kString) {
    return nullptr;
  }
  clear_has_literal_type();
  return _impl_.literal_type_.string_.Release();
}
inline void Expression_Literal::set_allocated_string(std::string* value) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (value != nullptr) {
    set_has_string();
    _impl_.literal_type_.string_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.string)
}

// bytes binary = 13 [json_name = "binary"];
inline bool Expression_Literal::has_binary() const {
  return literal_type_case() == kBinary;
}
inline void Expression_Literal::set_has_binary() {
  _impl_._oneof_case_[0] = kBinary;
}
inline void Expression_Literal::clear_binary() {
  if (literal_type_case() == kBinary) {
    _impl_.literal_type_.binary_.Destroy();
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::binary() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.binary)
  return _internal_binary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal::set_binary(Arg_&& arg,
                                                     Args_... args) {
  if (literal_type_case() != kBinary) {
    clear_literal_type();

    set_has_binary();
    _impl_.literal_type_.binary_.InitDefault();
  }
  _impl_.literal_type_.binary_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.binary)
}
inline std::string* Expression_Literal::mutable_binary() {
  std::string* _s = _internal_mutable_binary();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.binary)
  return _s;
}
inline const std::string& Expression_Literal::_internal_binary() const {
  if (literal_type_case() != kBinary) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.literal_type_.binary_.Get();
}
inline void Expression_Literal::_internal_set_binary(const std::string& value) {
  if (literal_type_case() != kBinary) {
    clear_literal_type();

    set_has_binary();
    _impl_.literal_type_.binary_.InitDefault();
  }


  _impl_.literal_type_.binary_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal::_internal_mutable_binary() {
  if (literal_type_case() != kBinary) {
    clear_literal_type();

    set_has_binary();
    _impl_.literal_type_.binary_.InitDefault();
  }
  return _impl_.literal_type_.binary_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal::release_binary() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.binary)
  if (literal_type_case() != kBinary) {
    return nullptr;
  }
  clear_has_literal_type();
  return _impl_.literal_type_.binary_.Release();
}
inline void Expression_Literal::set_allocated_binary(std::string* value) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (value != nullptr) {
    set_has_binary();
    _impl_.literal_type_.binary_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.binary)
}

// int64 timestamp = 14 [json_name = "timestamp"];
inline bool Expression_Literal::has_timestamp() const {
  return literal_type_case() == kTimestamp;
}
inline void Expression_Literal::set_has_timestamp() {
  _impl_._oneof_case_[0] = kTimestamp;
}
inline void Expression_Literal::clear_timestamp() {
  if (literal_type_case() == kTimestamp) {
    _impl_.literal_type_.timestamp_ = ::int64_t{0};
    clear_has_literal_type();
  }
}
inline ::int64_t Expression_Literal::timestamp() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.timestamp)
  return _internal_timestamp();
}
inline void Expression_Literal::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.timestamp)
}
inline ::int64_t Expression_Literal::_internal_timestamp() const {
  if (literal_type_case() == kTimestamp) {
    return _impl_.literal_type_.timestamp_;
  }
  return ::int64_t{0};
}
inline void Expression_Literal::_internal_set_timestamp(::int64_t value) {
  if (literal_type_case() != kTimestamp) {
    clear_literal_type();
    set_has_timestamp();
  }
  _impl_.literal_type_.timestamp_ = value;
}

// int32 date = 16 [json_name = "date"];
inline bool Expression_Literal::has_date() const {
  return literal_type_case() == kDate;
}
inline void Expression_Literal::set_has_date() {
  _impl_._oneof_case_[0] = kDate;
}
inline void Expression_Literal::clear_date() {
  if (literal_type_case() == kDate) {
    _impl_.literal_type_.date_ = 0;
    clear_has_literal_type();
  }
}
inline ::int32_t Expression_Literal::date() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.date)
  return _internal_date();
}
inline void Expression_Literal::set_date(::int32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.date)
}
inline ::int32_t Expression_Literal::_internal_date() const {
  if (literal_type_case() == kDate) {
    return _impl_.literal_type_.date_;
  }
  return 0;
}
inline void Expression_Literal::_internal_set_date(::int32_t value) {
  if (literal_type_case() != kDate) {
    clear_literal_type();
    set_has_date();
  }
  _impl_.literal_type_.date_ = value;
}

// int64 time = 17 [json_name = "time"];
inline bool Expression_Literal::has_time() const {
  return literal_type_case() == kTime;
}
inline void Expression_Literal::set_has_time() {
  _impl_._oneof_case_[0] = kTime;
}
inline void Expression_Literal::clear_time() {
  if (literal_type_case() == kTime) {
    _impl_.literal_type_.time_ = ::int64_t{0};
    clear_has_literal_type();
  }
}
inline ::int64_t Expression_Literal::time() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.time)
  return _internal_time();
}
inline void Expression_Literal::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.time)
}
inline ::int64_t Expression_Literal::_internal_time() const {
  if (literal_type_case() == kTime) {
    return _impl_.literal_type_.time_;
  }
  return ::int64_t{0};
}
inline void Expression_Literal::_internal_set_time(::int64_t value) {
  if (literal_type_case() != kTime) {
    clear_literal_type();
    set_has_time();
  }
  _impl_.literal_type_.time_ = value;
}

// .substrait.Expression.Literal.IntervalYearToMonth interval_year_to_month = 19 [json_name = "intervalYearToMonth"];
inline bool Expression_Literal::has_interval_year_to_month() const {
  return literal_type_case() == kIntervalYearToMonth;
}
inline bool Expression_Literal::_internal_has_interval_year_to_month() const {
  return literal_type_case() == kIntervalYearToMonth;
}
inline void Expression_Literal::set_has_interval_year_to_month() {
  _impl_._oneof_case_[0] = kIntervalYearToMonth;
}
inline void Expression_Literal::clear_interval_year_to_month() {
  if (literal_type_case() == kIntervalYearToMonth) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.interval_year_to_month_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_IntervalYearToMonth* Expression_Literal::release_interval_year_to_month() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.interval_year_to_month)
  if (literal_type_case() == kIntervalYearToMonth) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_IntervalYearToMonth* temp = _impl_.literal_type_.interval_year_to_month_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.interval_year_to_month_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_IntervalYearToMonth& Expression_Literal::_internal_interval_year_to_month() const {
  return literal_type_case() == kIntervalYearToMonth
      ? *_impl_.literal_type_.interval_year_to_month_
      : reinterpret_cast<::substrait::Expression_Literal_IntervalYearToMonth&>(::substrait::_Expression_Literal_IntervalYearToMonth_default_instance_);
}
inline const ::substrait::Expression_Literal_IntervalYearToMonth& Expression_Literal::interval_year_to_month() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.interval_year_to_month)
  return _internal_interval_year_to_month();
}
inline ::substrait::Expression_Literal_IntervalYearToMonth* Expression_Literal::unsafe_arena_release_interval_year_to_month() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.interval_year_to_month)
  if (literal_type_case() == kIntervalYearToMonth) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_IntervalYearToMonth* temp = _impl_.literal_type_.interval_year_to_month_;
    _impl_.literal_type_.interval_year_to_month_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_interval_year_to_month(::substrait::Expression_Literal_IntervalYearToMonth* interval_year_to_month) {
  clear_literal_type();
  if (interval_year_to_month) {
    set_has_interval_year_to_month();
    _impl_.literal_type_.interval_year_to_month_ = interval_year_to_month;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.interval_year_to_month)
}
inline ::substrait::Expression_Literal_IntervalYearToMonth* Expression_Literal::_internal_mutable_interval_year_to_month() {
  if (literal_type_case() != kIntervalYearToMonth) {
    clear_literal_type();
    set_has_interval_year_to_month();
    _impl_.literal_type_.interval_year_to_month_ = CreateMaybeMessage< ::substrait::Expression_Literal_IntervalYearToMonth >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.interval_year_to_month_;
}
inline ::substrait::Expression_Literal_IntervalYearToMonth* Expression_Literal::mutable_interval_year_to_month() {
  ::substrait::Expression_Literal_IntervalYearToMonth* _msg = _internal_mutable_interval_year_to_month();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.interval_year_to_month)
  return _msg;
}

// .substrait.Expression.Literal.IntervalDayToSecond interval_day_to_second = 20 [json_name = "intervalDayToSecond"];
inline bool Expression_Literal::has_interval_day_to_second() const {
  return literal_type_case() == kIntervalDayToSecond;
}
inline bool Expression_Literal::_internal_has_interval_day_to_second() const {
  return literal_type_case() == kIntervalDayToSecond;
}
inline void Expression_Literal::set_has_interval_day_to_second() {
  _impl_._oneof_case_[0] = kIntervalDayToSecond;
}
inline void Expression_Literal::clear_interval_day_to_second() {
  if (literal_type_case() == kIntervalDayToSecond) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.interval_day_to_second_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_IntervalDayToSecond* Expression_Literal::release_interval_day_to_second() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.interval_day_to_second)
  if (literal_type_case() == kIntervalDayToSecond) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_IntervalDayToSecond* temp = _impl_.literal_type_.interval_day_to_second_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.interval_day_to_second_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_IntervalDayToSecond& Expression_Literal::_internal_interval_day_to_second() const {
  return literal_type_case() == kIntervalDayToSecond
      ? *_impl_.literal_type_.interval_day_to_second_
      : reinterpret_cast<::substrait::Expression_Literal_IntervalDayToSecond&>(::substrait::_Expression_Literal_IntervalDayToSecond_default_instance_);
}
inline const ::substrait::Expression_Literal_IntervalDayToSecond& Expression_Literal::interval_day_to_second() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.interval_day_to_second)
  return _internal_interval_day_to_second();
}
inline ::substrait::Expression_Literal_IntervalDayToSecond* Expression_Literal::unsafe_arena_release_interval_day_to_second() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.interval_day_to_second)
  if (literal_type_case() == kIntervalDayToSecond) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_IntervalDayToSecond* temp = _impl_.literal_type_.interval_day_to_second_;
    _impl_.literal_type_.interval_day_to_second_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_interval_day_to_second(::substrait::Expression_Literal_IntervalDayToSecond* interval_day_to_second) {
  clear_literal_type();
  if (interval_day_to_second) {
    set_has_interval_day_to_second();
    _impl_.literal_type_.interval_day_to_second_ = interval_day_to_second;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.interval_day_to_second)
}
inline ::substrait::Expression_Literal_IntervalDayToSecond* Expression_Literal::_internal_mutable_interval_day_to_second() {
  if (literal_type_case() != kIntervalDayToSecond) {
    clear_literal_type();
    set_has_interval_day_to_second();
    _impl_.literal_type_.interval_day_to_second_ = CreateMaybeMessage< ::substrait::Expression_Literal_IntervalDayToSecond >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.interval_day_to_second_;
}
inline ::substrait::Expression_Literal_IntervalDayToSecond* Expression_Literal::mutable_interval_day_to_second() {
  ::substrait::Expression_Literal_IntervalDayToSecond* _msg = _internal_mutable_interval_day_to_second();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.interval_day_to_second)
  return _msg;
}

// string fixed_char = 21 [json_name = "fixedChar"];
inline bool Expression_Literal::has_fixed_char() const {
  return literal_type_case() == kFixedChar;
}
inline void Expression_Literal::set_has_fixed_char() {
  _impl_._oneof_case_[0] = kFixedChar;
}
inline void Expression_Literal::clear_fixed_char() {
  if (literal_type_case() == kFixedChar) {
    _impl_.literal_type_.fixed_char_.Destroy();
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::fixed_char() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.fixed_char)
  return _internal_fixed_char();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal::set_fixed_char(Arg_&& arg,
                                                     Args_... args) {
  if (literal_type_case() != kFixedChar) {
    clear_literal_type();

    set_has_fixed_char();
    _impl_.literal_type_.fixed_char_.InitDefault();
  }
  _impl_.literal_type_.fixed_char_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.fixed_char)
}
inline std::string* Expression_Literal::mutable_fixed_char() {
  std::string* _s = _internal_mutable_fixed_char();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.fixed_char)
  return _s;
}
inline const std::string& Expression_Literal::_internal_fixed_char() const {
  if (literal_type_case() != kFixedChar) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.literal_type_.fixed_char_.Get();
}
inline void Expression_Literal::_internal_set_fixed_char(const std::string& value) {
  if (literal_type_case() != kFixedChar) {
    clear_literal_type();

    set_has_fixed_char();
    _impl_.literal_type_.fixed_char_.InitDefault();
  }


  _impl_.literal_type_.fixed_char_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal::_internal_mutable_fixed_char() {
  if (literal_type_case() != kFixedChar) {
    clear_literal_type();

    set_has_fixed_char();
    _impl_.literal_type_.fixed_char_.InitDefault();
  }
  return _impl_.literal_type_.fixed_char_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal::release_fixed_char() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.fixed_char)
  if (literal_type_case() != kFixedChar) {
    return nullptr;
  }
  clear_has_literal_type();
  return _impl_.literal_type_.fixed_char_.Release();
}
inline void Expression_Literal::set_allocated_fixed_char(std::string* value) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (value != nullptr) {
    set_has_fixed_char();
    _impl_.literal_type_.fixed_char_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.fixed_char)
}

// .substrait.Expression.Literal.VarChar var_char = 22 [json_name = "varChar"];
inline bool Expression_Literal::has_var_char() const {
  return literal_type_case() == kVarChar;
}
inline bool Expression_Literal::_internal_has_var_char() const {
  return literal_type_case() == kVarChar;
}
inline void Expression_Literal::set_has_var_char() {
  _impl_._oneof_case_[0] = kVarChar;
}
inline void Expression_Literal::clear_var_char() {
  if (literal_type_case() == kVarChar) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.var_char_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_VarChar* Expression_Literal::release_var_char() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.var_char)
  if (literal_type_case() == kVarChar) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_VarChar* temp = _impl_.literal_type_.var_char_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.var_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_VarChar& Expression_Literal::_internal_var_char() const {
  return literal_type_case() == kVarChar
      ? *_impl_.literal_type_.var_char_
      : reinterpret_cast<::substrait::Expression_Literal_VarChar&>(::substrait::_Expression_Literal_VarChar_default_instance_);
}
inline const ::substrait::Expression_Literal_VarChar& Expression_Literal::var_char() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.var_char)
  return _internal_var_char();
}
inline ::substrait::Expression_Literal_VarChar* Expression_Literal::unsafe_arena_release_var_char() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.var_char)
  if (literal_type_case() == kVarChar) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_VarChar* temp = _impl_.literal_type_.var_char_;
    _impl_.literal_type_.var_char_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_var_char(::substrait::Expression_Literal_VarChar* var_char) {
  clear_literal_type();
  if (var_char) {
    set_has_var_char();
    _impl_.literal_type_.var_char_ = var_char;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.var_char)
}
inline ::substrait::Expression_Literal_VarChar* Expression_Literal::_internal_mutable_var_char() {
  if (literal_type_case() != kVarChar) {
    clear_literal_type();
    set_has_var_char();
    _impl_.literal_type_.var_char_ = CreateMaybeMessage< ::substrait::Expression_Literal_VarChar >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.var_char_;
}
inline ::substrait::Expression_Literal_VarChar* Expression_Literal::mutable_var_char() {
  ::substrait::Expression_Literal_VarChar* _msg = _internal_mutable_var_char();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.var_char)
  return _msg;
}

// bytes fixed_binary = 23 [json_name = "fixedBinary"];
inline bool Expression_Literal::has_fixed_binary() const {
  return literal_type_case() == kFixedBinary;
}
inline void Expression_Literal::set_has_fixed_binary() {
  _impl_._oneof_case_[0] = kFixedBinary;
}
inline void Expression_Literal::clear_fixed_binary() {
  if (literal_type_case() == kFixedBinary) {
    _impl_.literal_type_.fixed_binary_.Destroy();
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::fixed_binary() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.fixed_binary)
  return _internal_fixed_binary();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal::set_fixed_binary(Arg_&& arg,
                                                     Args_... args) {
  if (literal_type_case() != kFixedBinary) {
    clear_literal_type();

    set_has_fixed_binary();
    _impl_.literal_type_.fixed_binary_.InitDefault();
  }
  _impl_.literal_type_.fixed_binary_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.fixed_binary)
}
inline std::string* Expression_Literal::mutable_fixed_binary() {
  std::string* _s = _internal_mutable_fixed_binary();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.fixed_binary)
  return _s;
}
inline const std::string& Expression_Literal::_internal_fixed_binary() const {
  if (literal_type_case() != kFixedBinary) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.literal_type_.fixed_binary_.Get();
}
inline void Expression_Literal::_internal_set_fixed_binary(const std::string& value) {
  if (literal_type_case() != kFixedBinary) {
    clear_literal_type();

    set_has_fixed_binary();
    _impl_.literal_type_.fixed_binary_.InitDefault();
  }


  _impl_.literal_type_.fixed_binary_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal::_internal_mutable_fixed_binary() {
  if (literal_type_case() != kFixedBinary) {
    clear_literal_type();

    set_has_fixed_binary();
    _impl_.literal_type_.fixed_binary_.InitDefault();
  }
  return _impl_.literal_type_.fixed_binary_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal::release_fixed_binary() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.fixed_binary)
  if (literal_type_case() != kFixedBinary) {
    return nullptr;
  }
  clear_has_literal_type();
  return _impl_.literal_type_.fixed_binary_.Release();
}
inline void Expression_Literal::set_allocated_fixed_binary(std::string* value) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (value != nullptr) {
    set_has_fixed_binary();
    _impl_.literal_type_.fixed_binary_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.fixed_binary)
}

// .substrait.Expression.Literal.Decimal decimal = 24 [json_name = "decimal"];
inline bool Expression_Literal::has_decimal() const {
  return literal_type_case() == kDecimal;
}
inline bool Expression_Literal::_internal_has_decimal() const {
  return literal_type_case() == kDecimal;
}
inline void Expression_Literal::set_has_decimal() {
  _impl_._oneof_case_[0] = kDecimal;
}
inline void Expression_Literal::clear_decimal() {
  if (literal_type_case() == kDecimal) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.decimal_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_Decimal* Expression_Literal::release_decimal() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.decimal)
  if (literal_type_case() == kDecimal) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Decimal* temp = _impl_.literal_type_.decimal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.decimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_Decimal& Expression_Literal::_internal_decimal() const {
  return literal_type_case() == kDecimal
      ? *_impl_.literal_type_.decimal_
      : reinterpret_cast<::substrait::Expression_Literal_Decimal&>(::substrait::_Expression_Literal_Decimal_default_instance_);
}
inline const ::substrait::Expression_Literal_Decimal& Expression_Literal::decimal() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.decimal)
  return _internal_decimal();
}
inline ::substrait::Expression_Literal_Decimal* Expression_Literal::unsafe_arena_release_decimal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.decimal)
  if (literal_type_case() == kDecimal) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Decimal* temp = _impl_.literal_type_.decimal_;
    _impl_.literal_type_.decimal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_decimal(::substrait::Expression_Literal_Decimal* decimal) {
  clear_literal_type();
  if (decimal) {
    set_has_decimal();
    _impl_.literal_type_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.decimal)
}
inline ::substrait::Expression_Literal_Decimal* Expression_Literal::_internal_mutable_decimal() {
  if (literal_type_case() != kDecimal) {
    clear_literal_type();
    set_has_decimal();
    _impl_.literal_type_.decimal_ = CreateMaybeMessage< ::substrait::Expression_Literal_Decimal >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.decimal_;
}
inline ::substrait::Expression_Literal_Decimal* Expression_Literal::mutable_decimal() {
  ::substrait::Expression_Literal_Decimal* _msg = _internal_mutable_decimal();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.decimal)
  return _msg;
}

// .substrait.Expression.Literal.Struct struct = 25 [json_name = "struct"];
inline bool Expression_Literal::has_struct_() const {
  return literal_type_case() == kStruct;
}
inline bool Expression_Literal::_internal_has_struct_() const {
  return literal_type_case() == kStruct;
}
inline void Expression_Literal::set_has_struct_() {
  _impl_._oneof_case_[0] = kStruct;
}
inline void Expression_Literal::clear_struct_() {
  if (literal_type_case() == kStruct) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.struct__;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_Struct* Expression_Literal::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.struct)
  if (literal_type_case() == kStruct) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Struct* temp = _impl_.literal_type_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_Struct& Expression_Literal::_internal_struct_() const {
  return literal_type_case() == kStruct
      ? *_impl_.literal_type_.struct__
      : reinterpret_cast<::substrait::Expression_Literal_Struct&>(::substrait::_Expression_Literal_Struct_default_instance_);
}
inline const ::substrait::Expression_Literal_Struct& Expression_Literal::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.struct)
  return _internal_struct_();
}
inline ::substrait::Expression_Literal_Struct* Expression_Literal::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.struct)
  if (literal_type_case() == kStruct) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Struct* temp = _impl_.literal_type_.struct__;
    _impl_.literal_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_struct_(::substrait::Expression_Literal_Struct* struct_) {
  clear_literal_type();
  if (struct_) {
    set_has_struct_();
    _impl_.literal_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.struct)
}
inline ::substrait::Expression_Literal_Struct* Expression_Literal::_internal_mutable_struct_() {
  if (literal_type_case() != kStruct) {
    clear_literal_type();
    set_has_struct_();
    _impl_.literal_type_.struct__ = CreateMaybeMessage< ::substrait::Expression_Literal_Struct >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.struct__;
}
inline ::substrait::Expression_Literal_Struct* Expression_Literal::mutable_struct_() {
  ::substrait::Expression_Literal_Struct* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.struct)
  return _msg;
}

// .substrait.Expression.Literal.Map map = 26 [json_name = "map"];
inline bool Expression_Literal::has_map() const {
  return literal_type_case() == kMap;
}
inline bool Expression_Literal::_internal_has_map() const {
  return literal_type_case() == kMap;
}
inline void Expression_Literal::set_has_map() {
  _impl_._oneof_case_[0] = kMap;
}
inline void Expression_Literal::clear_map() {
  if (literal_type_case() == kMap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.map_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_Map* Expression_Literal::release_map() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.map)
  if (literal_type_case() == kMap) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Map* temp = _impl_.literal_type_.map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_Map& Expression_Literal::_internal_map() const {
  return literal_type_case() == kMap
      ? *_impl_.literal_type_.map_
      : reinterpret_cast<::substrait::Expression_Literal_Map&>(::substrait::_Expression_Literal_Map_default_instance_);
}
inline const ::substrait::Expression_Literal_Map& Expression_Literal::map() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.map)
  return _internal_map();
}
inline ::substrait::Expression_Literal_Map* Expression_Literal::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.map)
  if (literal_type_case() == kMap) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_Map* temp = _impl_.literal_type_.map_;
    _impl_.literal_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_map(::substrait::Expression_Literal_Map* map) {
  clear_literal_type();
  if (map) {
    set_has_map();
    _impl_.literal_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.map)
}
inline ::substrait::Expression_Literal_Map* Expression_Literal::_internal_mutable_map() {
  if (literal_type_case() != kMap) {
    clear_literal_type();
    set_has_map();
    _impl_.literal_type_.map_ = CreateMaybeMessage< ::substrait::Expression_Literal_Map >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.map_;
}
inline ::substrait::Expression_Literal_Map* Expression_Literal::mutable_map() {
  ::substrait::Expression_Literal_Map* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.map)
  return _msg;
}

// int64 timestamp_tz = 27 [json_name = "timestampTz"];
inline bool Expression_Literal::has_timestamp_tz() const {
  return literal_type_case() == kTimestampTz;
}
inline void Expression_Literal::set_has_timestamp_tz() {
  _impl_._oneof_case_[0] = kTimestampTz;
}
inline void Expression_Literal::clear_timestamp_tz() {
  if (literal_type_case() == kTimestampTz) {
    _impl_.literal_type_.timestamp_tz_ = ::int64_t{0};
    clear_has_literal_type();
  }
}
inline ::int64_t Expression_Literal::timestamp_tz() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.timestamp_tz)
  return _internal_timestamp_tz();
}
inline void Expression_Literal::set_timestamp_tz(::int64_t value) {
  _internal_set_timestamp_tz(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.timestamp_tz)
}
inline ::int64_t Expression_Literal::_internal_timestamp_tz() const {
  if (literal_type_case() == kTimestampTz) {
    return _impl_.literal_type_.timestamp_tz_;
  }
  return ::int64_t{0};
}
inline void Expression_Literal::_internal_set_timestamp_tz(::int64_t value) {
  if (literal_type_case() != kTimestampTz) {
    clear_literal_type();
    set_has_timestamp_tz();
  }
  _impl_.literal_type_.timestamp_tz_ = value;
}

// bytes uuid = 28 [json_name = "uuid"];
inline bool Expression_Literal::has_uuid() const {
  return literal_type_case() == kUuid;
}
inline void Expression_Literal::set_has_uuid() {
  _impl_._oneof_case_[0] = kUuid;
}
inline void Expression_Literal::clear_uuid() {
  if (literal_type_case() == kUuid) {
    _impl_.literal_type_.uuid_.Destroy();
    clear_has_literal_type();
  }
}
inline const std::string& Expression_Literal::uuid() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.uuid)
  return _internal_uuid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_Literal::set_uuid(Arg_&& arg,
                                                     Args_... args) {
  if (literal_type_case() != kUuid) {
    clear_literal_type();

    set_has_uuid();
    _impl_.literal_type_.uuid_.InitDefault();
  }
  _impl_.literal_type_.uuid_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.uuid)
}
inline std::string* Expression_Literal::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.uuid)
  return _s;
}
inline const std::string& Expression_Literal::_internal_uuid() const {
  if (literal_type_case() != kUuid) {
    return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.literal_type_.uuid_.Get();
}
inline void Expression_Literal::_internal_set_uuid(const std::string& value) {
  if (literal_type_case() != kUuid) {
    clear_literal_type();

    set_has_uuid();
    _impl_.literal_type_.uuid_.InitDefault();
  }


  _impl_.literal_type_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_Literal::_internal_mutable_uuid() {
  if (literal_type_case() != kUuid) {
    clear_literal_type();

    set_has_uuid();
    _impl_.literal_type_.uuid_.InitDefault();
  }
  return _impl_.literal_type_.uuid_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_Literal::release_uuid() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.uuid)
  if (literal_type_case() != kUuid) {
    return nullptr;
  }
  clear_has_literal_type();
  return _impl_.literal_type_.uuid_.Release();
}
inline void Expression_Literal::set_allocated_uuid(std::string* value) {
  if (has_literal_type()) {
    clear_literal_type();
  }
  if (value != nullptr) {
    set_has_uuid();
    _impl_.literal_type_.uuid_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Literal.uuid)
}

// .substrait.Type null = 29 [json_name = "null"];
inline bool Expression_Literal::has_null() const {
  return literal_type_case() == kNull;
}
inline bool Expression_Literal::_internal_has_null() const {
  return literal_type_case() == kNull;
}
inline void Expression_Literal::set_has_null() {
  _impl_._oneof_case_[0] = kNull;
}
inline ::substrait::Type* Expression_Literal::release_null() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.null)
  if (literal_type_case() == kNull) {
    clear_has_literal_type();
    ::substrait::Type* temp = _impl_.literal_type_.null_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Type& Expression_Literal::_internal_null() const {
  return literal_type_case() == kNull
      ? *_impl_.literal_type_.null_
      : reinterpret_cast<::substrait::Type&>(::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& Expression_Literal::null() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.null)
  return _internal_null();
}
inline ::substrait::Type* Expression_Literal::unsafe_arena_release_null() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.null)
  if (literal_type_case() == kNull) {
    clear_has_literal_type();
    ::substrait::Type* temp = _impl_.literal_type_.null_;
    _impl_.literal_type_.null_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_null(::substrait::Type* null) {
  clear_literal_type();
  if (null) {
    set_has_null();
    _impl_.literal_type_.null_ = null;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.null)
}
inline ::substrait::Type* Expression_Literal::_internal_mutable_null() {
  if (literal_type_case() != kNull) {
    clear_literal_type();
    set_has_null();
    _impl_.literal_type_.null_ = CreateMaybeMessage< ::substrait::Type >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.null_;
}
inline ::substrait::Type* Expression_Literal::mutable_null() {
  ::substrait::Type* _msg = _internal_mutable_null();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.null)
  return _msg;
}

// .substrait.Expression.Literal.List list = 30 [json_name = "list"];
inline bool Expression_Literal::has_list() const {
  return literal_type_case() == kList;
}
inline bool Expression_Literal::_internal_has_list() const {
  return literal_type_case() == kList;
}
inline void Expression_Literal::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Expression_Literal::clear_list() {
  if (literal_type_case() == kList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.list_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_List* Expression_Literal::release_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.list)
  if (literal_type_case() == kList) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_List* temp = _impl_.literal_type_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_List& Expression_Literal::_internal_list() const {
  return literal_type_case() == kList
      ? *_impl_.literal_type_.list_
      : reinterpret_cast<::substrait::Expression_Literal_List&>(::substrait::_Expression_Literal_List_default_instance_);
}
inline const ::substrait::Expression_Literal_List& Expression_Literal::list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.list)
  return _internal_list();
}
inline ::substrait::Expression_Literal_List* Expression_Literal::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.list)
  if (literal_type_case() == kList) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_List* temp = _impl_.literal_type_.list_;
    _impl_.literal_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_list(::substrait::Expression_Literal_List* list) {
  clear_literal_type();
  if (list) {
    set_has_list();
    _impl_.literal_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.list)
}
inline ::substrait::Expression_Literal_List* Expression_Literal::_internal_mutable_list() {
  if (literal_type_case() != kList) {
    clear_literal_type();
    set_has_list();
    _impl_.literal_type_.list_ = CreateMaybeMessage< ::substrait::Expression_Literal_List >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.list_;
}
inline ::substrait::Expression_Literal_List* Expression_Literal::mutable_list() {
  ::substrait::Expression_Literal_List* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.list)
  return _msg;
}

// .substrait.Type.List empty_list = 31 [json_name = "emptyList"];
inline bool Expression_Literal::has_empty_list() const {
  return literal_type_case() == kEmptyList;
}
inline bool Expression_Literal::_internal_has_empty_list() const {
  return literal_type_case() == kEmptyList;
}
inline void Expression_Literal::set_has_empty_list() {
  _impl_._oneof_case_[0] = kEmptyList;
}
inline ::substrait::Type_List* Expression_Literal::release_empty_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.empty_list)
  if (literal_type_case() == kEmptyList) {
    clear_has_literal_type();
    ::substrait::Type_List* temp = _impl_.literal_type_.empty_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.empty_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Type_List& Expression_Literal::_internal_empty_list() const {
  return literal_type_case() == kEmptyList
      ? *_impl_.literal_type_.empty_list_
      : reinterpret_cast<::substrait::Type_List&>(::substrait::_Type_List_default_instance_);
}
inline const ::substrait::Type_List& Expression_Literal::empty_list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.empty_list)
  return _internal_empty_list();
}
inline ::substrait::Type_List* Expression_Literal::unsafe_arena_release_empty_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.empty_list)
  if (literal_type_case() == kEmptyList) {
    clear_has_literal_type();
    ::substrait::Type_List* temp = _impl_.literal_type_.empty_list_;
    _impl_.literal_type_.empty_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_empty_list(::substrait::Type_List* empty_list) {
  clear_literal_type();
  if (empty_list) {
    set_has_empty_list();
    _impl_.literal_type_.empty_list_ = empty_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.empty_list)
}
inline ::substrait::Type_List* Expression_Literal::_internal_mutable_empty_list() {
  if (literal_type_case() != kEmptyList) {
    clear_literal_type();
    set_has_empty_list();
    _impl_.literal_type_.empty_list_ = CreateMaybeMessage< ::substrait::Type_List >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.empty_list_;
}
inline ::substrait::Type_List* Expression_Literal::mutable_empty_list() {
  ::substrait::Type_List* _msg = _internal_mutable_empty_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.empty_list)
  return _msg;
}

// .substrait.Type.Map empty_map = 32 [json_name = "emptyMap"];
inline bool Expression_Literal::has_empty_map() const {
  return literal_type_case() == kEmptyMap;
}
inline bool Expression_Literal::_internal_has_empty_map() const {
  return literal_type_case() == kEmptyMap;
}
inline void Expression_Literal::set_has_empty_map() {
  _impl_._oneof_case_[0] = kEmptyMap;
}
inline ::substrait::Type_Map* Expression_Literal::release_empty_map() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.empty_map)
  if (literal_type_case() == kEmptyMap) {
    clear_has_literal_type();
    ::substrait::Type_Map* temp = _impl_.literal_type_.empty_map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.empty_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Type_Map& Expression_Literal::_internal_empty_map() const {
  return literal_type_case() == kEmptyMap
      ? *_impl_.literal_type_.empty_map_
      : reinterpret_cast<::substrait::Type_Map&>(::substrait::_Type_Map_default_instance_);
}
inline const ::substrait::Type_Map& Expression_Literal::empty_map() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.empty_map)
  return _internal_empty_map();
}
inline ::substrait::Type_Map* Expression_Literal::unsafe_arena_release_empty_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.empty_map)
  if (literal_type_case() == kEmptyMap) {
    clear_has_literal_type();
    ::substrait::Type_Map* temp = _impl_.literal_type_.empty_map_;
    _impl_.literal_type_.empty_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_empty_map(::substrait::Type_Map* empty_map) {
  clear_literal_type();
  if (empty_map) {
    set_has_empty_map();
    _impl_.literal_type_.empty_map_ = empty_map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.empty_map)
}
inline ::substrait::Type_Map* Expression_Literal::_internal_mutable_empty_map() {
  if (literal_type_case() != kEmptyMap) {
    clear_literal_type();
    set_has_empty_map();
    _impl_.literal_type_.empty_map_ = CreateMaybeMessage< ::substrait::Type_Map >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.empty_map_;
}
inline ::substrait::Type_Map* Expression_Literal::mutable_empty_map() {
  ::substrait::Type_Map* _msg = _internal_mutable_empty_map();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.empty_map)
  return _msg;
}

// .substrait.Expression.Literal.UserDefined user_defined = 33 [json_name = "userDefined"];
inline bool Expression_Literal::has_user_defined() const {
  return literal_type_case() == kUserDefined;
}
inline bool Expression_Literal::_internal_has_user_defined() const {
  return literal_type_case() == kUserDefined;
}
inline void Expression_Literal::set_has_user_defined() {
  _impl_._oneof_case_[0] = kUserDefined;
}
inline void Expression_Literal::clear_user_defined() {
  if (literal_type_case() == kUserDefined) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.literal_type_.user_defined_;
    }
    clear_has_literal_type();
  }
}
inline ::substrait::Expression_Literal_UserDefined* Expression_Literal::release_user_defined() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Literal.user_defined)
  if (literal_type_case() == kUserDefined) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_UserDefined* temp = _impl_.literal_type_.user_defined_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.literal_type_.user_defined_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal_UserDefined& Expression_Literal::_internal_user_defined() const {
  return literal_type_case() == kUserDefined
      ? *_impl_.literal_type_.user_defined_
      : reinterpret_cast<::substrait::Expression_Literal_UserDefined&>(::substrait::_Expression_Literal_UserDefined_default_instance_);
}
inline const ::substrait::Expression_Literal_UserDefined& Expression_Literal::user_defined() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.user_defined)
  return _internal_user_defined();
}
inline ::substrait::Expression_Literal_UserDefined* Expression_Literal::unsafe_arena_release_user_defined() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Literal.user_defined)
  if (literal_type_case() == kUserDefined) {
    clear_has_literal_type();
    ::substrait::Expression_Literal_UserDefined* temp = _impl_.literal_type_.user_defined_;
    _impl_.literal_type_.user_defined_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Literal::unsafe_arena_set_allocated_user_defined(::substrait::Expression_Literal_UserDefined* user_defined) {
  clear_literal_type();
  if (user_defined) {
    set_has_user_defined();
    _impl_.literal_type_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Literal.user_defined)
}
inline ::substrait::Expression_Literal_UserDefined* Expression_Literal::_internal_mutable_user_defined() {
  if (literal_type_case() != kUserDefined) {
    clear_literal_type();
    set_has_user_defined();
    _impl_.literal_type_.user_defined_ = CreateMaybeMessage< ::substrait::Expression_Literal_UserDefined >(GetArenaForAllocation());
  }
  return _impl_.literal_type_.user_defined_;
}
inline ::substrait::Expression_Literal_UserDefined* Expression_Literal::mutable_user_defined() {
  ::substrait::Expression_Literal_UserDefined* _msg = _internal_mutable_user_defined();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Literal.user_defined)
  return _msg;
}

// bool nullable = 50 [json_name = "nullable"];
inline void Expression_Literal::clear_nullable() {
  _impl_.nullable_ = false;
}
inline bool Expression_Literal::nullable() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.nullable)
  return _internal_nullable();
}
inline void Expression_Literal::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.nullable)
}
inline bool Expression_Literal::_internal_nullable() const {
  return _impl_.nullable_;
}
inline void Expression_Literal::_internal_set_nullable(bool value) {
  ;
  _impl_.nullable_ = value;
}

// uint32 type_variation_reference = 51 [json_name = "typeVariationReference"];
inline void Expression_Literal::clear_type_variation_reference() {
  _impl_.type_variation_reference_ = 0u;
}
inline ::uint32_t Expression_Literal::type_variation_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Literal.type_variation_reference)
  return _internal_type_variation_reference();
}
inline void Expression_Literal::set_type_variation_reference(::uint32_t value) {
  _internal_set_type_variation_reference(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Literal.type_variation_reference)
}
inline ::uint32_t Expression_Literal::_internal_type_variation_reference() const {
  return _impl_.type_variation_reference_;
}
inline void Expression_Literal::_internal_set_type_variation_reference(::uint32_t value) {
  ;
  _impl_.type_variation_reference_ = value;
}

inline bool Expression_Literal::has_literal_type() const {
  return literal_type_case() != LITERAL_TYPE_NOT_SET;
}
inline void Expression_Literal::clear_has_literal_type() {
  _impl_._oneof_case_[0] = LITERAL_TYPE_NOT_SET;
}
inline Expression_Literal::LiteralTypeCase Expression_Literal::literal_type_case() const {
  return Expression_Literal::LiteralTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_Nested_Map_KeyValue

// .substrait.Expression key = 1 [json_name = "key"];
inline bool Expression_Nested_Map_KeyValue::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline void Expression_Nested_Map_KeyValue::clear_key() {
  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_Nested_Map_KeyValue::_internal_key() const {
  const ::substrait::Expression* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_Nested_Map_KeyValue::key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.Map.KeyValue.key)
  return _internal_key();
}
inline void Expression_Nested_Map_KeyValue::unsafe_arena_set_allocated_key(
    ::substrait::Expression* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Nested.Map.KeyValue.key)
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Nested.Map.KeyValue.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::mutable_key() {
  ::substrait::Expression* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.Map.KeyValue.key)
  return _msg;
}
inline void Expression_Nested_Map_KeyValue::set_allocated_key(::substrait::Expression* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Nested.Map.KeyValue.key)
}

// .substrait.Expression value = 2 [json_name = "value"];
inline bool Expression_Nested_Map_KeyValue::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void Expression_Nested_Map_KeyValue::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& Expression_Nested_Map_KeyValue::_internal_value() const {
  const ::substrait::Expression* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_Nested_Map_KeyValue::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.Map.KeyValue.value)
  return _internal_value();
}
inline void Expression_Nested_Map_KeyValue::unsafe_arena_set_allocated_value(
    ::substrait::Expression* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Nested.Map.KeyValue.value)
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Nested.Map.KeyValue.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::substrait::Expression* Expression_Nested_Map_KeyValue::mutable_value() {
  ::substrait::Expression* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.Map.KeyValue.value)
  return _msg;
}
inline void Expression_Nested_Map_KeyValue::set_allocated_value(::substrait::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Nested.Map.KeyValue.value)
}

// -------------------------------------------------------------------

// Expression_Nested_Map

// repeated .substrait.Expression.Nested.Map.KeyValue key_values = 1 [json_name = "keyValues"];
inline int Expression_Nested_Map::_internal_key_values_size() const {
  return _impl_.key_values_.size();
}
inline int Expression_Nested_Map::key_values_size() const {
  return _internal_key_values_size();
}
inline void Expression_Nested_Map::clear_key_values() {
  _internal_mutable_key_values()->Clear();
}
inline ::substrait::Expression_Nested_Map_KeyValue* Expression_Nested_Map::mutable_key_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.Map.key_values)
  return _internal_mutable_key_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Nested_Map_KeyValue >*
Expression_Nested_Map::mutable_key_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Nested.Map.key_values)
  return _internal_mutable_key_values();
}
inline const ::substrait::Expression_Nested_Map_KeyValue& Expression_Nested_Map::_internal_key_values(int index) const {
  return _internal_key_values().Get(index);
}
inline const ::substrait::Expression_Nested_Map_KeyValue& Expression_Nested_Map::key_values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.Map.key_values)
  return _internal_key_values(index);
}
inline ::substrait::Expression_Nested_Map_KeyValue* Expression_Nested_Map::_internal_add_key_values() {
  return _internal_mutable_key_values()->Add();
}
inline ::substrait::Expression_Nested_Map_KeyValue* Expression_Nested_Map::add_key_values() {
  ::substrait::Expression_Nested_Map_KeyValue* _add = _internal_add_key_values();
  // @@protoc_insertion_point(field_add:substrait.Expression.Nested.Map.key_values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_Nested_Map_KeyValue >&
Expression_Nested_Map::key_values() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Nested.Map.key_values)
  return _internal_key_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Nested_Map_KeyValue>&
Expression_Nested_Map::_internal_key_values() const {
  return _impl_.key_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_Nested_Map_KeyValue>*
Expression_Nested_Map::_internal_mutable_key_values() {
  return &_impl_.key_values_;
}

// -------------------------------------------------------------------

// Expression_Nested_Struct

// repeated .substrait.Expression fields = 1 [json_name = "fields"];
inline int Expression_Nested_Struct::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int Expression_Nested_Struct::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_Nested_Struct::clear_fields() {
  _internal_mutable_fields()->Clear();
}
inline ::substrait::Expression* Expression_Nested_Struct::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.Struct.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_Nested_Struct::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Nested.Struct.fields)
  return _internal_mutable_fields();
}
inline const ::substrait::Expression& Expression_Nested_Struct::_internal_fields(int index) const {
  return _internal_fields().Get(index);
}
inline const ::substrait::Expression& Expression_Nested_Struct::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.Struct.fields)
  return _internal_fields(index);
}
inline ::substrait::Expression* Expression_Nested_Struct::_internal_add_fields() {
  return _internal_mutable_fields()->Add();
}
inline ::substrait::Expression* Expression_Nested_Struct::add_fields() {
  ::substrait::Expression* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:substrait.Expression.Nested.Struct.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_Nested_Struct::fields() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Nested.Struct.fields)
  return _internal_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_Nested_Struct::_internal_fields() const {
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_Nested_Struct::_internal_mutable_fields() {
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// Expression_Nested_List

// repeated .substrait.Expression values = 1 [json_name = "values"];
inline int Expression_Nested_List::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int Expression_Nested_List::values_size() const {
  return _internal_values_size();
}
inline void Expression_Nested_List::clear_values() {
  _internal_mutable_values()->Clear();
}
inline ::substrait::Expression* Expression_Nested_List::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.List.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_Nested_List::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Nested.List.values)
  return _internal_mutable_values();
}
inline const ::substrait::Expression& Expression_Nested_List::_internal_values(int index) const {
  return _internal_values().Get(index);
}
inline const ::substrait::Expression& Expression_Nested_List::values(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.List.values)
  return _internal_values(index);
}
inline ::substrait::Expression* Expression_Nested_List::_internal_add_values() {
  return _internal_mutable_values()->Add();
}
inline ::substrait::Expression* Expression_Nested_List::add_values() {
  ::substrait::Expression* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:substrait.Expression.Nested.List.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_Nested_List::values() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Nested.List.values)
  return _internal_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_Nested_List::_internal_values() const {
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_Nested_List::_internal_mutable_values() {
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// Expression_Nested

// bool nullable = 1 [json_name = "nullable"];
inline void Expression_Nested::clear_nullable() {
  _impl_.nullable_ = false;
}
inline bool Expression_Nested::nullable() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.nullable)
  return _internal_nullable();
}
inline void Expression_Nested::set_nullable(bool value) {
  _internal_set_nullable(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Nested.nullable)
}
inline bool Expression_Nested::_internal_nullable() const {
  return _impl_.nullable_;
}
inline void Expression_Nested::_internal_set_nullable(bool value) {
  ;
  _impl_.nullable_ = value;
}

// uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
inline void Expression_Nested::clear_type_variation_reference() {
  _impl_.type_variation_reference_ = 0u;
}
inline ::uint32_t Expression_Nested::type_variation_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.type_variation_reference)
  return _internal_type_variation_reference();
}
inline void Expression_Nested::set_type_variation_reference(::uint32_t value) {
  _internal_set_type_variation_reference(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Nested.type_variation_reference)
}
inline ::uint32_t Expression_Nested::_internal_type_variation_reference() const {
  return _impl_.type_variation_reference_;
}
inline void Expression_Nested::_internal_set_type_variation_reference(::uint32_t value) {
  ;
  _impl_.type_variation_reference_ = value;
}

// .substrait.Expression.Nested.Struct struct = 3 [json_name = "struct"];
inline bool Expression_Nested::has_struct_() const {
  return nested_type_case() == kStruct;
}
inline bool Expression_Nested::_internal_has_struct_() const {
  return nested_type_case() == kStruct;
}
inline void Expression_Nested::set_has_struct_() {
  _impl_._oneof_case_[0] = kStruct;
}
inline void Expression_Nested::clear_struct_() {
  if (nested_type_case() == kStruct) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.nested_type_.struct__;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::Expression_Nested_Struct* Expression_Nested::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Nested.struct)
  if (nested_type_case() == kStruct) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_Struct* temp = _impl_.nested_type_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.nested_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Nested_Struct& Expression_Nested::_internal_struct_() const {
  return nested_type_case() == kStruct
      ? *_impl_.nested_type_.struct__
      : reinterpret_cast<::substrait::Expression_Nested_Struct&>(::substrait::_Expression_Nested_Struct_default_instance_);
}
inline const ::substrait::Expression_Nested_Struct& Expression_Nested::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.struct)
  return _internal_struct_();
}
inline ::substrait::Expression_Nested_Struct* Expression_Nested::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Nested.struct)
  if (nested_type_case() == kStruct) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_Struct* temp = _impl_.nested_type_.struct__;
    _impl_.nested_type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_struct_(::substrait::Expression_Nested_Struct* struct_) {
  clear_nested_type();
  if (struct_) {
    set_has_struct_();
    _impl_.nested_type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Nested.struct)
}
inline ::substrait::Expression_Nested_Struct* Expression_Nested::_internal_mutable_struct_() {
  if (nested_type_case() != kStruct) {
    clear_nested_type();
    set_has_struct_();
    _impl_.nested_type_.struct__ = CreateMaybeMessage< ::substrait::Expression_Nested_Struct >(GetArenaForAllocation());
  }
  return _impl_.nested_type_.struct__;
}
inline ::substrait::Expression_Nested_Struct* Expression_Nested::mutable_struct_() {
  ::substrait::Expression_Nested_Struct* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.struct)
  return _msg;
}

// .substrait.Expression.Nested.List list = 4 [json_name = "list"];
inline bool Expression_Nested::has_list() const {
  return nested_type_case() == kList;
}
inline bool Expression_Nested::_internal_has_list() const {
  return nested_type_case() == kList;
}
inline void Expression_Nested::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Expression_Nested::clear_list() {
  if (nested_type_case() == kList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.nested_type_.list_;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::Expression_Nested_List* Expression_Nested::release_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Nested.list)
  if (nested_type_case() == kList) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_List* temp = _impl_.nested_type_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.nested_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Nested_List& Expression_Nested::_internal_list() const {
  return nested_type_case() == kList
      ? *_impl_.nested_type_.list_
      : reinterpret_cast<::substrait::Expression_Nested_List&>(::substrait::_Expression_Nested_List_default_instance_);
}
inline const ::substrait::Expression_Nested_List& Expression_Nested::list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.list)
  return _internal_list();
}
inline ::substrait::Expression_Nested_List* Expression_Nested::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Nested.list)
  if (nested_type_case() == kList) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_List* temp = _impl_.nested_type_.list_;
    _impl_.nested_type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_list(::substrait::Expression_Nested_List* list) {
  clear_nested_type();
  if (list) {
    set_has_list();
    _impl_.nested_type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Nested.list)
}
inline ::substrait::Expression_Nested_List* Expression_Nested::_internal_mutable_list() {
  if (nested_type_case() != kList) {
    clear_nested_type();
    set_has_list();
    _impl_.nested_type_.list_ = CreateMaybeMessage< ::substrait::Expression_Nested_List >(GetArenaForAllocation());
  }
  return _impl_.nested_type_.list_;
}
inline ::substrait::Expression_Nested_List* Expression_Nested::mutable_list() {
  ::substrait::Expression_Nested_List* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.list)
  return _msg;
}

// .substrait.Expression.Nested.Map map = 5 [json_name = "map"];
inline bool Expression_Nested::has_map() const {
  return nested_type_case() == kMap;
}
inline bool Expression_Nested::_internal_has_map() const {
  return nested_type_case() == kMap;
}
inline void Expression_Nested::set_has_map() {
  _impl_._oneof_case_[0] = kMap;
}
inline void Expression_Nested::clear_map() {
  if (nested_type_case() == kMap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.nested_type_.map_;
    }
    clear_has_nested_type();
  }
}
inline ::substrait::Expression_Nested_Map* Expression_Nested::release_map() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Nested.map)
  if (nested_type_case() == kMap) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_Map* temp = _impl_.nested_type_.map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.nested_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Nested_Map& Expression_Nested::_internal_map() const {
  return nested_type_case() == kMap
      ? *_impl_.nested_type_.map_
      : reinterpret_cast<::substrait::Expression_Nested_Map&>(::substrait::_Expression_Nested_Map_default_instance_);
}
inline const ::substrait::Expression_Nested_Map& Expression_Nested::map() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Nested.map)
  return _internal_map();
}
inline ::substrait::Expression_Nested_Map* Expression_Nested::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Nested.map)
  if (nested_type_case() == kMap) {
    clear_has_nested_type();
    ::substrait::Expression_Nested_Map* temp = _impl_.nested_type_.map_;
    _impl_.nested_type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Nested::unsafe_arena_set_allocated_map(::substrait::Expression_Nested_Map* map) {
  clear_nested_type();
  if (map) {
    set_has_map();
    _impl_.nested_type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Nested.map)
}
inline ::substrait::Expression_Nested_Map* Expression_Nested::_internal_mutable_map() {
  if (nested_type_case() != kMap) {
    clear_nested_type();
    set_has_map();
    _impl_.nested_type_.map_ = CreateMaybeMessage< ::substrait::Expression_Nested_Map >(GetArenaForAllocation());
  }
  return _impl_.nested_type_.map_;
}
inline ::substrait::Expression_Nested_Map* Expression_Nested::mutable_map() {
  ::substrait::Expression_Nested_Map* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Nested.map)
  return _msg;
}

inline bool Expression_Nested::has_nested_type() const {
  return nested_type_case() != NESTED_TYPE_NOT_SET;
}
inline void Expression_Nested::clear_has_nested_type() {
  _impl_._oneof_case_[0] = NESTED_TYPE_NOT_SET;
}
inline Expression_Nested::NestedTypeCase Expression_Nested::nested_type_case() const {
  return Expression_Nested::NestedTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_ScalarFunction

// uint32 function_reference = 1 [json_name = "functionReference"];
inline void Expression_ScalarFunction::clear_function_reference() {
  _impl_.function_reference_ = 0u;
}
inline ::uint32_t Expression_ScalarFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ScalarFunction.function_reference)
  return _internal_function_reference();
}
inline void Expression_ScalarFunction::set_function_reference(::uint32_t value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.ScalarFunction.function_reference)
}
inline ::uint32_t Expression_ScalarFunction::_internal_function_reference() const {
  return _impl_.function_reference_;
}
inline void Expression_ScalarFunction::_internal_set_function_reference(::uint32_t value) {
  ;
  _impl_.function_reference_ = value;
}

// repeated .substrait.FunctionArgument arguments = 4 [json_name = "arguments"];
inline int Expression_ScalarFunction::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int Expression_ScalarFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_ScalarFunction::clear_arguments() {
  _internal_mutable_arguments()->Clear();
}
inline ::substrait::FunctionArgument* Expression_ScalarFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ScalarFunction.arguments)
  return _internal_mutable_arguments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
Expression_ScalarFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.ScalarFunction.arguments)
  return _internal_mutable_arguments();
}
inline const ::substrait::FunctionArgument& Expression_ScalarFunction::_internal_arguments(int index) const {
  return _internal_arguments().Get(index);
}
inline const ::substrait::FunctionArgument& Expression_ScalarFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ScalarFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::FunctionArgument* Expression_ScalarFunction::_internal_add_arguments() {
  return _internal_mutable_arguments()->Add();
}
inline ::substrait::FunctionArgument* Expression_ScalarFunction::add_arguments() {
  ::substrait::FunctionArgument* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:substrait.Expression.ScalarFunction.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
Expression_ScalarFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.ScalarFunction.arguments)
  return _internal_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>&
Expression_ScalarFunction::_internal_arguments() const {
  return _impl_.arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>*
Expression_ScalarFunction::_internal_mutable_arguments() {
  return &_impl_.arguments_;
}

// repeated .substrait.FunctionOption options = 5 [json_name = "options"];
inline int Expression_ScalarFunction::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int Expression_ScalarFunction::options_size() const {
  return _internal_options_size();
}
inline void Expression_ScalarFunction::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::substrait::FunctionOption* Expression_ScalarFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ScalarFunction.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
Expression_ScalarFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.ScalarFunction.options)
  return _internal_mutable_options();
}
inline const ::substrait::FunctionOption& Expression_ScalarFunction::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::substrait::FunctionOption& Expression_ScalarFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ScalarFunction.options)
  return _internal_options(index);
}
inline ::substrait::FunctionOption* Expression_ScalarFunction::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::substrait::FunctionOption* Expression_ScalarFunction::add_options() {
  ::substrait::FunctionOption* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:substrait.Expression.ScalarFunction.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
Expression_ScalarFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.ScalarFunction.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>&
Expression_ScalarFunction::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>*
Expression_ScalarFunction::_internal_mutable_options() {
  return &_impl_.options_;
}

// .substrait.Type output_type = 3 [json_name = "outputType"];
inline bool Expression_ScalarFunction::has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_type_ != nullptr);
  return value;
}
inline const ::substrait::Type& Expression_ScalarFunction::_internal_output_type() const {
  const ::substrait::Type* p = _impl_.output_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Type&>(
      ::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& Expression_ScalarFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ScalarFunction.output_type)
  return _internal_output_type();
}
inline void Expression_ScalarFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::Type* output_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  _impl_.output_type_ = output_type;
  if (output_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ScalarFunction.output_type)
}
inline ::substrait::Type* Expression_ScalarFunction::release_output_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Type* Expression_ScalarFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ScalarFunction.output_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
  return temp;
}
inline ::substrait::Type* Expression_ScalarFunction::_internal_mutable_output_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Type>(GetArenaForAllocation());
    _impl_.output_type_ = p;
  }
  return _impl_.output_type_;
}
inline ::substrait::Type* Expression_ScalarFunction::mutable_output_type() {
  ::substrait::Type* _msg = _internal_mutable_output_type();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ScalarFunction.output_type)
  return _msg;
}
inline void Expression_ScalarFunction::set_allocated_output_type(::substrait::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type));
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ScalarFunction.output_type)
}

// repeated .substrait.Expression args = 2 [json_name = "args", deprecated = true];
inline int Expression_ScalarFunction::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int Expression_ScalarFunction::args_size() const {
  return _internal_args_size();
}
inline void Expression_ScalarFunction::clear_args() {
  _internal_mutable_args()->Clear();
}
inline ::substrait::Expression* Expression_ScalarFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ScalarFunction.args)
  return _internal_mutable_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_ScalarFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.ScalarFunction.args)
  return _internal_mutable_args();
}
inline const ::substrait::Expression& Expression_ScalarFunction::_internal_args(int index) const {
  return _internal_args().Get(index);
}
inline const ::substrait::Expression& Expression_ScalarFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ScalarFunction.args)
  return _internal_args(index);
}
inline ::substrait::Expression* Expression_ScalarFunction::_internal_add_args() {
  return _internal_mutable_args()->Add();
}
inline ::substrait::Expression* Expression_ScalarFunction::add_args() {
  ::substrait::Expression* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:substrait.Expression.ScalarFunction.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_ScalarFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.ScalarFunction.args)
  return _internal_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_ScalarFunction::_internal_args() const {
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_ScalarFunction::_internal_mutable_args() {
  return &_impl_.args_;
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Preceding

// int64 offset = 1 [json_name = "offset"];
inline void Expression_WindowFunction_Bound_Preceding::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t Expression_WindowFunction_Bound_Preceding::offset() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.Preceding.offset)
  return _internal_offset();
}
inline void Expression_WindowFunction_Bound_Preceding::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.WindowFunction.Bound.Preceding.offset)
}
inline ::int64_t Expression_WindowFunction_Bound_Preceding::_internal_offset() const {
  return _impl_.offset_;
}
inline void Expression_WindowFunction_Bound_Preceding::_internal_set_offset(::int64_t value) {
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Following

// int64 offset = 1 [json_name = "offset"];
inline void Expression_WindowFunction_Bound_Following::clear_offset() {
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t Expression_WindowFunction_Bound_Following::offset() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.Following.offset)
  return _internal_offset();
}
inline void Expression_WindowFunction_Bound_Following::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.WindowFunction.Bound.Following.offset)
}
inline ::int64_t Expression_WindowFunction_Bound_Following::_internal_offset() const {
  return _impl_.offset_;
}
inline void Expression_WindowFunction_Bound_Following::_internal_set_offset(::int64_t value) {
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_CurrentRow

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound_Unbounded

// -------------------------------------------------------------------

// Expression_WindowFunction_Bound

// .substrait.Expression.WindowFunction.Bound.Preceding preceding = 1 [json_name = "preceding"];
inline bool Expression_WindowFunction_Bound::has_preceding() const {
  return kind_case() == kPreceding;
}
inline bool Expression_WindowFunction_Bound::_internal_has_preceding() const {
  return kind_case() == kPreceding;
}
inline void Expression_WindowFunction_Bound::set_has_preceding() {
  _impl_._oneof_case_[0] = kPreceding;
}
inline void Expression_WindowFunction_Bound::clear_preceding() {
  if (kind_case() == kPreceding) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.preceding_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::release_preceding() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.Bound.preceding)
  if (kind_case() == kPreceding) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Preceding* temp = _impl_.kind_.preceding_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.preceding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_WindowFunction_Bound_Preceding& Expression_WindowFunction_Bound::_internal_preceding() const {
  return kind_case() == kPreceding
      ? *_impl_.kind_.preceding_
      : reinterpret_cast<::substrait::Expression_WindowFunction_Bound_Preceding&>(::substrait::_Expression_WindowFunction_Bound_Preceding_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound_Preceding& Expression_WindowFunction_Bound::preceding() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.preceding)
  return _internal_preceding();
}
inline ::substrait::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::unsafe_arena_release_preceding() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.WindowFunction.Bound.preceding)
  if (kind_case() == kPreceding) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Preceding* temp = _impl_.kind_.preceding_;
    _impl_.kind_.preceding_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_preceding(::substrait::Expression_WindowFunction_Bound_Preceding* preceding) {
  clear_kind();
  if (preceding) {
    set_has_preceding();
    _impl_.kind_.preceding_ = preceding;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.Bound.preceding)
}
inline ::substrait::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::_internal_mutable_preceding() {
  if (kind_case() != kPreceding) {
    clear_kind();
    set_has_preceding();
    _impl_.kind_.preceding_ = CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Preceding >(GetArenaForAllocation());
  }
  return _impl_.kind_.preceding_;
}
inline ::substrait::Expression_WindowFunction_Bound_Preceding* Expression_WindowFunction_Bound::mutable_preceding() {
  ::substrait::Expression_WindowFunction_Bound_Preceding* _msg = _internal_mutable_preceding();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.Bound.preceding)
  return _msg;
}

// .substrait.Expression.WindowFunction.Bound.Following following = 2 [json_name = "following"];
inline bool Expression_WindowFunction_Bound::has_following() const {
  return kind_case() == kFollowing;
}
inline bool Expression_WindowFunction_Bound::_internal_has_following() const {
  return kind_case() == kFollowing;
}
inline void Expression_WindowFunction_Bound::set_has_following() {
  _impl_._oneof_case_[0] = kFollowing;
}
inline void Expression_WindowFunction_Bound::clear_following() {
  if (kind_case() == kFollowing) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.following_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::release_following() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.Bound.following)
  if (kind_case() == kFollowing) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Following* temp = _impl_.kind_.following_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.following_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_WindowFunction_Bound_Following& Expression_WindowFunction_Bound::_internal_following() const {
  return kind_case() == kFollowing
      ? *_impl_.kind_.following_
      : reinterpret_cast<::substrait::Expression_WindowFunction_Bound_Following&>(::substrait::_Expression_WindowFunction_Bound_Following_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound_Following& Expression_WindowFunction_Bound::following() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.following)
  return _internal_following();
}
inline ::substrait::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::unsafe_arena_release_following() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.WindowFunction.Bound.following)
  if (kind_case() == kFollowing) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Following* temp = _impl_.kind_.following_;
    _impl_.kind_.following_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_following(::substrait::Expression_WindowFunction_Bound_Following* following) {
  clear_kind();
  if (following) {
    set_has_following();
    _impl_.kind_.following_ = following;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.Bound.following)
}
inline ::substrait::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::_internal_mutable_following() {
  if (kind_case() != kFollowing) {
    clear_kind();
    set_has_following();
    _impl_.kind_.following_ = CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Following >(GetArenaForAllocation());
  }
  return _impl_.kind_.following_;
}
inline ::substrait::Expression_WindowFunction_Bound_Following* Expression_WindowFunction_Bound::mutable_following() {
  ::substrait::Expression_WindowFunction_Bound_Following* _msg = _internal_mutable_following();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.Bound.following)
  return _msg;
}

// .substrait.Expression.WindowFunction.Bound.CurrentRow current_row = 3 [json_name = "currentRow"];
inline bool Expression_WindowFunction_Bound::has_current_row() const {
  return kind_case() == kCurrentRow;
}
inline bool Expression_WindowFunction_Bound::_internal_has_current_row() const {
  return kind_case() == kCurrentRow;
}
inline void Expression_WindowFunction_Bound::set_has_current_row() {
  _impl_._oneof_case_[0] = kCurrentRow;
}
inline void Expression_WindowFunction_Bound::clear_current_row() {
  if (kind_case() == kCurrentRow) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.current_row_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::release_current_row() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.Bound.current_row)
  if (kind_case() == kCurrentRow) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_CurrentRow* temp = _impl_.kind_.current_row_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.current_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_WindowFunction_Bound_CurrentRow& Expression_WindowFunction_Bound::_internal_current_row() const {
  return kind_case() == kCurrentRow
      ? *_impl_.kind_.current_row_
      : reinterpret_cast<::substrait::Expression_WindowFunction_Bound_CurrentRow&>(::substrait::_Expression_WindowFunction_Bound_CurrentRow_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound_CurrentRow& Expression_WindowFunction_Bound::current_row() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.current_row)
  return _internal_current_row();
}
inline ::substrait::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::unsafe_arena_release_current_row() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.WindowFunction.Bound.current_row)
  if (kind_case() == kCurrentRow) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_CurrentRow* temp = _impl_.kind_.current_row_;
    _impl_.kind_.current_row_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_current_row(::substrait::Expression_WindowFunction_Bound_CurrentRow* current_row) {
  clear_kind();
  if (current_row) {
    set_has_current_row();
    _impl_.kind_.current_row_ = current_row;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.Bound.current_row)
}
inline ::substrait::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::_internal_mutable_current_row() {
  if (kind_case() != kCurrentRow) {
    clear_kind();
    set_has_current_row();
    _impl_.kind_.current_row_ = CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_CurrentRow >(GetArenaForAllocation());
  }
  return _impl_.kind_.current_row_;
}
inline ::substrait::Expression_WindowFunction_Bound_CurrentRow* Expression_WindowFunction_Bound::mutable_current_row() {
  ::substrait::Expression_WindowFunction_Bound_CurrentRow* _msg = _internal_mutable_current_row();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.Bound.current_row)
  return _msg;
}

// .substrait.Expression.WindowFunction.Bound.Unbounded unbounded = 4 [json_name = "unbounded"];
inline bool Expression_WindowFunction_Bound::has_unbounded() const {
  return kind_case() == kUnbounded;
}
inline bool Expression_WindowFunction_Bound::_internal_has_unbounded() const {
  return kind_case() == kUnbounded;
}
inline void Expression_WindowFunction_Bound::set_has_unbounded() {
  _impl_._oneof_case_[0] = kUnbounded;
}
inline void Expression_WindowFunction_Bound::clear_unbounded() {
  if (kind_case() == kUnbounded) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.unbounded_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::release_unbounded() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.Bound.unbounded)
  if (kind_case() == kUnbounded) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Unbounded* temp = _impl_.kind_.unbounded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_WindowFunction_Bound_Unbounded& Expression_WindowFunction_Bound::_internal_unbounded() const {
  return kind_case() == kUnbounded
      ? *_impl_.kind_.unbounded_
      : reinterpret_cast<::substrait::Expression_WindowFunction_Bound_Unbounded&>(::substrait::_Expression_WindowFunction_Bound_Unbounded_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound_Unbounded& Expression_WindowFunction_Bound::unbounded() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.Bound.unbounded)
  return _internal_unbounded();
}
inline ::substrait::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::unsafe_arena_release_unbounded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.WindowFunction.Bound.unbounded)
  if (kind_case() == kUnbounded) {
    clear_has_kind();
    ::substrait::Expression_WindowFunction_Bound_Unbounded* temp = _impl_.kind_.unbounded_;
    _impl_.kind_.unbounded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_WindowFunction_Bound::unsafe_arena_set_allocated_unbounded(::substrait::Expression_WindowFunction_Bound_Unbounded* unbounded) {
  clear_kind();
  if (unbounded) {
    set_has_unbounded();
    _impl_.kind_.unbounded_ = unbounded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.Bound.unbounded)
}
inline ::substrait::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::_internal_mutable_unbounded() {
  if (kind_case() != kUnbounded) {
    clear_kind();
    set_has_unbounded();
    _impl_.kind_.unbounded_ = CreateMaybeMessage< ::substrait::Expression_WindowFunction_Bound_Unbounded >(GetArenaForAllocation());
  }
  return _impl_.kind_.unbounded_;
}
inline ::substrait::Expression_WindowFunction_Bound_Unbounded* Expression_WindowFunction_Bound::mutable_unbounded() {
  ::substrait::Expression_WindowFunction_Bound_Unbounded* _msg = _internal_mutable_unbounded();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.Bound.unbounded)
  return _msg;
}

inline bool Expression_WindowFunction_Bound::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Expression_WindowFunction_Bound::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Expression_WindowFunction_Bound::KindCase Expression_WindowFunction_Bound::kind_case() const {
  return Expression_WindowFunction_Bound::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_WindowFunction

// uint32 function_reference = 1 [json_name = "functionReference"];
inline void Expression_WindowFunction::clear_function_reference() {
  _impl_.function_reference_ = 0u;
}
inline ::uint32_t Expression_WindowFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.function_reference)
  return _internal_function_reference();
}
inline void Expression_WindowFunction::set_function_reference(::uint32_t value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.WindowFunction.function_reference)
}
inline ::uint32_t Expression_WindowFunction::_internal_function_reference() const {
  return _impl_.function_reference_;
}
inline void Expression_WindowFunction::_internal_set_function_reference(::uint32_t value) {
  ;
  _impl_.function_reference_ = value;
}

// repeated .substrait.FunctionArgument arguments = 9 [json_name = "arguments"];
inline int Expression_WindowFunction::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int Expression_WindowFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_WindowFunction::clear_arguments() {
  _internal_mutable_arguments()->Clear();
}
inline ::substrait::FunctionArgument* Expression_WindowFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.arguments)
  return _internal_mutable_arguments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
Expression_WindowFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.WindowFunction.arguments)
  return _internal_mutable_arguments();
}
inline const ::substrait::FunctionArgument& Expression_WindowFunction::_internal_arguments(int index) const {
  return _internal_arguments().Get(index);
}
inline const ::substrait::FunctionArgument& Expression_WindowFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::FunctionArgument* Expression_WindowFunction::_internal_add_arguments() {
  return _internal_mutable_arguments()->Add();
}
inline ::substrait::FunctionArgument* Expression_WindowFunction::add_arguments() {
  ::substrait::FunctionArgument* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:substrait.Expression.WindowFunction.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
Expression_WindowFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.WindowFunction.arguments)
  return _internal_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>&
Expression_WindowFunction::_internal_arguments() const {
  return _impl_.arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>*
Expression_WindowFunction::_internal_mutable_arguments() {
  return &_impl_.arguments_;
}

// repeated .substrait.FunctionOption options = 11 [json_name = "options"];
inline int Expression_WindowFunction::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int Expression_WindowFunction::options_size() const {
  return _internal_options_size();
}
inline void Expression_WindowFunction::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::substrait::FunctionOption* Expression_WindowFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
Expression_WindowFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.WindowFunction.options)
  return _internal_mutable_options();
}
inline const ::substrait::FunctionOption& Expression_WindowFunction::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::substrait::FunctionOption& Expression_WindowFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.options)
  return _internal_options(index);
}
inline ::substrait::FunctionOption* Expression_WindowFunction::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::substrait::FunctionOption* Expression_WindowFunction::add_options() {
  ::substrait::FunctionOption* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:substrait.Expression.WindowFunction.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
Expression_WindowFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.WindowFunction.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>&
Expression_WindowFunction::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>*
Expression_WindowFunction::_internal_mutable_options() {
  return &_impl_.options_;
}

// .substrait.Type output_type = 7 [json_name = "outputType"];
inline bool Expression_WindowFunction::has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_type_ != nullptr);
  return value;
}
inline const ::substrait::Type& Expression_WindowFunction::_internal_output_type() const {
  const ::substrait::Type* p = _impl_.output_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Type&>(
      ::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& Expression_WindowFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.output_type)
  return _internal_output_type();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::Type* output_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  _impl_.output_type_ = output_type;
  if (output_type) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.output_type)
}
inline ::substrait::Type* Expression_WindowFunction::release_output_type() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Type* Expression_WindowFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.output_type)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
  return temp;
}
inline ::substrait::Type* Expression_WindowFunction::_internal_mutable_output_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Type>(GetArenaForAllocation());
    _impl_.output_type_ = p;
  }
  return _impl_.output_type_;
}
inline ::substrait::Type* Expression_WindowFunction::mutable_output_type() {
  ::substrait::Type* _msg = _internal_mutable_output_type();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.output_type)
  return _msg;
}
inline void Expression_WindowFunction::set_allocated_output_type(::substrait::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type));
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.output_type)
}

// .substrait.AggregationPhase phase = 6 [json_name = "phase"];
inline void Expression_WindowFunction::clear_phase() {
  _impl_.phase_ = 0;
}
inline ::substrait::AggregationPhase Expression_WindowFunction::phase() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.phase)
  return _internal_phase();
}
inline void Expression_WindowFunction::set_phase(::substrait::AggregationPhase value) {
   _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.WindowFunction.phase)
}
inline ::substrait::AggregationPhase Expression_WindowFunction::_internal_phase() const {
  return static_cast<::substrait::AggregationPhase>(_impl_.phase_);
}
inline void Expression_WindowFunction::_internal_set_phase(::substrait::AggregationPhase value) {
  ;
  _impl_.phase_ = value;
}

// repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
inline int Expression_WindowFunction::_internal_sorts_size() const {
  return _impl_.sorts_.size();
}
inline int Expression_WindowFunction::sorts_size() const {
  return _internal_sorts_size();
}
inline void Expression_WindowFunction::clear_sorts() {
  _internal_mutable_sorts()->Clear();
}
inline ::substrait::SortField* Expression_WindowFunction::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.sorts)
  return _internal_mutable_sorts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
Expression_WindowFunction::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.WindowFunction.sorts)
  return _internal_mutable_sorts();
}
inline const ::substrait::SortField& Expression_WindowFunction::_internal_sorts(int index) const {
  return _internal_sorts().Get(index);
}
inline const ::substrait::SortField& Expression_WindowFunction::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.sorts)
  return _internal_sorts(index);
}
inline ::substrait::SortField* Expression_WindowFunction::_internal_add_sorts() {
  return _internal_mutable_sorts()->Add();
}
inline ::substrait::SortField* Expression_WindowFunction::add_sorts() {
  ::substrait::SortField* _add = _internal_add_sorts();
  // @@protoc_insertion_point(field_add:substrait.Expression.WindowFunction.sorts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
Expression_WindowFunction::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.WindowFunction.sorts)
  return _internal_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>&
Expression_WindowFunction::_internal_sorts() const {
  return _impl_.sorts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>*
Expression_WindowFunction::_internal_mutable_sorts() {
  return &_impl_.sorts_;
}

// .substrait.AggregateFunction.AggregationInvocation invocation = 10 [json_name = "invocation"];
inline void Expression_WindowFunction::clear_invocation() {
  _impl_.invocation_ = 0;
}
inline ::substrait::AggregateFunction_AggregationInvocation Expression_WindowFunction::invocation() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.invocation)
  return _internal_invocation();
}
inline void Expression_WindowFunction::set_invocation(::substrait::AggregateFunction_AggregationInvocation value) {
   _internal_set_invocation(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.WindowFunction.invocation)
}
inline ::substrait::AggregateFunction_AggregationInvocation Expression_WindowFunction::_internal_invocation() const {
  return static_cast<::substrait::AggregateFunction_AggregationInvocation>(_impl_.invocation_);
}
inline void Expression_WindowFunction::_internal_set_invocation(::substrait::AggregateFunction_AggregationInvocation value) {
  ;
  _impl_.invocation_ = value;
}

// repeated .substrait.Expression partitions = 2 [json_name = "partitions"];
inline int Expression_WindowFunction::_internal_partitions_size() const {
  return _impl_.partitions_.size();
}
inline int Expression_WindowFunction::partitions_size() const {
  return _internal_partitions_size();
}
inline void Expression_WindowFunction::clear_partitions() {
  _internal_mutable_partitions()->Clear();
}
inline ::substrait::Expression* Expression_WindowFunction::mutable_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.partitions)
  return _internal_mutable_partitions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_WindowFunction::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.WindowFunction.partitions)
  return _internal_mutable_partitions();
}
inline const ::substrait::Expression& Expression_WindowFunction::_internal_partitions(int index) const {
  return _internal_partitions().Get(index);
}
inline const ::substrait::Expression& Expression_WindowFunction::partitions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.partitions)
  return _internal_partitions(index);
}
inline ::substrait::Expression* Expression_WindowFunction::_internal_add_partitions() {
  return _internal_mutable_partitions()->Add();
}
inline ::substrait::Expression* Expression_WindowFunction::add_partitions() {
  ::substrait::Expression* _add = _internal_add_partitions();
  // @@protoc_insertion_point(field_add:substrait.Expression.WindowFunction.partitions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_WindowFunction::partitions() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.WindowFunction.partitions)
  return _internal_partitions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_WindowFunction::_internal_partitions() const {
  return _impl_.partitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_WindowFunction::_internal_mutable_partitions() {
  return &_impl_.partitions_;
}

// .substrait.Expression.WindowFunction.Bound lower_bound = 5 [json_name = "lowerBound"];
inline bool Expression_WindowFunction::has_lower_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lower_bound_ != nullptr);
  return value;
}
inline void Expression_WindowFunction::clear_lower_bound() {
  if (_impl_.lower_bound_ != nullptr) _impl_.lower_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression_WindowFunction_Bound& Expression_WindowFunction::_internal_lower_bound() const {
  const ::substrait::Expression_WindowFunction_Bound* p = _impl_.lower_bound_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_WindowFunction_Bound&>(
      ::substrait::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound& Expression_WindowFunction::lower_bound() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.lower_bound)
  return _internal_lower_bound();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_lower_bound(
    ::substrait::Expression_WindowFunction_Bound* lower_bound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lower_bound_);
  }
  _impl_.lower_bound_ = lower_bound;
  if (lower_bound) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.lower_bound)
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::release_lower_bound() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_WindowFunction_Bound* temp = _impl_.lower_bound_;
  _impl_.lower_bound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::unsafe_arena_release_lower_bound() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.lower_bound)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_WindowFunction_Bound* temp = _impl_.lower_bound_;
  _impl_.lower_bound_ = nullptr;
  return temp;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::_internal_mutable_lower_bound() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.lower_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound>(GetArenaForAllocation());
    _impl_.lower_bound_ = p;
  }
  return _impl_.lower_bound_;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::mutable_lower_bound() {
  ::substrait::Expression_WindowFunction_Bound* _msg = _internal_mutable_lower_bound();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.lower_bound)
  return _msg;
}
inline void Expression_WindowFunction::set_allocated_lower_bound(::substrait::Expression_WindowFunction_Bound* lower_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lower_bound_;
  }
  if (lower_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lower_bound);
    if (message_arena != submessage_arena) {
      lower_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_bound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lower_bound_ = lower_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.lower_bound)
}

// .substrait.Expression.WindowFunction.Bound upper_bound = 4 [json_name = "upperBound"];
inline bool Expression_WindowFunction::has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_bound_ != nullptr);
  return value;
}
inline void Expression_WindowFunction::clear_upper_bound() {
  if (_impl_.upper_bound_ != nullptr) _impl_.upper_bound_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_WindowFunction_Bound& Expression_WindowFunction::_internal_upper_bound() const {
  const ::substrait::Expression_WindowFunction_Bound* p = _impl_.upper_bound_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_WindowFunction_Bound&>(
      ::substrait::_Expression_WindowFunction_Bound_default_instance_);
}
inline const ::substrait::Expression_WindowFunction_Bound& Expression_WindowFunction::upper_bound() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.upper_bound)
  return _internal_upper_bound();
}
inline void Expression_WindowFunction::unsafe_arena_set_allocated_upper_bound(
    ::substrait::Expression_WindowFunction_Bound* upper_bound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upper_bound_);
  }
  _impl_.upper_bound_ = upper_bound;
  if (upper_bound) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.WindowFunction.upper_bound)
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::release_upper_bound() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_WindowFunction_Bound* temp = _impl_.upper_bound_;
  _impl_.upper_bound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::unsafe_arena_release_upper_bound() {
  // @@protoc_insertion_point(field_release:substrait.Expression.WindowFunction.upper_bound)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_WindowFunction_Bound* temp = _impl_.upper_bound_;
  _impl_.upper_bound_ = nullptr;
  return temp;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::_internal_mutable_upper_bound() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.upper_bound_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_WindowFunction_Bound>(GetArenaForAllocation());
    _impl_.upper_bound_ = p;
  }
  return _impl_.upper_bound_;
}
inline ::substrait::Expression_WindowFunction_Bound* Expression_WindowFunction::mutable_upper_bound() {
  ::substrait::Expression_WindowFunction_Bound* _msg = _internal_mutable_upper_bound();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.upper_bound)
  return _msg;
}
inline void Expression_WindowFunction::set_allocated_upper_bound(::substrait::Expression_WindowFunction_Bound* upper_bound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.upper_bound_;
  }
  if (upper_bound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_bound);
    if (message_arena != submessage_arena) {
      upper_bound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_bound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.upper_bound_ = upper_bound;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.WindowFunction.upper_bound)
}

// repeated .substrait.Expression args = 8 [json_name = "args", deprecated = true];
inline int Expression_WindowFunction::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int Expression_WindowFunction::args_size() const {
  return _internal_args_size();
}
inline void Expression_WindowFunction::clear_args() {
  _internal_mutable_args()->Clear();
}
inline ::substrait::Expression* Expression_WindowFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.WindowFunction.args)
  return _internal_mutable_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_WindowFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.WindowFunction.args)
  return _internal_mutable_args();
}
inline const ::substrait::Expression& Expression_WindowFunction::_internal_args(int index) const {
  return _internal_args().Get(index);
}
inline const ::substrait::Expression& Expression_WindowFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.WindowFunction.args)
  return _internal_args(index);
}
inline ::substrait::Expression* Expression_WindowFunction::_internal_add_args() {
  return _internal_mutable_args()->Add();
}
inline ::substrait::Expression* Expression_WindowFunction::add_args() {
  ::substrait::Expression* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:substrait.Expression.WindowFunction.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_WindowFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.WindowFunction.args)
  return _internal_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_WindowFunction::_internal_args() const {
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_WindowFunction::_internal_mutable_args() {
  return &_impl_.args_;
}

// -------------------------------------------------------------------

// Expression_IfThen_IfClause

// .substrait.Expression if = 1 [json_name = "if"];
inline bool Expression_IfThen_IfClause::has_if_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.if__ != nullptr);
  return value;
}
inline void Expression_IfThen_IfClause::clear_if_() {
  if (_impl_.if__ != nullptr) _impl_.if__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_IfThen_IfClause::_internal_if_() const {
  const ::substrait::Expression* p = _impl_.if__;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_IfThen_IfClause::if_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.IfThen.IfClause.if)
  return _internal_if_();
}
inline void Expression_IfThen_IfClause::unsafe_arena_set_allocated_if_(
    ::substrait::Expression* if_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.if__);
  }
  _impl_.if__ = if_;
  if (if_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.IfThen.IfClause.if)
}
inline ::substrait::Expression* Expression_IfThen_IfClause::release_if_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.if__;
  _impl_.if__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::unsafe_arena_release_if_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.IfThen.IfClause.if)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.if__;
  _impl_.if__ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::_internal_mutable_if_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.if__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.if__ = p;
  }
  return _impl_.if__;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::mutable_if_() {
  ::substrait::Expression* _msg = _internal_mutable_if_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.IfThen.IfClause.if)
  return _msg;
}
inline void Expression_IfThen_IfClause::set_allocated_if_(::substrait::Expression* if_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.if__;
  }
  if (if_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_);
    if (message_arena != submessage_arena) {
      if_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.if__ = if_;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.IfThen.IfClause.if)
}

// .substrait.Expression then = 2 [json_name = "then"];
inline bool Expression_IfThen_IfClause::has_then() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.then_ != nullptr);
  return value;
}
inline void Expression_IfThen_IfClause::clear_then() {
  if (_impl_.then_ != nullptr) _impl_.then_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& Expression_IfThen_IfClause::_internal_then() const {
  const ::substrait::Expression* p = _impl_.then_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_IfThen_IfClause::then() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.IfThen.IfClause.then)
  return _internal_then();
}
inline void Expression_IfThen_IfClause::unsafe_arena_set_allocated_then(
    ::substrait::Expression* then) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.then_);
  }
  _impl_.then_ = then;
  if (then) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.IfThen.IfClause.then)
}
inline ::substrait::Expression* Expression_IfThen_IfClause::release_then() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.then_;
  _impl_.then_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::unsafe_arena_release_then() {
  // @@protoc_insertion_point(field_release:substrait.Expression.IfThen.IfClause.then)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.then_;
  _impl_.then_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::_internal_mutable_then() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.then_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.then_ = p;
  }
  return _impl_.then_;
}
inline ::substrait::Expression* Expression_IfThen_IfClause::mutable_then() {
  ::substrait::Expression* _msg = _internal_mutable_then();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.IfThen.IfClause.then)
  return _msg;
}
inline void Expression_IfThen_IfClause::set_allocated_then(::substrait::Expression* then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.then_;
  }
  if (then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(then);
    if (message_arena != submessage_arena) {
      then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.then_ = then;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.IfThen.IfClause.then)
}

// -------------------------------------------------------------------

// Expression_IfThen

// repeated .substrait.Expression.IfThen.IfClause ifs = 1 [json_name = "ifs"];
inline int Expression_IfThen::_internal_ifs_size() const {
  return _impl_.ifs_.size();
}
inline int Expression_IfThen::ifs_size() const {
  return _internal_ifs_size();
}
inline void Expression_IfThen::clear_ifs() {
  _internal_mutable_ifs()->Clear();
}
inline ::substrait::Expression_IfThen_IfClause* Expression_IfThen::mutable_ifs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.IfThen.ifs)
  return _internal_mutable_ifs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_IfThen_IfClause >*
Expression_IfThen::mutable_ifs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.IfThen.ifs)
  return _internal_mutable_ifs();
}
inline const ::substrait::Expression_IfThen_IfClause& Expression_IfThen::_internal_ifs(int index) const {
  return _internal_ifs().Get(index);
}
inline const ::substrait::Expression_IfThen_IfClause& Expression_IfThen::ifs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.IfThen.ifs)
  return _internal_ifs(index);
}
inline ::substrait::Expression_IfThen_IfClause* Expression_IfThen::_internal_add_ifs() {
  return _internal_mutable_ifs()->Add();
}
inline ::substrait::Expression_IfThen_IfClause* Expression_IfThen::add_ifs() {
  ::substrait::Expression_IfThen_IfClause* _add = _internal_add_ifs();
  // @@protoc_insertion_point(field_add:substrait.Expression.IfThen.ifs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_IfThen_IfClause >&
Expression_IfThen::ifs() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.IfThen.ifs)
  return _internal_ifs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_IfThen_IfClause>&
Expression_IfThen::_internal_ifs() const {
  return _impl_.ifs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_IfThen_IfClause>*
Expression_IfThen::_internal_mutable_ifs() {
  return &_impl_.ifs_;
}

// .substrait.Expression else = 2 [json_name = "else"];
inline bool Expression_IfThen::has_else_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.else__ != nullptr);
  return value;
}
inline void Expression_IfThen::clear_else_() {
  if (_impl_.else__ != nullptr) _impl_.else__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_IfThen::_internal_else_() const {
  const ::substrait::Expression* p = _impl_.else__;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_IfThen::else_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.IfThen.else)
  return _internal_else_();
}
inline void Expression_IfThen::unsafe_arena_set_allocated_else_(
    ::substrait::Expression* else_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.else__);
  }
  _impl_.else__ = else_;
  if (else_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.IfThen.else)
}
inline ::substrait::Expression* Expression_IfThen::release_else_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.else__;
  _impl_.else__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_IfThen::unsafe_arena_release_else_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.IfThen.else)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.else__;
  _impl_.else__ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_IfThen::_internal_mutable_else_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.else__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.else__ = p;
  }
  return _impl_.else__;
}
inline ::substrait::Expression* Expression_IfThen::mutable_else_() {
  ::substrait::Expression* _msg = _internal_mutable_else_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.IfThen.else)
  return _msg;
}
inline void Expression_IfThen::set_allocated_else_(::substrait::Expression* else_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.else__;
  }
  if (else_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(else_);
    if (message_arena != submessage_arena) {
      else_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, else_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.else__ = else_;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.IfThen.else)
}

// -------------------------------------------------------------------

// Expression_Cast

// .substrait.Type type = 1 [json_name = "type"];
inline bool Expression_Cast::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline const ::substrait::Type& Expression_Cast::_internal_type() const {
  const ::substrait::Type* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Type&>(
      ::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& Expression_Cast::type() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Cast.type)
  return _internal_type();
}
inline void Expression_Cast::unsafe_arena_set_allocated_type(
    ::substrait::Type* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Cast.type)
}
inline ::substrait::Type* Expression_Cast::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Type* Expression_Cast::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Cast.type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::substrait::Type* Expression_Cast::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Type>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::substrait::Type* Expression_Cast::mutable_type() {
  ::substrait::Type* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Cast.type)
  return _msg;
}
inline void Expression_Cast::set_allocated_type(::substrait::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Cast.type)
}

// .substrait.Expression input = 2 [json_name = "input"];
inline bool Expression_Cast::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void Expression_Cast::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& Expression_Cast::_internal_input() const {
  const ::substrait::Expression* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_Cast::input() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Cast.input)
  return _internal_input();
}
inline void Expression_Cast::unsafe_arena_set_allocated_input(
    ::substrait::Expression* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Cast.input)
}
inline ::substrait::Expression* Expression_Cast::release_input() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_Cast::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Cast.input)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_Cast::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Expression* Expression_Cast::mutable_input() {
  ::substrait::Expression* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Cast.input)
  return _msg;
}
inline void Expression_Cast::set_allocated_input(::substrait::Expression* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Cast.input)
}

// .substrait.Expression.Cast.FailureBehavior failure_behavior = 3 [json_name = "failureBehavior"];
inline void Expression_Cast::clear_failure_behavior() {
  _impl_.failure_behavior_ = 0;
}
inline ::substrait::Expression_Cast_FailureBehavior Expression_Cast::failure_behavior() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Cast.failure_behavior)
  return _internal_failure_behavior();
}
inline void Expression_Cast::set_failure_behavior(::substrait::Expression_Cast_FailureBehavior value) {
   _internal_set_failure_behavior(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Cast.failure_behavior)
}
inline ::substrait::Expression_Cast_FailureBehavior Expression_Cast::_internal_failure_behavior() const {
  return static_cast<::substrait::Expression_Cast_FailureBehavior>(_impl_.failure_behavior_);
}
inline void Expression_Cast::_internal_set_failure_behavior(::substrait::Expression_Cast_FailureBehavior value) {
  ;
  _impl_.failure_behavior_ = value;
}

// -------------------------------------------------------------------

// Expression_SwitchExpression_IfValue

// .substrait.Expression.Literal if = 1 [json_name = "if"];
inline bool Expression_SwitchExpression_IfValue::has_if_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.if__ != nullptr);
  return value;
}
inline void Expression_SwitchExpression_IfValue::clear_if_() {
  if (_impl_.if__ != nullptr) _impl_.if__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_Literal& Expression_SwitchExpression_IfValue::_internal_if_() const {
  const ::substrait::Expression_Literal* p = _impl_.if__;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Expression_SwitchExpression_IfValue::if_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SwitchExpression.IfValue.if)
  return _internal_if_();
}
inline void Expression_SwitchExpression_IfValue::unsafe_arena_set_allocated_if_(
    ::substrait::Expression_Literal* if_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.if__);
  }
  _impl_.if__ = if_;
  if (if_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.SwitchExpression.IfValue.if)
}
inline ::substrait::Expression_Literal* Expression_SwitchExpression_IfValue::release_if_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.if__;
  _impl_.if__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Expression_SwitchExpression_IfValue::unsafe_arena_release_if_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.SwitchExpression.IfValue.if)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.if__;
  _impl_.if__ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Expression_SwitchExpression_IfValue::_internal_mutable_if_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.if__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.if__ = p;
  }
  return _impl_.if__;
}
inline ::substrait::Expression_Literal* Expression_SwitchExpression_IfValue::mutable_if_() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_if_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SwitchExpression.IfValue.if)
  return _msg;
}
inline void Expression_SwitchExpression_IfValue::set_allocated_if_(::substrait::Expression_Literal* if_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.if__;
  }
  if (if_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_);
    if (message_arena != submessage_arena) {
      if_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.if__ = if_;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.SwitchExpression.IfValue.if)
}

// .substrait.Expression then = 2 [json_name = "then"];
inline bool Expression_SwitchExpression_IfValue::has_then() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.then_ != nullptr);
  return value;
}
inline void Expression_SwitchExpression_IfValue::clear_then() {
  if (_impl_.then_ != nullptr) _impl_.then_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& Expression_SwitchExpression_IfValue::_internal_then() const {
  const ::substrait::Expression* p = _impl_.then_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_SwitchExpression_IfValue::then() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SwitchExpression.IfValue.then)
  return _internal_then();
}
inline void Expression_SwitchExpression_IfValue::unsafe_arena_set_allocated_then(
    ::substrait::Expression* then) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.then_);
  }
  _impl_.then_ = then;
  if (then) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.SwitchExpression.IfValue.then)
}
inline ::substrait::Expression* Expression_SwitchExpression_IfValue::release_then() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.then_;
  _impl_.then_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression_IfValue::unsafe_arena_release_then() {
  // @@protoc_insertion_point(field_release:substrait.Expression.SwitchExpression.IfValue.then)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.then_;
  _impl_.then_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression_IfValue::_internal_mutable_then() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.then_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.then_ = p;
  }
  return _impl_.then_;
}
inline ::substrait::Expression* Expression_SwitchExpression_IfValue::mutable_then() {
  ::substrait::Expression* _msg = _internal_mutable_then();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SwitchExpression.IfValue.then)
  return _msg;
}
inline void Expression_SwitchExpression_IfValue::set_allocated_then(::substrait::Expression* then) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.then_;
  }
  if (then) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(then);
    if (message_arena != submessage_arena) {
      then = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, then, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.then_ = then;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.SwitchExpression.IfValue.then)
}

// -------------------------------------------------------------------

// Expression_SwitchExpression

// .substrait.Expression match = 3 [json_name = "match"];
inline bool Expression_SwitchExpression::has_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_ != nullptr);
  return value;
}
inline void Expression_SwitchExpression::clear_match() {
  if (_impl_.match_ != nullptr) _impl_.match_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression& Expression_SwitchExpression::_internal_match() const {
  const ::substrait::Expression* p = _impl_.match_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_SwitchExpression::match() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SwitchExpression.match)
  return _internal_match();
}
inline void Expression_SwitchExpression::unsafe_arena_set_allocated_match(
    ::substrait::Expression* match) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_);
  }
  _impl_.match_ = match;
  if (match) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.SwitchExpression.match)
}
inline ::substrait::Expression* Expression_SwitchExpression::release_match() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.match_;
  _impl_.match_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression::unsafe_arena_release_match() {
  // @@protoc_insertion_point(field_release:substrait.Expression.SwitchExpression.match)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression* temp = _impl_.match_;
  _impl_.match_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression::_internal_mutable_match() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.match_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.match_ = p;
  }
  return _impl_.match_;
}
inline ::substrait::Expression* Expression_SwitchExpression::mutable_match() {
  ::substrait::Expression* _msg = _internal_mutable_match();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SwitchExpression.match)
  return _msg;
}
inline void Expression_SwitchExpression::set_allocated_match(::substrait::Expression* match) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_;
  }
  if (match) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match);
    if (message_arena != submessage_arena) {
      match = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.match_ = match;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.SwitchExpression.match)
}

// repeated .substrait.Expression.SwitchExpression.IfValue ifs = 1 [json_name = "ifs"];
inline int Expression_SwitchExpression::_internal_ifs_size() const {
  return _impl_.ifs_.size();
}
inline int Expression_SwitchExpression::ifs_size() const {
  return _internal_ifs_size();
}
inline void Expression_SwitchExpression::clear_ifs() {
  _internal_mutable_ifs()->Clear();
}
inline ::substrait::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::mutable_ifs(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SwitchExpression.ifs)
  return _internal_mutable_ifs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_SwitchExpression_IfValue >*
Expression_SwitchExpression::mutable_ifs() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.SwitchExpression.ifs)
  return _internal_mutable_ifs();
}
inline const ::substrait::Expression_SwitchExpression_IfValue& Expression_SwitchExpression::_internal_ifs(int index) const {
  return _internal_ifs().Get(index);
}
inline const ::substrait::Expression_SwitchExpression_IfValue& Expression_SwitchExpression::ifs(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SwitchExpression.ifs)
  return _internal_ifs(index);
}
inline ::substrait::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::_internal_add_ifs() {
  return _internal_mutable_ifs()->Add();
}
inline ::substrait::Expression_SwitchExpression_IfValue* Expression_SwitchExpression::add_ifs() {
  ::substrait::Expression_SwitchExpression_IfValue* _add = _internal_add_ifs();
  // @@protoc_insertion_point(field_add:substrait.Expression.SwitchExpression.ifs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_SwitchExpression_IfValue >&
Expression_SwitchExpression::ifs() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.SwitchExpression.ifs)
  return _internal_ifs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_SwitchExpression_IfValue>&
Expression_SwitchExpression::_internal_ifs() const {
  return _impl_.ifs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_SwitchExpression_IfValue>*
Expression_SwitchExpression::_internal_mutable_ifs() {
  return &_impl_.ifs_;
}

// .substrait.Expression else = 2 [json_name = "else"];
inline bool Expression_SwitchExpression::has_else_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.else__ != nullptr);
  return value;
}
inline void Expression_SwitchExpression::clear_else_() {
  if (_impl_.else__ != nullptr) _impl_.else__->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_SwitchExpression::_internal_else_() const {
  const ::substrait::Expression* p = _impl_.else__;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_SwitchExpression::else_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SwitchExpression.else)
  return _internal_else_();
}
inline void Expression_SwitchExpression::unsafe_arena_set_allocated_else_(
    ::substrait::Expression* else_) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.else__);
  }
  _impl_.else__ = else_;
  if (else_) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.SwitchExpression.else)
}
inline ::substrait::Expression* Expression_SwitchExpression::release_else_() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.else__;
  _impl_.else__ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression::unsafe_arena_release_else_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.SwitchExpression.else)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.else__;
  _impl_.else__ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_SwitchExpression::_internal_mutable_else_() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.else__ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.else__ = p;
  }
  return _impl_.else__;
}
inline ::substrait::Expression* Expression_SwitchExpression::mutable_else_() {
  ::substrait::Expression* _msg = _internal_mutable_else_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SwitchExpression.else)
  return _msg;
}
inline void Expression_SwitchExpression::set_allocated_else_(::substrait::Expression* else_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.else__;
  }
  if (else_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(else_);
    if (message_arena != submessage_arena) {
      else_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, else_, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.else__ = else_;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.SwitchExpression.else)
}

// -------------------------------------------------------------------

// Expression_SingularOrList

// .substrait.Expression value = 1 [json_name = "value"];
inline bool Expression_SingularOrList::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void Expression_SingularOrList::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_SingularOrList::_internal_value() const {
  const ::substrait::Expression* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_SingularOrList::value() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SingularOrList.value)
  return _internal_value();
}
inline void Expression_SingularOrList::unsafe_arena_set_allocated_value(
    ::substrait::Expression* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.SingularOrList.value)
}
inline ::substrait::Expression* Expression_SingularOrList::release_value() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_SingularOrList::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:substrait.Expression.SingularOrList.value)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_SingularOrList::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::substrait::Expression* Expression_SingularOrList::mutable_value() {
  ::substrait::Expression* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SingularOrList.value)
  return _msg;
}
inline void Expression_SingularOrList::set_allocated_value(::substrait::Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.SingularOrList.value)
}

// repeated .substrait.Expression options = 2 [json_name = "options"];
inline int Expression_SingularOrList::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int Expression_SingularOrList::options_size() const {
  return _internal_options_size();
}
inline void Expression_SingularOrList::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::substrait::Expression* Expression_SingularOrList::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.SingularOrList.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_SingularOrList::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.SingularOrList.options)
  return _internal_mutable_options();
}
inline const ::substrait::Expression& Expression_SingularOrList::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::substrait::Expression& Expression_SingularOrList::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.SingularOrList.options)
  return _internal_options(index);
}
inline ::substrait::Expression* Expression_SingularOrList::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::substrait::Expression* Expression_SingularOrList::add_options() {
  ::substrait::Expression* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:substrait.Expression.SingularOrList.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_SingularOrList::options() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.SingularOrList.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_SingularOrList::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_SingularOrList::_internal_mutable_options() {
  return &_impl_.options_;
}

// -------------------------------------------------------------------

// Expression_MultiOrList_Record

// repeated .substrait.Expression fields = 1 [json_name = "fields"];
inline int Expression_MultiOrList_Record::_internal_fields_size() const {
  return _impl_.fields_.size();
}
inline int Expression_MultiOrList_Record::fields_size() const {
  return _internal_fields_size();
}
inline void Expression_MultiOrList_Record::clear_fields() {
  _internal_mutable_fields()->Clear();
}
inline ::substrait::Expression* Expression_MultiOrList_Record::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MultiOrList.Record.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_MultiOrList_Record::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.MultiOrList.Record.fields)
  return _internal_mutable_fields();
}
inline const ::substrait::Expression& Expression_MultiOrList_Record::_internal_fields(int index) const {
  return _internal_fields().Get(index);
}
inline const ::substrait::Expression& Expression_MultiOrList_Record::fields(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MultiOrList.Record.fields)
  return _internal_fields(index);
}
inline ::substrait::Expression* Expression_MultiOrList_Record::_internal_add_fields() {
  return _internal_mutable_fields()->Add();
}
inline ::substrait::Expression* Expression_MultiOrList_Record::add_fields() {
  ::substrait::Expression* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:substrait.Expression.MultiOrList.Record.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_MultiOrList_Record::fields() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.MultiOrList.Record.fields)
  return _internal_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_MultiOrList_Record::_internal_fields() const {
  return _impl_.fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_MultiOrList_Record::_internal_mutable_fields() {
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// Expression_MultiOrList

// repeated .substrait.Expression value = 1 [json_name = "value"];
inline int Expression_MultiOrList::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int Expression_MultiOrList::value_size() const {
  return _internal_value_size();
}
inline void Expression_MultiOrList::clear_value() {
  _internal_mutable_value()->Clear();
}
inline ::substrait::Expression* Expression_MultiOrList::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MultiOrList.value)
  return _internal_mutable_value()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_MultiOrList::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.MultiOrList.value)
  return _internal_mutable_value();
}
inline const ::substrait::Expression& Expression_MultiOrList::_internal_value(int index) const {
  return _internal_value().Get(index);
}
inline const ::substrait::Expression& Expression_MultiOrList::value(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MultiOrList.value)
  return _internal_value(index);
}
inline ::substrait::Expression* Expression_MultiOrList::_internal_add_value() {
  return _internal_mutable_value()->Add();
}
inline ::substrait::Expression* Expression_MultiOrList::add_value() {
  ::substrait::Expression* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:substrait.Expression.MultiOrList.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_MultiOrList::value() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.MultiOrList.value)
  return _internal_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_MultiOrList::_internal_value() const {
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_MultiOrList::_internal_mutable_value() {
  return &_impl_.value_;
}

// repeated .substrait.Expression.MultiOrList.Record options = 2 [json_name = "options"];
inline int Expression_MultiOrList::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int Expression_MultiOrList::options_size() const {
  return _internal_options_size();
}
inline void Expression_MultiOrList::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::substrait::Expression_MultiOrList_Record* Expression_MultiOrList::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MultiOrList.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MultiOrList_Record >*
Expression_MultiOrList::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.MultiOrList.options)
  return _internal_mutable_options();
}
inline const ::substrait::Expression_MultiOrList_Record& Expression_MultiOrList::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::substrait::Expression_MultiOrList_Record& Expression_MultiOrList::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MultiOrList.options)
  return _internal_options(index);
}
inline ::substrait::Expression_MultiOrList_Record* Expression_MultiOrList::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::substrait::Expression_MultiOrList_Record* Expression_MultiOrList::add_options() {
  ::substrait::Expression_MultiOrList_Record* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:substrait.Expression.MultiOrList.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MultiOrList_Record >&
Expression_MultiOrList::options() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.MultiOrList.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MultiOrList_Record>&
Expression_MultiOrList::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MultiOrList_Record>*
Expression_MultiOrList::_internal_mutable_options() {
  return &_impl_.options_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction_PythonPickleFunction

// bytes function = 1 [json_name = "function"];
inline void Expression_EmbeddedFunction_PythonPickleFunction::clear_function() {
  _impl_.function_.ClearToEmpty();
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::function() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return _internal_function();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_EmbeddedFunction_PythonPickleFunction::set_function(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.function_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.PythonPickleFunction.function)
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return _s;
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::_internal_function() const {
  return _impl_.function_.Get();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::_internal_set_function(const std::string& value) {
  ;


  _impl_.function_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::_internal_mutable_function() {
  ;
  return _impl_.function_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::release_function() {
  // @@protoc_insertion_point(field_release:substrait.Expression.EmbeddedFunction.PythonPickleFunction.function)
  return _impl_.function_.Release();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_allocated_function(std::string* value) {
  _impl_.function_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.function_.IsDefault()) {
          _impl_.function_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.EmbeddedFunction.PythonPickleFunction.function)
}

// repeated string prerequisite = 2 [json_name = "prerequisite"];
inline int Expression_EmbeddedFunction_PythonPickleFunction::_internal_prerequisite_size() const {
  return _impl_.prerequisite_.size();
}
inline int Expression_EmbeddedFunction_PythonPickleFunction::prerequisite_size() const {
  return _internal_prerequisite_size();
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::clear_prerequisite() {
  _internal_mutable_prerequisite()->Clear();
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite() {
  std::string* _s = _internal_add_prerequisite();
  // @@protoc_insertion_point(field_add_mutable:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _s;
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::prerequisite(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_prerequisite(index);
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::mutable_prerequisite(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_mutable_prerequisite()->Mutable(index);
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const std::string& value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, std::string&& value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prerequisite()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::set_prerequisite(int index, absl::string_view value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const std::string& value) {
  _internal_mutable_prerequisite()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(std::string&& value) {
  _internal_mutable_prerequisite()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prerequisite()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(const char* value, std::size_t size) {
  _internal_mutable_prerequisite()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_PythonPickleFunction::add_prerequisite(absl::string_view value) {
  _internal_mutable_prerequisite()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_PythonPickleFunction::prerequisite() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_prerequisite();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Expression_EmbeddedFunction_PythonPickleFunction::mutable_prerequisite() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.EmbeddedFunction.PythonPickleFunction.prerequisite)
  return _internal_mutable_prerequisite();
}
inline const std::string& Expression_EmbeddedFunction_PythonPickleFunction::_internal_prerequisite(int index) const {
  return _internal_prerequisite().Get(index);
}
inline std::string* Expression_EmbeddedFunction_PythonPickleFunction::_internal_add_prerequisite() {
  return _internal_mutable_prerequisite()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_PythonPickleFunction::_internal_prerequisite() const {
  return _impl_.prerequisite_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Expression_EmbeddedFunction_PythonPickleFunction::_internal_mutable_prerequisite() {
  return &_impl_.prerequisite_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction_WebAssemblyFunction

// bytes script = 1 [json_name = "script"];
inline void Expression_EmbeddedFunction_WebAssemblyFunction::clear_script() {
  _impl_.script_.ClearToEmpty();
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::script() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return _internal_script();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_EmbeddedFunction_WebAssemblyFunction::set_script(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.script_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return _s;
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::_internal_script() const {
  return _impl_.script_.Get();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::_internal_set_script(const std::string& value) {
  ;


  _impl_.script_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::_internal_mutable_script() {
  ;
  return _impl_.script_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::release_script() {
  // @@protoc_insertion_point(field_release:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.script)
  return _impl_.script_.Release();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_allocated_script(std::string* value) {
  _impl_.script_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.script_.IsDefault()) {
          _impl_.script_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.script)
}

// repeated string prerequisite = 2 [json_name = "prerequisite"];
inline int Expression_EmbeddedFunction_WebAssemblyFunction::_internal_prerequisite_size() const {
  return _impl_.prerequisite_.size();
}
inline int Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite_size() const {
  return _internal_prerequisite_size();
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::clear_prerequisite() {
  _internal_mutable_prerequisite()->Clear();
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite() {
  std::string* _s = _internal_add_prerequisite();
  // @@protoc_insertion_point(field_add_mutable:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _s;
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_prerequisite(index);
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::mutable_prerequisite(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_mutable_prerequisite()->Mutable(index);
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const std::string& value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, std::string&& value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prerequisite()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::set_prerequisite(int index, absl::string_view value) {
  _internal_mutable_prerequisite()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const std::string& value) {
  _internal_mutable_prerequisite()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(std::string&& value) {
  _internal_mutable_prerequisite()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_prerequisite()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(const char* value, std::size_t size) {
  _internal_mutable_prerequisite()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline void Expression_EmbeddedFunction_WebAssemblyFunction::add_prerequisite(absl::string_view value) {
  _internal_mutable_prerequisite()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_WebAssemblyFunction::prerequisite() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_prerequisite();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Expression_EmbeddedFunction_WebAssemblyFunction::mutable_prerequisite() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.EmbeddedFunction.WebAssemblyFunction.prerequisite)
  return _internal_mutable_prerequisite();
}
inline const std::string& Expression_EmbeddedFunction_WebAssemblyFunction::_internal_prerequisite(int index) const {
  return _internal_prerequisite().Get(index);
}
inline std::string* Expression_EmbeddedFunction_WebAssemblyFunction::_internal_add_prerequisite() {
  return _internal_mutable_prerequisite()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Expression_EmbeddedFunction_WebAssemblyFunction::_internal_prerequisite() const {
  return _impl_.prerequisite_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Expression_EmbeddedFunction_WebAssemblyFunction::_internal_mutable_prerequisite() {
  return &_impl_.prerequisite_;
}

// -------------------------------------------------------------------

// Expression_EmbeddedFunction

// repeated .substrait.Expression arguments = 1 [json_name = "arguments"];
inline int Expression_EmbeddedFunction::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int Expression_EmbeddedFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void Expression_EmbeddedFunction::clear_arguments() {
  _internal_mutable_arguments()->Clear();
}
inline ::substrait::Expression* Expression_EmbeddedFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.arguments)
  return _internal_mutable_arguments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_EmbeddedFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.EmbeddedFunction.arguments)
  return _internal_mutable_arguments();
}
inline const ::substrait::Expression& Expression_EmbeddedFunction::_internal_arguments(int index) const {
  return _internal_arguments().Get(index);
}
inline const ::substrait::Expression& Expression_EmbeddedFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::Expression* Expression_EmbeddedFunction::_internal_add_arguments() {
  return _internal_mutable_arguments()->Add();
}
inline ::substrait::Expression* Expression_EmbeddedFunction::add_arguments() {
  ::substrait::Expression* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:substrait.Expression.EmbeddedFunction.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_EmbeddedFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.EmbeddedFunction.arguments)
  return _internal_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_EmbeddedFunction::_internal_arguments() const {
  return _impl_.arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_EmbeddedFunction::_internal_mutable_arguments() {
  return &_impl_.arguments_;
}

// .substrait.Type output_type = 2 [json_name = "outputType"];
inline bool Expression_EmbeddedFunction::has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_type_ != nullptr);
  return value;
}
inline const ::substrait::Type& Expression_EmbeddedFunction::_internal_output_type() const {
  const ::substrait::Type* p = _impl_.output_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Type&>(
      ::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& Expression_EmbeddedFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.output_type)
  return _internal_output_type();
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::Type* output_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  _impl_.output_type_ = output_type;
  if (output_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.EmbeddedFunction.output_type)
}
inline ::substrait::Type* Expression_EmbeddedFunction::release_output_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Type* Expression_EmbeddedFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.Expression.EmbeddedFunction.output_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
  return temp;
}
inline ::substrait::Type* Expression_EmbeddedFunction::_internal_mutable_output_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Type>(GetArenaForAllocation());
    _impl_.output_type_ = p;
  }
  return _impl_.output_type_;
}
inline ::substrait::Type* Expression_EmbeddedFunction::mutable_output_type() {
  ::substrait::Type* _msg = _internal_mutable_output_type();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.output_type)
  return _msg;
}
inline void Expression_EmbeddedFunction::set_allocated_output_type(::substrait::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type));
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.EmbeddedFunction.output_type)
}

// .substrait.Expression.EmbeddedFunction.PythonPickleFunction python_pickle_function = 3 [json_name = "pythonPickleFunction"];
inline bool Expression_EmbeddedFunction::has_python_pickle_function() const {
  return kind_case() == kPythonPickleFunction;
}
inline bool Expression_EmbeddedFunction::_internal_has_python_pickle_function() const {
  return kind_case() == kPythonPickleFunction;
}
inline void Expression_EmbeddedFunction::set_has_python_pickle_function() {
  _impl_._oneof_case_[0] = kPythonPickleFunction;
}
inline void Expression_EmbeddedFunction::clear_python_pickle_function() {
  if (kind_case() == kPythonPickleFunction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.python_pickle_function_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::release_python_pickle_function() {
  // @@protoc_insertion_point(field_release:substrait.Expression.EmbeddedFunction.python_pickle_function)
  if (kind_case() == kPythonPickleFunction) {
    clear_has_kind();
    ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* temp = _impl_.kind_.python_pickle_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.python_pickle_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction& Expression_EmbeddedFunction::_internal_python_pickle_function() const {
  return kind_case() == kPythonPickleFunction
      ? *_impl_.kind_.python_pickle_function_
      : reinterpret_cast<::substrait::Expression_EmbeddedFunction_PythonPickleFunction&>(::substrait::_Expression_EmbeddedFunction_PythonPickleFunction_default_instance_);
}
inline const ::substrait::Expression_EmbeddedFunction_PythonPickleFunction& Expression_EmbeddedFunction::python_pickle_function() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.python_pickle_function)
  return _internal_python_pickle_function();
}
inline ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::unsafe_arena_release_python_pickle_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.EmbeddedFunction.python_pickle_function)
  if (kind_case() == kPythonPickleFunction) {
    clear_has_kind();
    ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* temp = _impl_.kind_.python_pickle_function_;
    _impl_.kind_.python_pickle_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_python_pickle_function(::substrait::Expression_EmbeddedFunction_PythonPickleFunction* python_pickle_function) {
  clear_kind();
  if (python_pickle_function) {
    set_has_python_pickle_function();
    _impl_.kind_.python_pickle_function_ = python_pickle_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.EmbeddedFunction.python_pickle_function)
}
inline ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::_internal_mutable_python_pickle_function() {
  if (kind_case() != kPythonPickleFunction) {
    clear_kind();
    set_has_python_pickle_function();
    _impl_.kind_.python_pickle_function_ = CreateMaybeMessage< ::substrait::Expression_EmbeddedFunction_PythonPickleFunction >(GetArenaForAllocation());
  }
  return _impl_.kind_.python_pickle_function_;
}
inline ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* Expression_EmbeddedFunction::mutable_python_pickle_function() {
  ::substrait::Expression_EmbeddedFunction_PythonPickleFunction* _msg = _internal_mutable_python_pickle_function();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.python_pickle_function)
  return _msg;
}

// .substrait.Expression.EmbeddedFunction.WebAssemblyFunction web_assembly_function = 4 [json_name = "webAssemblyFunction"];
inline bool Expression_EmbeddedFunction::has_web_assembly_function() const {
  return kind_case() == kWebAssemblyFunction;
}
inline bool Expression_EmbeddedFunction::_internal_has_web_assembly_function() const {
  return kind_case() == kWebAssemblyFunction;
}
inline void Expression_EmbeddedFunction::set_has_web_assembly_function() {
  _impl_._oneof_case_[0] = kWebAssemblyFunction;
}
inline void Expression_EmbeddedFunction::clear_web_assembly_function() {
  if (kind_case() == kWebAssemblyFunction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.web_assembly_function_;
    }
    clear_has_kind();
  }
}
inline ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::release_web_assembly_function() {
  // @@protoc_insertion_point(field_release:substrait.Expression.EmbeddedFunction.web_assembly_function)
  if (kind_case() == kWebAssemblyFunction) {
    clear_has_kind();
    ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* temp = _impl_.kind_.web_assembly_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.web_assembly_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& Expression_EmbeddedFunction::_internal_web_assembly_function() const {
  return kind_case() == kWebAssemblyFunction
      ? *_impl_.kind_.web_assembly_function_
      : reinterpret_cast<::substrait::Expression_EmbeddedFunction_WebAssemblyFunction&>(::substrait::_Expression_EmbeddedFunction_WebAssemblyFunction_default_instance_);
}
inline const ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction& Expression_EmbeddedFunction::web_assembly_function() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.EmbeddedFunction.web_assembly_function)
  return _internal_web_assembly_function();
}
inline ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::unsafe_arena_release_web_assembly_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.EmbeddedFunction.web_assembly_function)
  if (kind_case() == kWebAssemblyFunction) {
    clear_has_kind();
    ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* temp = _impl_.kind_.web_assembly_function_;
    _impl_.kind_.web_assembly_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_EmbeddedFunction::unsafe_arena_set_allocated_web_assembly_function(::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* web_assembly_function) {
  clear_kind();
  if (web_assembly_function) {
    set_has_web_assembly_function();
    _impl_.kind_.web_assembly_function_ = web_assembly_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.EmbeddedFunction.web_assembly_function)
}
inline ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::_internal_mutable_web_assembly_function() {
  if (kind_case() != kWebAssemblyFunction) {
    clear_kind();
    set_has_web_assembly_function();
    _impl_.kind_.web_assembly_function_ = CreateMaybeMessage< ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction >(GetArenaForAllocation());
  }
  return _impl_.kind_.web_assembly_function_;
}
inline ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* Expression_EmbeddedFunction::mutable_web_assembly_function() {
  ::substrait::Expression_EmbeddedFunction_WebAssemblyFunction* _msg = _internal_mutable_web_assembly_function();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.EmbeddedFunction.web_assembly_function)
  return _msg;
}

inline bool Expression_EmbeddedFunction::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Expression_EmbeddedFunction::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Expression_EmbeddedFunction::KindCase Expression_EmbeddedFunction::kind_case() const {
  return Expression_EmbeddedFunction::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_ReferenceSegment_MapKey

// .substrait.Expression.Literal map_key = 1 [json_name = "mapKey"];
inline bool Expression_ReferenceSegment_MapKey::has_map_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.map_key_ != nullptr);
  return value;
}
inline void Expression_ReferenceSegment_MapKey::clear_map_key() {
  if (_impl_.map_key_ != nullptr) _impl_.map_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_Literal& Expression_ReferenceSegment_MapKey::_internal_map_key() const {
  const ::substrait::Expression_Literal* p = _impl_.map_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_Literal&>(
      ::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Expression_ReferenceSegment_MapKey::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.MapKey.map_key)
  return _internal_map_key();
}
inline void Expression_ReferenceSegment_MapKey::unsafe_arena_set_allocated_map_key(
    ::substrait::Expression_Literal* map_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.map_key_);
  }
  _impl_.map_key_ = map_key;
  if (map_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.MapKey.map_key)
}
inline ::substrait::Expression_Literal* Expression_ReferenceSegment_MapKey::release_map_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.map_key_;
  _impl_.map_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_Literal* Expression_ReferenceSegment_MapKey::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.MapKey.map_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_Literal* temp = _impl_.map_key_;
  _impl_.map_key_ = nullptr;
  return temp;
}
inline ::substrait::Expression_Literal* Expression_ReferenceSegment_MapKey::_internal_mutable_map_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.map_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_Literal>(GetArenaForAllocation());
    _impl_.map_key_ = p;
  }
  return _impl_.map_key_;
}
inline ::substrait::Expression_Literal* Expression_ReferenceSegment_MapKey::mutable_map_key() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.MapKey.map_key)
  return _msg;
}
inline void Expression_ReferenceSegment_MapKey::set_allocated_map_key(::substrait::Expression_Literal* map_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.map_key_;
  }
  if (map_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_key);
    if (message_arena != submessage_arena) {
      map_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.map_key_ = map_key;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.MapKey.map_key)
}

// .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
inline bool Expression_ReferenceSegment_MapKey::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_ReferenceSegment_MapKey::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_MapKey::_internal_child() const {
  const ::substrait::Expression_ReferenceSegment* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_ReferenceSegment&>(
      ::substrait::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_MapKey::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.MapKey.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_MapKey::unsafe_arena_set_allocated_child(
    ::substrait::Expression_ReferenceSegment* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.MapKey.child)
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::release_child() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.MapKey.child)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_ReferenceSegment>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_MapKey::mutable_child() {
  ::substrait::Expression_ReferenceSegment* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.MapKey.child)
  return _msg;
}
inline void Expression_ReferenceSegment_MapKey::set_allocated_child(::substrait::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.MapKey.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment_StructField

// int32 field = 1 [json_name = "field"];
inline void Expression_ReferenceSegment_StructField::clear_field() {
  _impl_.field_ = 0;
}
inline ::int32_t Expression_ReferenceSegment_StructField::field() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.StructField.field)
  return _internal_field();
}
inline void Expression_ReferenceSegment_StructField::set_field(::int32_t value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.ReferenceSegment.StructField.field)
}
inline ::int32_t Expression_ReferenceSegment_StructField::_internal_field() const {
  return _impl_.field_;
}
inline void Expression_ReferenceSegment_StructField::_internal_set_field(::int32_t value) {
  ;
  _impl_.field_ = value;
}

// .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
inline bool Expression_ReferenceSegment_StructField::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_ReferenceSegment_StructField::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_StructField::_internal_child() const {
  const ::substrait::Expression_ReferenceSegment* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_ReferenceSegment&>(
      ::substrait::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_StructField::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.StructField.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_StructField::unsafe_arena_set_allocated_child(
    ::substrait::Expression_ReferenceSegment* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.StructField.child)
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.StructField.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_ReferenceSegment>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_StructField::mutable_child() {
  ::substrait::Expression_ReferenceSegment* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.StructField.child)
  return _msg;
}
inline void Expression_ReferenceSegment_StructField::set_allocated_child(::substrait::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.StructField.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment_ListElement

// int32 offset = 1 [json_name = "offset"];
inline void Expression_ReferenceSegment_ListElement::clear_offset() {
  _impl_.offset_ = 0;
}
inline ::int32_t Expression_ReferenceSegment_ListElement::offset() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.ListElement.offset)
  return _internal_offset();
}
inline void Expression_ReferenceSegment_ListElement::set_offset(::int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.ReferenceSegment.ListElement.offset)
}
inline ::int32_t Expression_ReferenceSegment_ListElement::_internal_offset() const {
  return _impl_.offset_;
}
inline void Expression_ReferenceSegment_ListElement::_internal_set_offset(::int32_t value) {
  ;
  _impl_.offset_ = value;
}

// .substrait.Expression.ReferenceSegment child = 2 [json_name = "child"];
inline bool Expression_ReferenceSegment_ListElement::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_ReferenceSegment_ListElement::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_ListElement::_internal_child() const {
  const ::substrait::Expression_ReferenceSegment* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_ReferenceSegment&>(
      ::substrait::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment& Expression_ReferenceSegment_ListElement::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.ListElement.child)
  return _internal_child();
}
inline void Expression_ReferenceSegment_ListElement::unsafe_arena_set_allocated_child(
    ::substrait::Expression_ReferenceSegment* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.ListElement.child)
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.ListElement.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_ReferenceSegment* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_ReferenceSegment>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_ReferenceSegment* Expression_ReferenceSegment_ListElement::mutable_child() {
  ::substrait::Expression_ReferenceSegment* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.ListElement.child)
  return _msg;
}
inline void Expression_ReferenceSegment_ListElement::set_allocated_child(::substrait::Expression_ReferenceSegment* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.ReferenceSegment.ListElement.child)
}

// -------------------------------------------------------------------

// Expression_ReferenceSegment

// .substrait.Expression.ReferenceSegment.MapKey map_key = 1 [json_name = "mapKey"];
inline bool Expression_ReferenceSegment::has_map_key() const {
  return reference_type_case() == kMapKey;
}
inline bool Expression_ReferenceSegment::_internal_has_map_key() const {
  return reference_type_case() == kMapKey;
}
inline void Expression_ReferenceSegment::set_has_map_key() {
  _impl_._oneof_case_[0] = kMapKey;
}
inline void Expression_ReferenceSegment::clear_map_key() {
  if (reference_type_case() == kMapKey) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reference_type_.map_key_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.map_key)
  if (reference_type_case() == kMapKey) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_MapKey* temp = _impl_.reference_type_.map_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reference_type_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_ReferenceSegment_MapKey& Expression_ReferenceSegment::_internal_map_key() const {
  return reference_type_case() == kMapKey
      ? *_impl_.reference_type_.map_key_
      : reinterpret_cast<::substrait::Expression_ReferenceSegment_MapKey&>(::substrait::_Expression_ReferenceSegment_MapKey_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment_MapKey& Expression_ReferenceSegment::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.map_key)
  return _internal_map_key();
}
inline ::substrait::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.ReferenceSegment.map_key)
  if (reference_type_case() == kMapKey) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_MapKey* temp = _impl_.reference_type_.map_key_;
    _impl_.reference_type_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_map_key(::substrait::Expression_ReferenceSegment_MapKey* map_key) {
  clear_reference_type();
  if (map_key) {
    set_has_map_key();
    _impl_.reference_type_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.map_key)
}
inline ::substrait::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::_internal_mutable_map_key() {
  if (reference_type_case() != kMapKey) {
    clear_reference_type();
    set_has_map_key();
    _impl_.reference_type_.map_key_ = CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_MapKey >(GetArenaForAllocation());
  }
  return _impl_.reference_type_.map_key_;
}
inline ::substrait::Expression_ReferenceSegment_MapKey* Expression_ReferenceSegment::mutable_map_key() {
  ::substrait::Expression_ReferenceSegment_MapKey* _msg = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.map_key)
  return _msg;
}

// .substrait.Expression.ReferenceSegment.StructField struct_field = 2 [json_name = "structField"];
inline bool Expression_ReferenceSegment::has_struct_field() const {
  return reference_type_case() == kStructField;
}
inline bool Expression_ReferenceSegment::_internal_has_struct_field() const {
  return reference_type_case() == kStructField;
}
inline void Expression_ReferenceSegment::set_has_struct_field() {
  _impl_._oneof_case_[0] = kStructField;
}
inline void Expression_ReferenceSegment::clear_struct_field() {
  if (reference_type_case() == kStructField) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reference_type_.struct_field_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::release_struct_field() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.struct_field)
  if (reference_type_case() == kStructField) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_StructField* temp = _impl_.reference_type_.struct_field_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reference_type_.struct_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_ReferenceSegment_StructField& Expression_ReferenceSegment::_internal_struct_field() const {
  return reference_type_case() == kStructField
      ? *_impl_.reference_type_.struct_field_
      : reinterpret_cast<::substrait::Expression_ReferenceSegment_StructField&>(::substrait::_Expression_ReferenceSegment_StructField_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment_StructField& Expression_ReferenceSegment::struct_field() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.struct_field)
  return _internal_struct_field();
}
inline ::substrait::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::unsafe_arena_release_struct_field() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.ReferenceSegment.struct_field)
  if (reference_type_case() == kStructField) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_StructField* temp = _impl_.reference_type_.struct_field_;
    _impl_.reference_type_.struct_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_struct_field(::substrait::Expression_ReferenceSegment_StructField* struct_field) {
  clear_reference_type();
  if (struct_field) {
    set_has_struct_field();
    _impl_.reference_type_.struct_field_ = struct_field;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.struct_field)
}
inline ::substrait::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::_internal_mutable_struct_field() {
  if (reference_type_case() != kStructField) {
    clear_reference_type();
    set_has_struct_field();
    _impl_.reference_type_.struct_field_ = CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_StructField >(GetArenaForAllocation());
  }
  return _impl_.reference_type_.struct_field_;
}
inline ::substrait::Expression_ReferenceSegment_StructField* Expression_ReferenceSegment::mutable_struct_field() {
  ::substrait::Expression_ReferenceSegment_StructField* _msg = _internal_mutable_struct_field();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.struct_field)
  return _msg;
}

// .substrait.Expression.ReferenceSegment.ListElement list_element = 3 [json_name = "listElement"];
inline bool Expression_ReferenceSegment::has_list_element() const {
  return reference_type_case() == kListElement;
}
inline bool Expression_ReferenceSegment::_internal_has_list_element() const {
  return reference_type_case() == kListElement;
}
inline void Expression_ReferenceSegment::set_has_list_element() {
  _impl_._oneof_case_[0] = kListElement;
}
inline void Expression_ReferenceSegment::clear_list_element() {
  if (reference_type_case() == kListElement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reference_type_.list_element_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::release_list_element() {
  // @@protoc_insertion_point(field_release:substrait.Expression.ReferenceSegment.list_element)
  if (reference_type_case() == kListElement) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_ListElement* temp = _impl_.reference_type_.list_element_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reference_type_.list_element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_ReferenceSegment_ListElement& Expression_ReferenceSegment::_internal_list_element() const {
  return reference_type_case() == kListElement
      ? *_impl_.reference_type_.list_element_
      : reinterpret_cast<::substrait::Expression_ReferenceSegment_ListElement&>(::substrait::_Expression_ReferenceSegment_ListElement_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment_ListElement& Expression_ReferenceSegment::list_element() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.ReferenceSegment.list_element)
  return _internal_list_element();
}
inline ::substrait::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::unsafe_arena_release_list_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.ReferenceSegment.list_element)
  if (reference_type_case() == kListElement) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment_ListElement* temp = _impl_.reference_type_.list_element_;
    _impl_.reference_type_.list_element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_ReferenceSegment::unsafe_arena_set_allocated_list_element(::substrait::Expression_ReferenceSegment_ListElement* list_element) {
  clear_reference_type();
  if (list_element) {
    set_has_list_element();
    _impl_.reference_type_.list_element_ = list_element;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.ReferenceSegment.list_element)
}
inline ::substrait::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::_internal_mutable_list_element() {
  if (reference_type_case() != kListElement) {
    clear_reference_type();
    set_has_list_element();
    _impl_.reference_type_.list_element_ = CreateMaybeMessage< ::substrait::Expression_ReferenceSegment_ListElement >(GetArenaForAllocation());
  }
  return _impl_.reference_type_.list_element_;
}
inline ::substrait::Expression_ReferenceSegment_ListElement* Expression_ReferenceSegment::mutable_list_element() {
  ::substrait::Expression_ReferenceSegment_ListElement* _msg = _internal_mutable_list_element();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.ReferenceSegment.list_element)
  return _msg;
}

inline bool Expression_ReferenceSegment::has_reference_type() const {
  return reference_type_case() != REFERENCE_TYPE_NOT_SET;
}
inline void Expression_ReferenceSegment::clear_has_reference_type() {
  _impl_._oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}
inline Expression_ReferenceSegment::ReferenceTypeCase Expression_ReferenceSegment::reference_type_case() const {
  return Expression_ReferenceSegment::ReferenceTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_Select

// .substrait.Expression.MaskExpression.StructSelect struct = 1 [json_name = "struct"];
inline bool Expression_MaskExpression_Select::has_struct_() const {
  return type_case() == kStruct;
}
inline bool Expression_MaskExpression_Select::_internal_has_struct_() const {
  return type_case() == kStruct;
}
inline void Expression_MaskExpression_Select::set_has_struct_() {
  _impl_._oneof_case_[0] = kStruct;
}
inline void Expression_MaskExpression_Select::clear_struct_() {
  if (type_case() == kStruct) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.struct__;
    }
    clear_has_type();
  }
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::release_struct_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.Select.struct)
  if (type_case() == kStruct) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_StructSelect* temp = _impl_.type_.struct__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_StructSelect& Expression_MaskExpression_Select::_internal_struct_() const {
  return type_case() == kStruct
      ? *_impl_.type_.struct__
      : reinterpret_cast<::substrait::Expression_MaskExpression_StructSelect&>(::substrait::_Expression_MaskExpression_StructSelect_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_StructSelect& Expression_MaskExpression_Select::struct_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.Select.struct)
  return _internal_struct_();
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::unsafe_arena_release_struct_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.Select.struct)
  if (type_case() == kStruct) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_StructSelect* temp = _impl_.type_.struct__;
    _impl_.type_.struct__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_struct_(::substrait::Expression_MaskExpression_StructSelect* struct_) {
  clear_type();
  if (struct_) {
    set_has_struct_();
    _impl_.type_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.Select.struct)
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::_internal_mutable_struct_() {
  if (type_case() != kStruct) {
    clear_type();
    set_has_struct_();
    _impl_.type_.struct__ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_StructSelect >(GetArenaForAllocation());
  }
  return _impl_.type_.struct__;
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression_Select::mutable_struct_() {
  ::substrait::Expression_MaskExpression_StructSelect* _msg = _internal_mutable_struct_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.Select.struct)
  return _msg;
}

// .substrait.Expression.MaskExpression.ListSelect list = 2 [json_name = "list"];
inline bool Expression_MaskExpression_Select::has_list() const {
  return type_case() == kList;
}
inline bool Expression_MaskExpression_Select::_internal_has_list() const {
  return type_case() == kList;
}
inline void Expression_MaskExpression_Select::set_has_list() {
  _impl_._oneof_case_[0] = kList;
}
inline void Expression_MaskExpression_Select::clear_list() {
  if (type_case() == kList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.list_;
    }
    clear_has_type();
  }
}
inline ::substrait::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::release_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.Select.list)
  if (type_case() == kList) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect* temp = _impl_.type_.list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_ListSelect& Expression_MaskExpression_Select::_internal_list() const {
  return type_case() == kList
      ? *_impl_.type_.list_
      : reinterpret_cast<::substrait::Expression_MaskExpression_ListSelect&>(::substrait::_Expression_MaskExpression_ListSelect_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_ListSelect& Expression_MaskExpression_Select::list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.Select.list)
  return _internal_list();
}
inline ::substrait::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.Select.list)
  if (type_case() == kList) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect* temp = _impl_.type_.list_;
    _impl_.type_.list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_list(::substrait::Expression_MaskExpression_ListSelect* list) {
  clear_type();
  if (list) {
    set_has_list();
    _impl_.type_.list_ = list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.Select.list)
}
inline ::substrait::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::_internal_mutable_list() {
  if (type_case() != kList) {
    clear_type();
    set_has_list();
    _impl_.type_.list_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect >(GetArenaForAllocation());
  }
  return _impl_.type_.list_;
}
inline ::substrait::Expression_MaskExpression_ListSelect* Expression_MaskExpression_Select::mutable_list() {
  ::substrait::Expression_MaskExpression_ListSelect* _msg = _internal_mutable_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.Select.list)
  return _msg;
}

// .substrait.Expression.MaskExpression.MapSelect map = 3 [json_name = "map"];
inline bool Expression_MaskExpression_Select::has_map() const {
  return type_case() == kMap;
}
inline bool Expression_MaskExpression_Select::_internal_has_map() const {
  return type_case() == kMap;
}
inline void Expression_MaskExpression_Select::set_has_map() {
  _impl_._oneof_case_[0] = kMap;
}
inline void Expression_MaskExpression_Select::clear_map() {
  if (type_case() == kMap) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.map_;
    }
    clear_has_type();
  }
}
inline ::substrait::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::release_map() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.Select.map)
  if (type_case() == kMap) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_MapSelect* temp = _impl_.type_.map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_MapSelect& Expression_MaskExpression_Select::_internal_map() const {
  return type_case() == kMap
      ? *_impl_.type_.map_
      : reinterpret_cast<::substrait::Expression_MaskExpression_MapSelect&>(::substrait::_Expression_MaskExpression_MapSelect_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_MapSelect& Expression_MaskExpression_Select::map() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.Select.map)
  return _internal_map();
}
inline ::substrait::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.Select.map)
  if (type_case() == kMap) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_MapSelect* temp = _impl_.type_.map_;
    _impl_.type_.map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_Select::unsafe_arena_set_allocated_map(::substrait::Expression_MaskExpression_MapSelect* map) {
  clear_type();
  if (map) {
    set_has_map();
    _impl_.type_.map_ = map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.Select.map)
}
inline ::substrait::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::_internal_mutable_map() {
  if (type_case() != kMap) {
    clear_type();
    set_has_map();
    _impl_.type_.map_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect >(GetArenaForAllocation());
  }
  return _impl_.type_.map_;
}
inline ::substrait::Expression_MaskExpression_MapSelect* Expression_MaskExpression_Select::mutable_map() {
  ::substrait::Expression_MaskExpression_MapSelect* _msg = _internal_mutable_map();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.Select.map)
  return _msg;
}

inline bool Expression_MaskExpression_Select::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Expression_MaskExpression_Select::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline Expression_MaskExpression_Select::TypeCase Expression_MaskExpression_Select::type_case() const {
  return Expression_MaskExpression_Select::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_StructSelect

// repeated .substrait.Expression.MaskExpression.StructItem struct_items = 1 [json_name = "structItems"];
inline int Expression_MaskExpression_StructSelect::_internal_struct_items_size() const {
  return _impl_.struct_items_.size();
}
inline int Expression_MaskExpression_StructSelect::struct_items_size() const {
  return _internal_struct_items_size();
}
inline void Expression_MaskExpression_StructSelect::clear_struct_items() {
  _internal_mutable_struct_items()->Clear();
}
inline ::substrait::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::mutable_struct_items(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_mutable_struct_items()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_StructItem >*
Expression_MaskExpression_StructSelect::mutable_struct_items() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_mutable_struct_items();
}
inline const ::substrait::Expression_MaskExpression_StructItem& Expression_MaskExpression_StructSelect::_internal_struct_items(int index) const {
  return _internal_struct_items().Get(index);
}
inline const ::substrait::Expression_MaskExpression_StructItem& Expression_MaskExpression_StructSelect::struct_items(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_struct_items(index);
}
inline ::substrait::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::_internal_add_struct_items() {
  return _internal_mutable_struct_items()->Add();
}
inline ::substrait::Expression_MaskExpression_StructItem* Expression_MaskExpression_StructSelect::add_struct_items() {
  ::substrait::Expression_MaskExpression_StructItem* _add = _internal_add_struct_items();
  // @@protoc_insertion_point(field_add:substrait.Expression.MaskExpression.StructSelect.struct_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_StructItem >&
Expression_MaskExpression_StructSelect::struct_items() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.MaskExpression.StructSelect.struct_items)
  return _internal_struct_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_StructItem>&
Expression_MaskExpression_StructSelect::_internal_struct_items() const {
  return _impl_.struct_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_StructItem>*
Expression_MaskExpression_StructSelect::_internal_mutable_struct_items() {
  return &_impl_.struct_items_;
}

// -------------------------------------------------------------------

// Expression_MaskExpression_StructItem

// int32 field = 1 [json_name = "field"];
inline void Expression_MaskExpression_StructItem::clear_field() {
  _impl_.field_ = 0;
}
inline ::int32_t Expression_MaskExpression_StructItem::field() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.StructItem.field)
  return _internal_field();
}
inline void Expression_MaskExpression_StructItem::set_field(::int32_t value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.StructItem.field)
}
inline ::int32_t Expression_MaskExpression_StructItem::_internal_field() const {
  return _impl_.field_;
}
inline void Expression_MaskExpression_StructItem::_internal_set_field(::int32_t value) {
  ;
  _impl_.field_ = value;
}

// .substrait.Expression.MaskExpression.Select child = 2 [json_name = "child"];
inline bool Expression_MaskExpression_StructItem::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_MaskExpression_StructItem::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_StructItem::_internal_child() const {
  const ::substrait::Expression_MaskExpression_Select* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression_Select&>(
      ::substrait::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_StructItem::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.StructItem.child)
  return _internal_child();
}
inline void Expression_MaskExpression_StructItem::unsafe_arena_set_allocated_child(
    ::substrait::Expression_MaskExpression_Select* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.StructItem.child)
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.StructItem.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression_Select>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_StructItem::mutable_child() {
  ::substrait::Expression_MaskExpression_Select* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.StructItem.child)
  return _msg;
}
inline void Expression_MaskExpression_StructItem::set_allocated_child(::substrait::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.StructItem.child)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem_ListElement

// int32 field = 1 [json_name = "field"];
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::clear_field() {
  _impl_.field_ = 0;
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::field() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement.field)
  return _internal_field();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::set_field(::int32_t value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement.field)
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_internal_field() const {
  return _impl_.field_;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListElement::_internal_set_field(::int32_t value) {
  ;
  _impl_.field_ = value;
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice

// int32 start = 1 [json_name = "start"];
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::clear_start() {
  _impl_.start_ = 0;
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::start() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.start)
  return _internal_start();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::set_start(::int32_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.start)
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_start() const {
  return _impl_.start_;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_set_start(::int32_t value) {
  ;
  _impl_.start_ = value;
}

// int32 end = 2 [json_name = "end"];
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::clear_end() {
  _impl_.end_ = 0;
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::end() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.end)
  return _internal_end();
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::set_end(::int32_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice.end)
}
inline ::int32_t Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_end() const {
  return _impl_.end_;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice::_internal_set_end(::int32_t value) {
  ;
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect_ListSelectItem

// .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListElement item = 1 [json_name = "item"];
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_item() const {
  return type_case() == kItem;
}
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::_internal_has_item() const {
  return type_case() == kItem;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::set_has_item() {
  _impl_._oneof_case_[0] = kItem;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_item() {
  if (type_case() == kItem) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.item_;
    }
    clear_has_type();
  }
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::release_item() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  if (type_case() == kItem) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* temp = _impl_.type_.item_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& Expression_MaskExpression_ListSelect_ListSelectItem::_internal_item() const {
  return type_case() == kItem
      ? *_impl_.type_.item_
      : reinterpret_cast<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement&>(::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListElement_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement& Expression_MaskExpression_ListSelect_ListSelectItem::item() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  return _internal_item();
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  if (type_case() == kItem) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* temp = _impl_.type_.item_;
    _impl_.type_.item_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_set_allocated_item(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* item) {
  clear_type();
  if (item) {
    set_has_item();
    _impl_.type_.item_ = item;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::_internal_mutable_item() {
  if (type_case() != kItem) {
    clear_type();
    set_has_item();
    _impl_.type_.item_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement >(GetArenaForAllocation());
  }
  return _impl_.type_.item_;
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* Expression_MaskExpression_ListSelect_ListSelectItem::mutable_item() {
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListElement* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.item)
  return _msg;
}

// .substrait.Expression.MaskExpression.ListSelect.ListSelectItem.ListSlice slice = 2 [json_name = "slice"];
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_slice() const {
  return type_case() == kSlice;
}
inline bool Expression_MaskExpression_ListSelect_ListSelectItem::_internal_has_slice() const {
  return type_case() == kSlice;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::set_has_slice() {
  _impl_._oneof_case_[0] = kSlice;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_slice() {
  if (type_case() == kSlice) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_.slice_;
    }
    clear_has_type();
  }
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::release_slice() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  if (type_case() == kSlice) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* temp = _impl_.type_.slice_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& Expression_MaskExpression_ListSelect_ListSelectItem::_internal_slice() const {
  return type_case() == kSlice
      ? *_impl_.type_.slice_
      : reinterpret_cast<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice&>(::substrait::_Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice& Expression_MaskExpression_ListSelect_ListSelectItem::slice() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  return _internal_slice();
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_release_slice() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  if (type_case() == kSlice) {
    clear_has_type();
    ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* temp = _impl_.type_.slice_;
    _impl_.type_.slice_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::unsafe_arena_set_allocated_slice(::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* slice) {
  clear_type();
  if (slice) {
    set_has_slice();
    _impl_.type_.slice_ = slice;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::_internal_mutable_slice() {
  if (type_case() != kSlice) {
    clear_type();
    set_has_slice();
    _impl_.type_.slice_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice >(GetArenaForAllocation());
  }
  return _impl_.type_.slice_;
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* Expression_MaskExpression_ListSelect_ListSelectItem::mutable_slice() {
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem_ListSlice* _msg = _internal_mutable_slice();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.ListSelect.ListSelectItem.slice)
  return _msg;
}

inline bool Expression_MaskExpression_ListSelect_ListSelectItem::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Expression_MaskExpression_ListSelect_ListSelectItem::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline Expression_MaskExpression_ListSelect_ListSelectItem::TypeCase Expression_MaskExpression_ListSelect_ListSelectItem::type_case() const {
  return Expression_MaskExpression_ListSelect_ListSelectItem::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression_ListSelect

// repeated .substrait.Expression.MaskExpression.ListSelect.ListSelectItem selection = 1 [json_name = "selection"];
inline int Expression_MaskExpression_ListSelect::_internal_selection_size() const {
  return _impl_.selection_.size();
}
inline int Expression_MaskExpression_ListSelect::selection_size() const {
  return _internal_selection_size();
}
inline void Expression_MaskExpression_ListSelect::clear_selection() {
  _internal_mutable_selection()->Clear();
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::mutable_selection(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.ListSelect.selection)
  return _internal_mutable_selection()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >*
Expression_MaskExpression_ListSelect::mutable_selection() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.MaskExpression.ListSelect.selection)
  return _internal_mutable_selection();
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem& Expression_MaskExpression_ListSelect::_internal_selection(int index) const {
  return _internal_selection().Get(index);
}
inline const ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem& Expression_MaskExpression_ListSelect::selection(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.selection)
  return _internal_selection(index);
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::_internal_add_selection() {
  return _internal_mutable_selection()->Add();
}
inline ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* Expression_MaskExpression_ListSelect::add_selection() {
  ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem* _add = _internal_add_selection();
  // @@protoc_insertion_point(field_add:substrait.Expression.MaskExpression.ListSelect.selection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression_MaskExpression_ListSelect_ListSelectItem >&
Expression_MaskExpression_ListSelect::selection() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.MaskExpression.ListSelect.selection)
  return _internal_selection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem>&
Expression_MaskExpression_ListSelect::_internal_selection() const {
  return _impl_.selection_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression_MaskExpression_ListSelect_ListSelectItem>*
Expression_MaskExpression_ListSelect::_internal_mutable_selection() {
  return &_impl_.selection_;
}

// .substrait.Expression.MaskExpression.Select child = 2 [json_name = "child"];
inline bool Expression_MaskExpression_ListSelect::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_MaskExpression_ListSelect::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_ListSelect::_internal_child() const {
  const ::substrait::Expression_MaskExpression_Select* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression_Select&>(
      ::substrait::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_ListSelect::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.ListSelect.child)
  return _internal_child();
}
inline void Expression_MaskExpression_ListSelect::unsafe_arena_set_allocated_child(
    ::substrait::Expression_MaskExpression_Select* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.ListSelect.child)
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.ListSelect.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression_Select>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_ListSelect::mutable_child() {
  ::substrait::Expression_MaskExpression_Select* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.ListSelect.child)
  return _msg;
}
inline void Expression_MaskExpression_ListSelect::set_allocated_child(::substrait::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.ListSelect.child)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect_MapKey

// string map_key = 1 [json_name = "mapKey"];
inline void Expression_MaskExpression_MapSelect_MapKey::clear_map_key() {
  _impl_.map_key_.ClearToEmpty();
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKey::map_key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return _internal_map_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_MaskExpression_MapSelect_MapKey::set_map_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.map_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.MapSelect.MapKey.map_key)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::mutable_map_key() {
  std::string* _s = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return _s;
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKey::_internal_map_key() const {
  return _impl_.map_key_.Get();
}
inline void Expression_MaskExpression_MapSelect_MapKey::_internal_set_map_key(const std::string& value) {
  ;


  _impl_.map_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::_internal_mutable_map_key() {
  ;
  return _impl_.map_key_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKey::release_map_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.MapSelect.MapKey.map_key)
  return _impl_.map_key_.Release();
}
inline void Expression_MaskExpression_MapSelect_MapKey::set_allocated_map_key(std::string* value) {
  _impl_.map_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.map_key_.IsDefault()) {
          _impl_.map_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.MapSelect.MapKey.map_key)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect_MapKeyExpression

// string map_key_expression = 1 [json_name = "mapKeyExpression"];
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::clear_map_key_expression() {
  _impl_.map_key_expression_.ClearToEmpty();
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKeyExpression::map_key_expression() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return _internal_map_key_expression();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Expression_MaskExpression_MapSelect_MapKeyExpression::set_map_key_expression(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.map_key_expression_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::mutable_map_key_expression() {
  std::string* _s = _internal_mutable_map_key_expression();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return _s;
}
inline const std::string& Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_map_key_expression() const {
  return _impl_.map_key_expression_.Get();
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_set_map_key_expression(const std::string& value) {
  ;


  _impl_.map_key_expression_.Set(value, GetArenaForAllocation());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::_internal_mutable_map_key_expression() {
  ;
  return _impl_.map_key_expression_.Mutable( GetArenaForAllocation());
}
inline std::string* Expression_MaskExpression_MapSelect_MapKeyExpression::release_map_key_expression() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
  return _impl_.map_key_expression_.Release();
}
inline void Expression_MaskExpression_MapSelect_MapKeyExpression::set_allocated_map_key_expression(std::string* value) {
  _impl_.map_key_expression_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.map_key_expression_.IsDefault()) {
          _impl_.map_key_expression_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.MapSelect.MapKeyExpression.map_key_expression)
}

// -------------------------------------------------------------------

// Expression_MaskExpression_MapSelect

// .substrait.Expression.MaskExpression.MapSelect.MapKey key = 1 [json_name = "key"];
inline bool Expression_MaskExpression_MapSelect::has_key() const {
  return select_case() == kKey;
}
inline bool Expression_MaskExpression_MapSelect::_internal_has_key() const {
  return select_case() == kKey;
}
inline void Expression_MaskExpression_MapSelect::set_has_key() {
  _impl_._oneof_case_[0] = kKey;
}
inline void Expression_MaskExpression_MapSelect::clear_key() {
  if (select_case() == kKey) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.select_.key_;
    }
    clear_has_select();
  }
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::release_key() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.MapSelect.key)
  if (select_case() == kKey) {
    clear_has_select();
    ::substrait::Expression_MaskExpression_MapSelect_MapKey* temp = _impl_.select_.key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.select_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_MapSelect_MapKey& Expression_MaskExpression_MapSelect::_internal_key() const {
  return select_case() == kKey
      ? *_impl_.select_.key_
      : reinterpret_cast<::substrait::Expression_MaskExpression_MapSelect_MapKey&>(::substrait::_Expression_MaskExpression_MapSelect_MapKey_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_MapSelect_MapKey& Expression_MaskExpression_MapSelect::key() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.MapSelect.key)
  return _internal_key();
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.MapSelect.key)
  if (select_case() == kKey) {
    clear_has_select();
    ::substrait::Expression_MaskExpression_MapSelect_MapKey* temp = _impl_.select_.key_;
    _impl_.select_.key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_key(::substrait::Expression_MaskExpression_MapSelect_MapKey* key) {
  clear_select();
  if (key) {
    set_has_key();
    _impl_.select_.key_ = key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.MapSelect.key)
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::_internal_mutable_key() {
  if (select_case() != kKey) {
    clear_select();
    set_has_key();
    _impl_.select_.key_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect_MapKey >(GetArenaForAllocation());
  }
  return _impl_.select_.key_;
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKey* Expression_MaskExpression_MapSelect::mutable_key() {
  ::substrait::Expression_MaskExpression_MapSelect_MapKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.MapSelect.key)
  return _msg;
}

// .substrait.Expression.MaskExpression.MapSelect.MapKeyExpression expression = 2 [json_name = "expression"];
inline bool Expression_MaskExpression_MapSelect::has_expression() const {
  return select_case() == kExpression;
}
inline bool Expression_MaskExpression_MapSelect::_internal_has_expression() const {
  return select_case() == kExpression;
}
inline void Expression_MaskExpression_MapSelect::set_has_expression() {
  _impl_._oneof_case_[0] = kExpression;
}
inline void Expression_MaskExpression_MapSelect::clear_expression() {
  if (select_case() == kExpression) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.select_.expression_;
    }
    clear_has_select();
  }
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::release_expression() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.MapSelect.expression)
  if (select_case() == kExpression) {
    clear_has_select();
    ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* temp = _impl_.select_.expression_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.select_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& Expression_MaskExpression_MapSelect::_internal_expression() const {
  return select_case() == kExpression
      ? *_impl_.select_.expression_
      : reinterpret_cast<::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression&>(::substrait::_Expression_MaskExpression_MapSelect_MapKeyExpression_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression& Expression_MaskExpression_MapSelect::expression() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.MapSelect.expression)
  return _internal_expression();
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.MaskExpression.MapSelect.expression)
  if (select_case() == kExpression) {
    clear_has_select();
    ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* temp = _impl_.select_.expression_;
    _impl_.select_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_expression(::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* expression) {
  clear_select();
  if (expression) {
    set_has_expression();
    _impl_.select_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.MapSelect.expression)
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::_internal_mutable_expression() {
  if (select_case() != kExpression) {
    clear_select();
    set_has_expression();
    _impl_.select_.expression_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression >(GetArenaForAllocation());
  }
  return _impl_.select_.expression_;
}
inline ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* Expression_MaskExpression_MapSelect::mutable_expression() {
  ::substrait::Expression_MaskExpression_MapSelect_MapKeyExpression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.MapSelect.expression)
  return _msg;
}

// .substrait.Expression.MaskExpression.Select child = 3 [json_name = "child"];
inline bool Expression_MaskExpression_MapSelect::has_child() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.child_ != nullptr);
  return value;
}
inline void Expression_MaskExpression_MapSelect::clear_child() {
  if (_impl_.child_ != nullptr) _impl_.child_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_MapSelect::_internal_child() const {
  const ::substrait::Expression_MaskExpression_Select* p = _impl_.child_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression_Select&>(
      ::substrait::_Expression_MaskExpression_Select_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_Select& Expression_MaskExpression_MapSelect::child() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.MapSelect.child)
  return _internal_child();
}
inline void Expression_MaskExpression_MapSelect::unsafe_arena_set_allocated_child(
    ::substrait::Expression_MaskExpression_Select* child) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.child_);
  }
  _impl_.child_ = child;
  if (child) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.MapSelect.child)
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::release_child() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::unsafe_arena_release_child() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.MapSelect.child)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_Select* temp = _impl_.child_;
  _impl_.child_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::_internal_mutable_child() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.child_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression_Select>(GetArenaForAllocation());
    _impl_.child_ = p;
  }
  return _impl_.child_;
}
inline ::substrait::Expression_MaskExpression_Select* Expression_MaskExpression_MapSelect::mutable_child() {
  ::substrait::Expression_MaskExpression_Select* _msg = _internal_mutable_child();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.MapSelect.child)
  return _msg;
}
inline void Expression_MaskExpression_MapSelect::set_allocated_child(::substrait::Expression_MaskExpression_Select* child) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.child_;
  }
  if (child) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(child);
    if (message_arena != submessage_arena) {
      child = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, child, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.child_ = child;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.MapSelect.child)
}

inline bool Expression_MaskExpression_MapSelect::has_select() const {
  return select_case() != SELECT_NOT_SET;
}
inline void Expression_MaskExpression_MapSelect::clear_has_select() {
  _impl_._oneof_case_[0] = SELECT_NOT_SET;
}
inline Expression_MaskExpression_MapSelect::SelectCase Expression_MaskExpression_MapSelect::select_case() const {
  return Expression_MaskExpression_MapSelect::SelectCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression_MaskExpression

// .substrait.Expression.MaskExpression.StructSelect select = 1 [json_name = "select"];
inline bool Expression_MaskExpression::has_select() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.select_ != nullptr);
  return value;
}
inline void Expression_MaskExpression::clear_select() {
  if (_impl_.select_ != nullptr) _impl_.select_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression_MaskExpression_StructSelect& Expression_MaskExpression::_internal_select() const {
  const ::substrait::Expression_MaskExpression_StructSelect* p = _impl_.select_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression_MaskExpression_StructSelect&>(
      ::substrait::_Expression_MaskExpression_StructSelect_default_instance_);
}
inline const ::substrait::Expression_MaskExpression_StructSelect& Expression_MaskExpression::select() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.select)
  return _internal_select();
}
inline void Expression_MaskExpression::unsafe_arena_set_allocated_select(
    ::substrait::Expression_MaskExpression_StructSelect* select) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.select_);
  }
  _impl_.select_ = select;
  if (select) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.MaskExpression.select)
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression::release_select() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_StructSelect* temp = _impl_.select_;
  _impl_.select_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression::unsafe_arena_release_select() {
  // @@protoc_insertion_point(field_release:substrait.Expression.MaskExpression.select)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression_MaskExpression_StructSelect* temp = _impl_.select_;
  _impl_.select_ = nullptr;
  return temp;
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression::_internal_mutable_select() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.select_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression_MaskExpression_StructSelect>(GetArenaForAllocation());
    _impl_.select_ = p;
  }
  return _impl_.select_;
}
inline ::substrait::Expression_MaskExpression_StructSelect* Expression_MaskExpression::mutable_select() {
  ::substrait::Expression_MaskExpression_StructSelect* _msg = _internal_mutable_select();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.MaskExpression.select)
  return _msg;
}
inline void Expression_MaskExpression::set_allocated_select(::substrait::Expression_MaskExpression_StructSelect* select) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.select_;
  }
  if (select) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(select);
    if (message_arena != submessage_arena) {
      select = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, select, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.select_ = select;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.MaskExpression.select)
}

// bool maintain_singular_struct = 2 [json_name = "maintainSingularStruct"];
inline void Expression_MaskExpression::clear_maintain_singular_struct() {
  _impl_.maintain_singular_struct_ = false;
}
inline bool Expression_MaskExpression::maintain_singular_struct() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.MaskExpression.maintain_singular_struct)
  return _internal_maintain_singular_struct();
}
inline void Expression_MaskExpression::set_maintain_singular_struct(bool value) {
  _internal_set_maintain_singular_struct(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.MaskExpression.maintain_singular_struct)
}
inline bool Expression_MaskExpression::_internal_maintain_singular_struct() const {
  return _impl_.maintain_singular_struct_;
}
inline void Expression_MaskExpression::_internal_set_maintain_singular_struct(bool value) {
  ;
  _impl_.maintain_singular_struct_ = value;
}

// -------------------------------------------------------------------

// Expression_FieldReference_RootReference

// -------------------------------------------------------------------

// Expression_FieldReference_OuterReference

// uint32 steps_out = 1 [json_name = "stepsOut"];
inline void Expression_FieldReference_OuterReference::clear_steps_out() {
  _impl_.steps_out_ = 0u;
}
inline ::uint32_t Expression_FieldReference_OuterReference::steps_out() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.OuterReference.steps_out)
  return _internal_steps_out();
}
inline void Expression_FieldReference_OuterReference::set_steps_out(::uint32_t value) {
  _internal_set_steps_out(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.FieldReference.OuterReference.steps_out)
}
inline ::uint32_t Expression_FieldReference_OuterReference::_internal_steps_out() const {
  return _impl_.steps_out_;
}
inline void Expression_FieldReference_OuterReference::_internal_set_steps_out(::uint32_t value) {
  ;
  _impl_.steps_out_ = value;
}

// -------------------------------------------------------------------

// Expression_FieldReference

// .substrait.Expression.ReferenceSegment direct_reference = 1 [json_name = "directReference"];
inline bool Expression_FieldReference::has_direct_reference() const {
  return reference_type_case() == kDirectReference;
}
inline bool Expression_FieldReference::_internal_has_direct_reference() const {
  return reference_type_case() == kDirectReference;
}
inline void Expression_FieldReference::set_has_direct_reference() {
  _impl_._oneof_case_[0] = kDirectReference;
}
inline void Expression_FieldReference::clear_direct_reference() {
  if (reference_type_case() == kDirectReference) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reference_type_.direct_reference_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::Expression_ReferenceSegment* Expression_FieldReference::release_direct_reference() {
  // @@protoc_insertion_point(field_release:substrait.Expression.FieldReference.direct_reference)
  if (reference_type_case() == kDirectReference) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment* temp = _impl_.reference_type_.direct_reference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reference_type_.direct_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_ReferenceSegment& Expression_FieldReference::_internal_direct_reference() const {
  return reference_type_case() == kDirectReference
      ? *_impl_.reference_type_.direct_reference_
      : reinterpret_cast<::substrait::Expression_ReferenceSegment&>(::substrait::_Expression_ReferenceSegment_default_instance_);
}
inline const ::substrait::Expression_ReferenceSegment& Expression_FieldReference::direct_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.direct_reference)
  return _internal_direct_reference();
}
inline ::substrait::Expression_ReferenceSegment* Expression_FieldReference::unsafe_arena_release_direct_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.FieldReference.direct_reference)
  if (reference_type_case() == kDirectReference) {
    clear_has_reference_type();
    ::substrait::Expression_ReferenceSegment* temp = _impl_.reference_type_.direct_reference_;
    _impl_.reference_type_.direct_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_direct_reference(::substrait::Expression_ReferenceSegment* direct_reference) {
  clear_reference_type();
  if (direct_reference) {
    set_has_direct_reference();
    _impl_.reference_type_.direct_reference_ = direct_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.FieldReference.direct_reference)
}
inline ::substrait::Expression_ReferenceSegment* Expression_FieldReference::_internal_mutable_direct_reference() {
  if (reference_type_case() != kDirectReference) {
    clear_reference_type();
    set_has_direct_reference();
    _impl_.reference_type_.direct_reference_ = CreateMaybeMessage< ::substrait::Expression_ReferenceSegment >(GetArenaForAllocation());
  }
  return _impl_.reference_type_.direct_reference_;
}
inline ::substrait::Expression_ReferenceSegment* Expression_FieldReference::mutable_direct_reference() {
  ::substrait::Expression_ReferenceSegment* _msg = _internal_mutable_direct_reference();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.FieldReference.direct_reference)
  return _msg;
}

// .substrait.Expression.MaskExpression masked_reference = 2 [json_name = "maskedReference"];
inline bool Expression_FieldReference::has_masked_reference() const {
  return reference_type_case() == kMaskedReference;
}
inline bool Expression_FieldReference::_internal_has_masked_reference() const {
  return reference_type_case() == kMaskedReference;
}
inline void Expression_FieldReference::set_has_masked_reference() {
  _impl_._oneof_case_[0] = kMaskedReference;
}
inline void Expression_FieldReference::clear_masked_reference() {
  if (reference_type_case() == kMaskedReference) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.reference_type_.masked_reference_;
    }
    clear_has_reference_type();
  }
}
inline ::substrait::Expression_MaskExpression* Expression_FieldReference::release_masked_reference() {
  // @@protoc_insertion_point(field_release:substrait.Expression.FieldReference.masked_reference)
  if (reference_type_case() == kMaskedReference) {
    clear_has_reference_type();
    ::substrait::Expression_MaskExpression* temp = _impl_.reference_type_.masked_reference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.reference_type_.masked_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MaskExpression& Expression_FieldReference::_internal_masked_reference() const {
  return reference_type_case() == kMaskedReference
      ? *_impl_.reference_type_.masked_reference_
      : reinterpret_cast<::substrait::Expression_MaskExpression&>(::substrait::_Expression_MaskExpression_default_instance_);
}
inline const ::substrait::Expression_MaskExpression& Expression_FieldReference::masked_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.masked_reference)
  return _internal_masked_reference();
}
inline ::substrait::Expression_MaskExpression* Expression_FieldReference::unsafe_arena_release_masked_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.FieldReference.masked_reference)
  if (reference_type_case() == kMaskedReference) {
    clear_has_reference_type();
    ::substrait::Expression_MaskExpression* temp = _impl_.reference_type_.masked_reference_;
    _impl_.reference_type_.masked_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_masked_reference(::substrait::Expression_MaskExpression* masked_reference) {
  clear_reference_type();
  if (masked_reference) {
    set_has_masked_reference();
    _impl_.reference_type_.masked_reference_ = masked_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.FieldReference.masked_reference)
}
inline ::substrait::Expression_MaskExpression* Expression_FieldReference::_internal_mutable_masked_reference() {
  if (reference_type_case() != kMaskedReference) {
    clear_reference_type();
    set_has_masked_reference();
    _impl_.reference_type_.masked_reference_ = CreateMaybeMessage< ::substrait::Expression_MaskExpression >(GetArenaForAllocation());
  }
  return _impl_.reference_type_.masked_reference_;
}
inline ::substrait::Expression_MaskExpression* Expression_FieldReference::mutable_masked_reference() {
  ::substrait::Expression_MaskExpression* _msg = _internal_mutable_masked_reference();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.FieldReference.masked_reference)
  return _msg;
}

// .substrait.Expression expression = 3 [json_name = "expression"];
inline bool Expression_FieldReference::has_expression() const {
  return root_type_case() == kExpression;
}
inline bool Expression_FieldReference::_internal_has_expression() const {
  return root_type_case() == kExpression;
}
inline void Expression_FieldReference::set_has_expression() {
  _impl_._oneof_case_[1] = kExpression;
}
inline void Expression_FieldReference::clear_expression() {
  if (root_type_case() == kExpression) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.root_type_.expression_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::Expression* Expression_FieldReference::release_expression() {
  // @@protoc_insertion_point(field_release:substrait.Expression.FieldReference.expression)
  if (root_type_case() == kExpression) {
    clear_has_root_type();
    ::substrait::Expression* temp = _impl_.root_type_.expression_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.root_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression& Expression_FieldReference::_internal_expression() const {
  return root_type_case() == kExpression
      ? *_impl_.root_type_.expression_
      : reinterpret_cast<::substrait::Expression&>(::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_FieldReference::expression() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.expression)
  return _internal_expression();
}
inline ::substrait::Expression* Expression_FieldReference::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.FieldReference.expression)
  if (root_type_case() == kExpression) {
    clear_has_root_type();
    ::substrait::Expression* temp = _impl_.root_type_.expression_;
    _impl_.root_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_expression(::substrait::Expression* expression) {
  clear_root_type();
  if (expression) {
    set_has_expression();
    _impl_.root_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.FieldReference.expression)
}
inline ::substrait::Expression* Expression_FieldReference::_internal_mutable_expression() {
  if (root_type_case() != kExpression) {
    clear_root_type();
    set_has_expression();
    _impl_.root_type_.expression_ = CreateMaybeMessage< ::substrait::Expression >(GetArenaForAllocation());
  }
  return _impl_.root_type_.expression_;
}
inline ::substrait::Expression* Expression_FieldReference::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.FieldReference.expression)
  return _msg;
}

// .substrait.Expression.FieldReference.RootReference root_reference = 4 [json_name = "rootReference"];
inline bool Expression_FieldReference::has_root_reference() const {
  return root_type_case() == kRootReference;
}
inline bool Expression_FieldReference::_internal_has_root_reference() const {
  return root_type_case() == kRootReference;
}
inline void Expression_FieldReference::set_has_root_reference() {
  _impl_._oneof_case_[1] = kRootReference;
}
inline void Expression_FieldReference::clear_root_reference() {
  if (root_type_case() == kRootReference) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.root_type_.root_reference_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::Expression_FieldReference_RootReference* Expression_FieldReference::release_root_reference() {
  // @@protoc_insertion_point(field_release:substrait.Expression.FieldReference.root_reference)
  if (root_type_case() == kRootReference) {
    clear_has_root_type();
    ::substrait::Expression_FieldReference_RootReference* temp = _impl_.root_type_.root_reference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.root_type_.root_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_FieldReference_RootReference& Expression_FieldReference::_internal_root_reference() const {
  return root_type_case() == kRootReference
      ? *_impl_.root_type_.root_reference_
      : reinterpret_cast<::substrait::Expression_FieldReference_RootReference&>(::substrait::_Expression_FieldReference_RootReference_default_instance_);
}
inline const ::substrait::Expression_FieldReference_RootReference& Expression_FieldReference::root_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.root_reference)
  return _internal_root_reference();
}
inline ::substrait::Expression_FieldReference_RootReference* Expression_FieldReference::unsafe_arena_release_root_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.FieldReference.root_reference)
  if (root_type_case() == kRootReference) {
    clear_has_root_type();
    ::substrait::Expression_FieldReference_RootReference* temp = _impl_.root_type_.root_reference_;
    _impl_.root_type_.root_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_root_reference(::substrait::Expression_FieldReference_RootReference* root_reference) {
  clear_root_type();
  if (root_reference) {
    set_has_root_reference();
    _impl_.root_type_.root_reference_ = root_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.FieldReference.root_reference)
}
inline ::substrait::Expression_FieldReference_RootReference* Expression_FieldReference::_internal_mutable_root_reference() {
  if (root_type_case() != kRootReference) {
    clear_root_type();
    set_has_root_reference();
    _impl_.root_type_.root_reference_ = CreateMaybeMessage< ::substrait::Expression_FieldReference_RootReference >(GetArenaForAllocation());
  }
  return _impl_.root_type_.root_reference_;
}
inline ::substrait::Expression_FieldReference_RootReference* Expression_FieldReference::mutable_root_reference() {
  ::substrait::Expression_FieldReference_RootReference* _msg = _internal_mutable_root_reference();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.FieldReference.root_reference)
  return _msg;
}

// .substrait.Expression.FieldReference.OuterReference outer_reference = 5 [json_name = "outerReference"];
inline bool Expression_FieldReference::has_outer_reference() const {
  return root_type_case() == kOuterReference;
}
inline bool Expression_FieldReference::_internal_has_outer_reference() const {
  return root_type_case() == kOuterReference;
}
inline void Expression_FieldReference::set_has_outer_reference() {
  _impl_._oneof_case_[1] = kOuterReference;
}
inline void Expression_FieldReference::clear_outer_reference() {
  if (root_type_case() == kOuterReference) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.root_type_.outer_reference_;
    }
    clear_has_root_type();
  }
}
inline ::substrait::Expression_FieldReference_OuterReference* Expression_FieldReference::release_outer_reference() {
  // @@protoc_insertion_point(field_release:substrait.Expression.FieldReference.outer_reference)
  if (root_type_case() == kOuterReference) {
    clear_has_root_type();
    ::substrait::Expression_FieldReference_OuterReference* temp = _impl_.root_type_.outer_reference_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.root_type_.outer_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_FieldReference_OuterReference& Expression_FieldReference::_internal_outer_reference() const {
  return root_type_case() == kOuterReference
      ? *_impl_.root_type_.outer_reference_
      : reinterpret_cast<::substrait::Expression_FieldReference_OuterReference&>(::substrait::_Expression_FieldReference_OuterReference_default_instance_);
}
inline const ::substrait::Expression_FieldReference_OuterReference& Expression_FieldReference::outer_reference() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.FieldReference.outer_reference)
  return _internal_outer_reference();
}
inline ::substrait::Expression_FieldReference_OuterReference* Expression_FieldReference::unsafe_arena_release_outer_reference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.FieldReference.outer_reference)
  if (root_type_case() == kOuterReference) {
    clear_has_root_type();
    ::substrait::Expression_FieldReference_OuterReference* temp = _impl_.root_type_.outer_reference_;
    _impl_.root_type_.outer_reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_FieldReference::unsafe_arena_set_allocated_outer_reference(::substrait::Expression_FieldReference_OuterReference* outer_reference) {
  clear_root_type();
  if (outer_reference) {
    set_has_outer_reference();
    _impl_.root_type_.outer_reference_ = outer_reference;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.FieldReference.outer_reference)
}
inline ::substrait::Expression_FieldReference_OuterReference* Expression_FieldReference::_internal_mutable_outer_reference() {
  if (root_type_case() != kOuterReference) {
    clear_root_type();
    set_has_outer_reference();
    _impl_.root_type_.outer_reference_ = CreateMaybeMessage< ::substrait::Expression_FieldReference_OuterReference >(GetArenaForAllocation());
  }
  return _impl_.root_type_.outer_reference_;
}
inline ::substrait::Expression_FieldReference_OuterReference* Expression_FieldReference::mutable_outer_reference() {
  ::substrait::Expression_FieldReference_OuterReference* _msg = _internal_mutable_outer_reference();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.FieldReference.outer_reference)
  return _msg;
}

inline bool Expression_FieldReference::has_reference_type() const {
  return reference_type_case() != REFERENCE_TYPE_NOT_SET;
}
inline void Expression_FieldReference::clear_has_reference_type() {
  _impl_._oneof_case_[0] = REFERENCE_TYPE_NOT_SET;
}
inline bool Expression_FieldReference::has_root_type() const {
  return root_type_case() != ROOT_TYPE_NOT_SET;
}
inline void Expression_FieldReference::clear_has_root_type() {
  _impl_._oneof_case_[1] = ROOT_TYPE_NOT_SET;
}
inline Expression_FieldReference::ReferenceTypeCase Expression_FieldReference::reference_type_case() const {
  return Expression_FieldReference::ReferenceTypeCase(_impl_._oneof_case_[0]);
}
inline Expression_FieldReference::RootTypeCase Expression_FieldReference::root_type_case() const {
  return Expression_FieldReference::RootTypeCase(_impl_._oneof_case_[1]);
}
// -------------------------------------------------------------------

// Expression_Subquery_Scalar

// .substrait.Rel input = 1 [json_name = "input"];
inline bool Expression_Subquery_Scalar::has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline void Expression_Subquery_Scalar::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Rel& Expression_Subquery_Scalar::_internal_input() const {
  const ::substrait::Rel* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& Expression_Subquery_Scalar::input() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.Scalar.input)
  return _internal_input();
}
inline void Expression_Subquery_Scalar::unsafe_arena_set_allocated_input(
    ::substrait::Rel* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.Scalar.input)
}
inline ::substrait::Rel* Expression_Subquery_Scalar::release_input() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_Scalar::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.Scalar.input)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_Scalar::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::substrait::Rel* Expression_Subquery_Scalar::mutable_input() {
  ::substrait::Rel* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.Scalar.input)
  return _msg;
}
inline void Expression_Subquery_Scalar::set_allocated_input(::substrait::Rel* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.Scalar.input)
}

// -------------------------------------------------------------------

// Expression_Subquery_InPredicate

// repeated .substrait.Expression needles = 1 [json_name = "needles"];
inline int Expression_Subquery_InPredicate::_internal_needles_size() const {
  return _impl_.needles_.size();
}
inline int Expression_Subquery_InPredicate::needles_size() const {
  return _internal_needles_size();
}
inline void Expression_Subquery_InPredicate::clear_needles() {
  _internal_mutable_needles()->Clear();
}
inline ::substrait::Expression* Expression_Subquery_InPredicate::mutable_needles(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.InPredicate.needles)
  return _internal_mutable_needles()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
Expression_Subquery_InPredicate::mutable_needles() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Expression.Subquery.InPredicate.needles)
  return _internal_mutable_needles();
}
inline const ::substrait::Expression& Expression_Subquery_InPredicate::_internal_needles(int index) const {
  return _internal_needles().Get(index);
}
inline const ::substrait::Expression& Expression_Subquery_InPredicate::needles(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.InPredicate.needles)
  return _internal_needles(index);
}
inline ::substrait::Expression* Expression_Subquery_InPredicate::_internal_add_needles() {
  return _internal_mutable_needles()->Add();
}
inline ::substrait::Expression* Expression_Subquery_InPredicate::add_needles() {
  ::substrait::Expression* _add = _internal_add_needles();
  // @@protoc_insertion_point(field_add:substrait.Expression.Subquery.InPredicate.needles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
Expression_Subquery_InPredicate::needles() const {
  // @@protoc_insertion_point(field_list:substrait.Expression.Subquery.InPredicate.needles)
  return _internal_needles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
Expression_Subquery_InPredicate::_internal_needles() const {
  return _impl_.needles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
Expression_Subquery_InPredicate::_internal_mutable_needles() {
  return &_impl_.needles_;
}

// .substrait.Rel haystack = 2 [json_name = "haystack"];
inline bool Expression_Subquery_InPredicate::has_haystack() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.haystack_ != nullptr);
  return value;
}
inline void Expression_Subquery_InPredicate::clear_haystack() {
  if (_impl_.haystack_ != nullptr) _impl_.haystack_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Rel& Expression_Subquery_InPredicate::_internal_haystack() const {
  const ::substrait::Rel* p = _impl_.haystack_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& Expression_Subquery_InPredicate::haystack() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.InPredicate.haystack)
  return _internal_haystack();
}
inline void Expression_Subquery_InPredicate::unsafe_arena_set_allocated_haystack(
    ::substrait::Rel* haystack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.haystack_);
  }
  _impl_.haystack_ = haystack;
  if (haystack) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.InPredicate.haystack)
}
inline ::substrait::Rel* Expression_Subquery_InPredicate::release_haystack() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.haystack_;
  _impl_.haystack_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_InPredicate::unsafe_arena_release_haystack() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.InPredicate.haystack)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.haystack_;
  _impl_.haystack_ = nullptr;
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_InPredicate::_internal_mutable_haystack() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.haystack_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.haystack_ = p;
  }
  return _impl_.haystack_;
}
inline ::substrait::Rel* Expression_Subquery_InPredicate::mutable_haystack() {
  ::substrait::Rel* _msg = _internal_mutable_haystack();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.InPredicate.haystack)
  return _msg;
}
inline void Expression_Subquery_InPredicate::set_allocated_haystack(::substrait::Rel* haystack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.haystack_;
  }
  if (haystack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(haystack);
    if (message_arena != submessage_arena) {
      haystack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, haystack, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.haystack_ = haystack;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.InPredicate.haystack)
}

// -------------------------------------------------------------------

// Expression_Subquery_SetPredicate

// .substrait.Expression.Subquery.SetPredicate.PredicateOp predicate_op = 1 [json_name = "predicateOp"];
inline void Expression_Subquery_SetPredicate::clear_predicate_op() {
  _impl_.predicate_op_ = 0;
}
inline ::substrait::Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::predicate_op() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetPredicate.predicate_op)
  return _internal_predicate_op();
}
inline void Expression_Subquery_SetPredicate::set_predicate_op(::substrait::Expression_Subquery_SetPredicate_PredicateOp value) {
   _internal_set_predicate_op(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Subquery.SetPredicate.predicate_op)
}
inline ::substrait::Expression_Subquery_SetPredicate_PredicateOp Expression_Subquery_SetPredicate::_internal_predicate_op() const {
  return static_cast<::substrait::Expression_Subquery_SetPredicate_PredicateOp>(_impl_.predicate_op_);
}
inline void Expression_Subquery_SetPredicate::_internal_set_predicate_op(::substrait::Expression_Subquery_SetPredicate_PredicateOp value) {
  ;
  _impl_.predicate_op_ = value;
}

// .substrait.Rel tuples = 2 [json_name = "tuples"];
inline bool Expression_Subquery_SetPredicate::has_tuples() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tuples_ != nullptr);
  return value;
}
inline void Expression_Subquery_SetPredicate::clear_tuples() {
  if (_impl_.tuples_ != nullptr) _impl_.tuples_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Rel& Expression_Subquery_SetPredicate::_internal_tuples() const {
  const ::substrait::Rel* p = _impl_.tuples_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& Expression_Subquery_SetPredicate::tuples() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetPredicate.tuples)
  return _internal_tuples();
}
inline void Expression_Subquery_SetPredicate::unsafe_arena_set_allocated_tuples(
    ::substrait::Rel* tuples) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tuples_);
  }
  _impl_.tuples_ = tuples;
  if (tuples) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.SetPredicate.tuples)
}
inline ::substrait::Rel* Expression_Subquery_SetPredicate::release_tuples() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.tuples_;
  _impl_.tuples_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_SetPredicate::unsafe_arena_release_tuples() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.SetPredicate.tuples)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Rel* temp = _impl_.tuples_;
  _impl_.tuples_ = nullptr;
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_SetPredicate::_internal_mutable_tuples() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.tuples_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.tuples_ = p;
  }
  return _impl_.tuples_;
}
inline ::substrait::Rel* Expression_Subquery_SetPredicate::mutable_tuples() {
  ::substrait::Rel* _msg = _internal_mutable_tuples();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.SetPredicate.tuples)
  return _msg;
}
inline void Expression_Subquery_SetPredicate::set_allocated_tuples(::substrait::Rel* tuples) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tuples_;
  }
  if (tuples) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tuples);
    if (message_arena != submessage_arena) {
      tuples = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuples, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tuples_ = tuples;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.SetPredicate.tuples)
}

// -------------------------------------------------------------------

// Expression_Subquery_SetComparison

// .substrait.Expression.Subquery.SetComparison.ReductionOp reduction_op = 1 [json_name = "reductionOp"];
inline void Expression_Subquery_SetComparison::clear_reduction_op() {
  _impl_.reduction_op_ = 0;
}
inline ::substrait::Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::reduction_op() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetComparison.reduction_op)
  return _internal_reduction_op();
}
inline void Expression_Subquery_SetComparison::set_reduction_op(::substrait::Expression_Subquery_SetComparison_ReductionOp value) {
   _internal_set_reduction_op(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Subquery.SetComparison.reduction_op)
}
inline ::substrait::Expression_Subquery_SetComparison_ReductionOp Expression_Subquery_SetComparison::_internal_reduction_op() const {
  return static_cast<::substrait::Expression_Subquery_SetComparison_ReductionOp>(_impl_.reduction_op_);
}
inline void Expression_Subquery_SetComparison::_internal_set_reduction_op(::substrait::Expression_Subquery_SetComparison_ReductionOp value) {
  ;
  _impl_.reduction_op_ = value;
}

// .substrait.Expression.Subquery.SetComparison.ComparisonOp comparison_op = 2 [json_name = "comparisonOp"];
inline void Expression_Subquery_SetComparison::clear_comparison_op() {
  _impl_.comparison_op_ = 0;
}
inline ::substrait::Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::comparison_op() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetComparison.comparison_op)
  return _internal_comparison_op();
}
inline void Expression_Subquery_SetComparison::set_comparison_op(::substrait::Expression_Subquery_SetComparison_ComparisonOp value) {
   _internal_set_comparison_op(value);
  // @@protoc_insertion_point(field_set:substrait.Expression.Subquery.SetComparison.comparison_op)
}
inline ::substrait::Expression_Subquery_SetComparison_ComparisonOp Expression_Subquery_SetComparison::_internal_comparison_op() const {
  return static_cast<::substrait::Expression_Subquery_SetComparison_ComparisonOp>(_impl_.comparison_op_);
}
inline void Expression_Subquery_SetComparison::_internal_set_comparison_op(::substrait::Expression_Subquery_SetComparison_ComparisonOp value) {
  ;
  _impl_.comparison_op_ = value;
}

// .substrait.Expression left = 3 [json_name = "left"];
inline bool Expression_Subquery_SetComparison::has_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.left_ != nullptr);
  return value;
}
inline void Expression_Subquery_SetComparison::clear_left() {
  if (_impl_.left_ != nullptr) _impl_.left_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& Expression_Subquery_SetComparison::_internal_left() const {
  const ::substrait::Expression* p = _impl_.left_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& Expression_Subquery_SetComparison::left() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetComparison.left)
  return _internal_left();
}
inline void Expression_Subquery_SetComparison::unsafe_arena_set_allocated_left(
    ::substrait::Expression* left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.left_);
  }
  _impl_.left_ = left;
  if (left) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.SetComparison.left)
}
inline ::substrait::Expression* Expression_Subquery_SetComparison::release_left() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.left_;
  _impl_.left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* Expression_Subquery_SetComparison::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.SetComparison.left)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.left_;
  _impl_.left_ = nullptr;
  return temp;
}
inline ::substrait::Expression* Expression_Subquery_SetComparison::_internal_mutable_left() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.left_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.left_ = p;
  }
  return _impl_.left_;
}
inline ::substrait::Expression* Expression_Subquery_SetComparison::mutable_left() {
  ::substrait::Expression* _msg = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.SetComparison.left)
  return _msg;
}
inline void Expression_Subquery_SetComparison::set_allocated_left(::substrait::Expression* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.left_ = left;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.SetComparison.left)
}

// .substrait.Rel right = 4 [json_name = "right"];
inline bool Expression_Subquery_SetComparison::has_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.right_ != nullptr);
  return value;
}
inline void Expression_Subquery_SetComparison::clear_right() {
  if (_impl_.right_ != nullptr) _impl_.right_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Rel& Expression_Subquery_SetComparison::_internal_right() const {
  const ::substrait::Rel* p = _impl_.right_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Rel&>(
      ::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& Expression_Subquery_SetComparison::right() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.SetComparison.right)
  return _internal_right();
}
inline void Expression_Subquery_SetComparison::unsafe_arena_set_allocated_right(
    ::substrait::Rel* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.right_);
  }
  _impl_.right_ = right;
  if (right) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.SetComparison.right)
}
inline ::substrait::Rel* Expression_Subquery_SetComparison::release_right() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_SetComparison::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.SetComparison.right)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Rel* temp = _impl_.right_;
  _impl_.right_ = nullptr;
  return temp;
}
inline ::substrait::Rel* Expression_Subquery_SetComparison::_internal_mutable_right() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.right_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Rel>(GetArenaForAllocation());
    _impl_.right_ = p;
  }
  return _impl_.right_;
}
inline ::substrait::Rel* Expression_Subquery_SetComparison::mutable_right() {
  ::substrait::Rel* _msg = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.SetComparison.right)
  return _msg;
}
inline void Expression_Subquery_SetComparison::set_allocated_right(::substrait::Rel* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.right_ = right;
  // @@protoc_insertion_point(field_set_allocated:substrait.Expression.Subquery.SetComparison.right)
}

// -------------------------------------------------------------------

// Expression_Subquery

// .substrait.Expression.Subquery.Scalar scalar = 1 [json_name = "scalar"];
inline bool Expression_Subquery::has_scalar() const {
  return subquery_type_case() == kScalar;
}
inline bool Expression_Subquery::_internal_has_scalar() const {
  return subquery_type_case() == kScalar;
}
inline void Expression_Subquery::set_has_scalar() {
  _impl_._oneof_case_[0] = kScalar;
}
inline void Expression_Subquery::clear_scalar() {
  if (subquery_type_case() == kScalar) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.subquery_type_.scalar_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::Expression_Subquery_Scalar* Expression_Subquery::release_scalar() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.scalar)
  if (subquery_type_case() == kScalar) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_Scalar* temp = _impl_.subquery_type_.scalar_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subquery_type_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Subquery_Scalar& Expression_Subquery::_internal_scalar() const {
  return subquery_type_case() == kScalar
      ? *_impl_.subquery_type_.scalar_
      : reinterpret_cast<::substrait::Expression_Subquery_Scalar&>(::substrait::_Expression_Subquery_Scalar_default_instance_);
}
inline const ::substrait::Expression_Subquery_Scalar& Expression_Subquery::scalar() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.scalar)
  return _internal_scalar();
}
inline ::substrait::Expression_Subquery_Scalar* Expression_Subquery::unsafe_arena_release_scalar() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Subquery.scalar)
  if (subquery_type_case() == kScalar) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_Scalar* temp = _impl_.subquery_type_.scalar_;
    _impl_.subquery_type_.scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_scalar(::substrait::Expression_Subquery_Scalar* scalar) {
  clear_subquery_type();
  if (scalar) {
    set_has_scalar();
    _impl_.subquery_type_.scalar_ = scalar;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.scalar)
}
inline ::substrait::Expression_Subquery_Scalar* Expression_Subquery::_internal_mutable_scalar() {
  if (subquery_type_case() != kScalar) {
    clear_subquery_type();
    set_has_scalar();
    _impl_.subquery_type_.scalar_ = CreateMaybeMessage< ::substrait::Expression_Subquery_Scalar >(GetArenaForAllocation());
  }
  return _impl_.subquery_type_.scalar_;
}
inline ::substrait::Expression_Subquery_Scalar* Expression_Subquery::mutable_scalar() {
  ::substrait::Expression_Subquery_Scalar* _msg = _internal_mutable_scalar();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.scalar)
  return _msg;
}

// .substrait.Expression.Subquery.InPredicate in_predicate = 2 [json_name = "inPredicate"];
inline bool Expression_Subquery::has_in_predicate() const {
  return subquery_type_case() == kInPredicate;
}
inline bool Expression_Subquery::_internal_has_in_predicate() const {
  return subquery_type_case() == kInPredicate;
}
inline void Expression_Subquery::set_has_in_predicate() {
  _impl_._oneof_case_[0] = kInPredicate;
}
inline void Expression_Subquery::clear_in_predicate() {
  if (subquery_type_case() == kInPredicate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.subquery_type_.in_predicate_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::Expression_Subquery_InPredicate* Expression_Subquery::release_in_predicate() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.in_predicate)
  if (subquery_type_case() == kInPredicate) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_InPredicate* temp = _impl_.subquery_type_.in_predicate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subquery_type_.in_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Subquery_InPredicate& Expression_Subquery::_internal_in_predicate() const {
  return subquery_type_case() == kInPredicate
      ? *_impl_.subquery_type_.in_predicate_
      : reinterpret_cast<::substrait::Expression_Subquery_InPredicate&>(::substrait::_Expression_Subquery_InPredicate_default_instance_);
}
inline const ::substrait::Expression_Subquery_InPredicate& Expression_Subquery::in_predicate() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.in_predicate)
  return _internal_in_predicate();
}
inline ::substrait::Expression_Subquery_InPredicate* Expression_Subquery::unsafe_arena_release_in_predicate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Subquery.in_predicate)
  if (subquery_type_case() == kInPredicate) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_InPredicate* temp = _impl_.subquery_type_.in_predicate_;
    _impl_.subquery_type_.in_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_in_predicate(::substrait::Expression_Subquery_InPredicate* in_predicate) {
  clear_subquery_type();
  if (in_predicate) {
    set_has_in_predicate();
    _impl_.subquery_type_.in_predicate_ = in_predicate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.in_predicate)
}
inline ::substrait::Expression_Subquery_InPredicate* Expression_Subquery::_internal_mutable_in_predicate() {
  if (subquery_type_case() != kInPredicate) {
    clear_subquery_type();
    set_has_in_predicate();
    _impl_.subquery_type_.in_predicate_ = CreateMaybeMessage< ::substrait::Expression_Subquery_InPredicate >(GetArenaForAllocation());
  }
  return _impl_.subquery_type_.in_predicate_;
}
inline ::substrait::Expression_Subquery_InPredicate* Expression_Subquery::mutable_in_predicate() {
  ::substrait::Expression_Subquery_InPredicate* _msg = _internal_mutable_in_predicate();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.in_predicate)
  return _msg;
}

// .substrait.Expression.Subquery.SetPredicate set_predicate = 3 [json_name = "setPredicate"];
inline bool Expression_Subquery::has_set_predicate() const {
  return subquery_type_case() == kSetPredicate;
}
inline bool Expression_Subquery::_internal_has_set_predicate() const {
  return subquery_type_case() == kSetPredicate;
}
inline void Expression_Subquery::set_has_set_predicate() {
  _impl_._oneof_case_[0] = kSetPredicate;
}
inline void Expression_Subquery::clear_set_predicate() {
  if (subquery_type_case() == kSetPredicate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.subquery_type_.set_predicate_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::Expression_Subquery_SetPredicate* Expression_Subquery::release_set_predicate() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.set_predicate)
  if (subquery_type_case() == kSetPredicate) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_SetPredicate* temp = _impl_.subquery_type_.set_predicate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subquery_type_.set_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Subquery_SetPredicate& Expression_Subquery::_internal_set_predicate() const {
  return subquery_type_case() == kSetPredicate
      ? *_impl_.subquery_type_.set_predicate_
      : reinterpret_cast<::substrait::Expression_Subquery_SetPredicate&>(::substrait::_Expression_Subquery_SetPredicate_default_instance_);
}
inline const ::substrait::Expression_Subquery_SetPredicate& Expression_Subquery::set_predicate() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.set_predicate)
  return _internal_set_predicate();
}
inline ::substrait::Expression_Subquery_SetPredicate* Expression_Subquery::unsafe_arena_release_set_predicate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Subquery.set_predicate)
  if (subquery_type_case() == kSetPredicate) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_SetPredicate* temp = _impl_.subquery_type_.set_predicate_;
    _impl_.subquery_type_.set_predicate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_set_predicate(::substrait::Expression_Subquery_SetPredicate* set_predicate) {
  clear_subquery_type();
  if (set_predicate) {
    set_has_set_predicate();
    _impl_.subquery_type_.set_predicate_ = set_predicate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.set_predicate)
}
inline ::substrait::Expression_Subquery_SetPredicate* Expression_Subquery::_internal_mutable_set_predicate() {
  if (subquery_type_case() != kSetPredicate) {
    clear_subquery_type();
    set_has_set_predicate();
    _impl_.subquery_type_.set_predicate_ = CreateMaybeMessage< ::substrait::Expression_Subquery_SetPredicate >(GetArenaForAllocation());
  }
  return _impl_.subquery_type_.set_predicate_;
}
inline ::substrait::Expression_Subquery_SetPredicate* Expression_Subquery::mutable_set_predicate() {
  ::substrait::Expression_Subquery_SetPredicate* _msg = _internal_mutable_set_predicate();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.set_predicate)
  return _msg;
}

// .substrait.Expression.Subquery.SetComparison set_comparison = 4 [json_name = "setComparison"];
inline bool Expression_Subquery::has_set_comparison() const {
  return subquery_type_case() == kSetComparison;
}
inline bool Expression_Subquery::_internal_has_set_comparison() const {
  return subquery_type_case() == kSetComparison;
}
inline void Expression_Subquery::set_has_set_comparison() {
  _impl_._oneof_case_[0] = kSetComparison;
}
inline void Expression_Subquery::clear_set_comparison() {
  if (subquery_type_case() == kSetComparison) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.subquery_type_.set_comparison_;
    }
    clear_has_subquery_type();
  }
}
inline ::substrait::Expression_Subquery_SetComparison* Expression_Subquery::release_set_comparison() {
  // @@protoc_insertion_point(field_release:substrait.Expression.Subquery.set_comparison)
  if (subquery_type_case() == kSetComparison) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_SetComparison* temp = _impl_.subquery_type_.set_comparison_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.subquery_type_.set_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Subquery_SetComparison& Expression_Subquery::_internal_set_comparison() const {
  return subquery_type_case() == kSetComparison
      ? *_impl_.subquery_type_.set_comparison_
      : reinterpret_cast<::substrait::Expression_Subquery_SetComparison&>(::substrait::_Expression_Subquery_SetComparison_default_instance_);
}
inline const ::substrait::Expression_Subquery_SetComparison& Expression_Subquery::set_comparison() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.Subquery.set_comparison)
  return _internal_set_comparison();
}
inline ::substrait::Expression_Subquery_SetComparison* Expression_Subquery::unsafe_arena_release_set_comparison() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.Subquery.set_comparison)
  if (subquery_type_case() == kSetComparison) {
    clear_has_subquery_type();
    ::substrait::Expression_Subquery_SetComparison* temp = _impl_.subquery_type_.set_comparison_;
    _impl_.subquery_type_.set_comparison_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression_Subquery::unsafe_arena_set_allocated_set_comparison(::substrait::Expression_Subquery_SetComparison* set_comparison) {
  clear_subquery_type();
  if (set_comparison) {
    set_has_set_comparison();
    _impl_.subquery_type_.set_comparison_ = set_comparison;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.Subquery.set_comparison)
}
inline ::substrait::Expression_Subquery_SetComparison* Expression_Subquery::_internal_mutable_set_comparison() {
  if (subquery_type_case() != kSetComparison) {
    clear_subquery_type();
    set_has_set_comparison();
    _impl_.subquery_type_.set_comparison_ = CreateMaybeMessage< ::substrait::Expression_Subquery_SetComparison >(GetArenaForAllocation());
  }
  return _impl_.subquery_type_.set_comparison_;
}
inline ::substrait::Expression_Subquery_SetComparison* Expression_Subquery::mutable_set_comparison() {
  ::substrait::Expression_Subquery_SetComparison* _msg = _internal_mutable_set_comparison();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.Subquery.set_comparison)
  return _msg;
}

inline bool Expression_Subquery::has_subquery_type() const {
  return subquery_type_case() != SUBQUERY_TYPE_NOT_SET;
}
inline void Expression_Subquery::clear_has_subquery_type() {
  _impl_._oneof_case_[0] = SUBQUERY_TYPE_NOT_SET;
}
inline Expression_Subquery::SubqueryTypeCase Expression_Subquery::subquery_type_case() const {
  return Expression_Subquery::SubqueryTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expression

// .substrait.Expression.Literal literal = 1 [json_name = "literal"];
inline bool Expression::has_literal() const {
  return rex_type_case() == kLiteral;
}
inline bool Expression::_internal_has_literal() const {
  return rex_type_case() == kLiteral;
}
inline void Expression::set_has_literal() {
  _impl_._oneof_case_[0] = kLiteral;
}
inline void Expression::clear_literal() {
  if (rex_type_case() == kLiteral) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.literal_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_Literal* Expression::release_literal() {
  // @@protoc_insertion_point(field_release:substrait.Expression.literal)
  if (rex_type_case() == kLiteral) {
    clear_has_rex_type();
    ::substrait::Expression_Literal* temp = _impl_.rex_type_.literal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Literal& Expression::_internal_literal() const {
  return rex_type_case() == kLiteral
      ? *_impl_.rex_type_.literal_
      : reinterpret_cast<::substrait::Expression_Literal&>(::substrait::_Expression_Literal_default_instance_);
}
inline const ::substrait::Expression_Literal& Expression::literal() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.literal)
  return _internal_literal();
}
inline ::substrait::Expression_Literal* Expression::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.literal)
  if (rex_type_case() == kLiteral) {
    clear_has_rex_type();
    ::substrait::Expression_Literal* temp = _impl_.rex_type_.literal_;
    _impl_.rex_type_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_literal(::substrait::Expression_Literal* literal) {
  clear_rex_type();
  if (literal) {
    set_has_literal();
    _impl_.rex_type_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.literal)
}
inline ::substrait::Expression_Literal* Expression::_internal_mutable_literal() {
  if (rex_type_case() != kLiteral) {
    clear_rex_type();
    set_has_literal();
    _impl_.rex_type_.literal_ = CreateMaybeMessage< ::substrait::Expression_Literal >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.literal_;
}
inline ::substrait::Expression_Literal* Expression::mutable_literal() {
  ::substrait::Expression_Literal* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.literal)
  return _msg;
}

// .substrait.Expression.FieldReference selection = 2 [json_name = "selection"];
inline bool Expression::has_selection() const {
  return rex_type_case() == kSelection;
}
inline bool Expression::_internal_has_selection() const {
  return rex_type_case() == kSelection;
}
inline void Expression::set_has_selection() {
  _impl_._oneof_case_[0] = kSelection;
}
inline void Expression::clear_selection() {
  if (rex_type_case() == kSelection) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.selection_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_FieldReference* Expression::release_selection() {
  // @@protoc_insertion_point(field_release:substrait.Expression.selection)
  if (rex_type_case() == kSelection) {
    clear_has_rex_type();
    ::substrait::Expression_FieldReference* temp = _impl_.rex_type_.selection_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_FieldReference& Expression::_internal_selection() const {
  return rex_type_case() == kSelection
      ? *_impl_.rex_type_.selection_
      : reinterpret_cast<::substrait::Expression_FieldReference&>(::substrait::_Expression_FieldReference_default_instance_);
}
inline const ::substrait::Expression_FieldReference& Expression::selection() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.selection)
  return _internal_selection();
}
inline ::substrait::Expression_FieldReference* Expression::unsafe_arena_release_selection() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.selection)
  if (rex_type_case() == kSelection) {
    clear_has_rex_type();
    ::substrait::Expression_FieldReference* temp = _impl_.rex_type_.selection_;
    _impl_.rex_type_.selection_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_selection(::substrait::Expression_FieldReference* selection) {
  clear_rex_type();
  if (selection) {
    set_has_selection();
    _impl_.rex_type_.selection_ = selection;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.selection)
}
inline ::substrait::Expression_FieldReference* Expression::_internal_mutable_selection() {
  if (rex_type_case() != kSelection) {
    clear_rex_type();
    set_has_selection();
    _impl_.rex_type_.selection_ = CreateMaybeMessage< ::substrait::Expression_FieldReference >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.selection_;
}
inline ::substrait::Expression_FieldReference* Expression::mutable_selection() {
  ::substrait::Expression_FieldReference* _msg = _internal_mutable_selection();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.selection)
  return _msg;
}

// .substrait.Expression.ScalarFunction scalar_function = 3 [json_name = "scalarFunction"];
inline bool Expression::has_scalar_function() const {
  return rex_type_case() == kScalarFunction;
}
inline bool Expression::_internal_has_scalar_function() const {
  return rex_type_case() == kScalarFunction;
}
inline void Expression::set_has_scalar_function() {
  _impl_._oneof_case_[0] = kScalarFunction;
}
inline void Expression::clear_scalar_function() {
  if (rex_type_case() == kScalarFunction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.scalar_function_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_ScalarFunction* Expression::release_scalar_function() {
  // @@protoc_insertion_point(field_release:substrait.Expression.scalar_function)
  if (rex_type_case() == kScalarFunction) {
    clear_has_rex_type();
    ::substrait::Expression_ScalarFunction* temp = _impl_.rex_type_.scalar_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.scalar_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_ScalarFunction& Expression::_internal_scalar_function() const {
  return rex_type_case() == kScalarFunction
      ? *_impl_.rex_type_.scalar_function_
      : reinterpret_cast<::substrait::Expression_ScalarFunction&>(::substrait::_Expression_ScalarFunction_default_instance_);
}
inline const ::substrait::Expression_ScalarFunction& Expression::scalar_function() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.scalar_function)
  return _internal_scalar_function();
}
inline ::substrait::Expression_ScalarFunction* Expression::unsafe_arena_release_scalar_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.scalar_function)
  if (rex_type_case() == kScalarFunction) {
    clear_has_rex_type();
    ::substrait::Expression_ScalarFunction* temp = _impl_.rex_type_.scalar_function_;
    _impl_.rex_type_.scalar_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_scalar_function(::substrait::Expression_ScalarFunction* scalar_function) {
  clear_rex_type();
  if (scalar_function) {
    set_has_scalar_function();
    _impl_.rex_type_.scalar_function_ = scalar_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.scalar_function)
}
inline ::substrait::Expression_ScalarFunction* Expression::_internal_mutable_scalar_function() {
  if (rex_type_case() != kScalarFunction) {
    clear_rex_type();
    set_has_scalar_function();
    _impl_.rex_type_.scalar_function_ = CreateMaybeMessage< ::substrait::Expression_ScalarFunction >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.scalar_function_;
}
inline ::substrait::Expression_ScalarFunction* Expression::mutable_scalar_function() {
  ::substrait::Expression_ScalarFunction* _msg = _internal_mutable_scalar_function();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.scalar_function)
  return _msg;
}

// .substrait.Expression.WindowFunction window_function = 5 [json_name = "windowFunction"];
inline bool Expression::has_window_function() const {
  return rex_type_case() == kWindowFunction;
}
inline bool Expression::_internal_has_window_function() const {
  return rex_type_case() == kWindowFunction;
}
inline void Expression::set_has_window_function() {
  _impl_._oneof_case_[0] = kWindowFunction;
}
inline void Expression::clear_window_function() {
  if (rex_type_case() == kWindowFunction) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.window_function_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_WindowFunction* Expression::release_window_function() {
  // @@protoc_insertion_point(field_release:substrait.Expression.window_function)
  if (rex_type_case() == kWindowFunction) {
    clear_has_rex_type();
    ::substrait::Expression_WindowFunction* temp = _impl_.rex_type_.window_function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_WindowFunction& Expression::_internal_window_function() const {
  return rex_type_case() == kWindowFunction
      ? *_impl_.rex_type_.window_function_
      : reinterpret_cast<::substrait::Expression_WindowFunction&>(::substrait::_Expression_WindowFunction_default_instance_);
}
inline const ::substrait::Expression_WindowFunction& Expression::window_function() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.window_function)
  return _internal_window_function();
}
inline ::substrait::Expression_WindowFunction* Expression::unsafe_arena_release_window_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.window_function)
  if (rex_type_case() == kWindowFunction) {
    clear_has_rex_type();
    ::substrait::Expression_WindowFunction* temp = _impl_.rex_type_.window_function_;
    _impl_.rex_type_.window_function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_window_function(::substrait::Expression_WindowFunction* window_function) {
  clear_rex_type();
  if (window_function) {
    set_has_window_function();
    _impl_.rex_type_.window_function_ = window_function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.window_function)
}
inline ::substrait::Expression_WindowFunction* Expression::_internal_mutable_window_function() {
  if (rex_type_case() != kWindowFunction) {
    clear_rex_type();
    set_has_window_function();
    _impl_.rex_type_.window_function_ = CreateMaybeMessage< ::substrait::Expression_WindowFunction >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.window_function_;
}
inline ::substrait::Expression_WindowFunction* Expression::mutable_window_function() {
  ::substrait::Expression_WindowFunction* _msg = _internal_mutable_window_function();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.window_function)
  return _msg;
}

// .substrait.Expression.IfThen if_then = 6 [json_name = "ifThen"];
inline bool Expression::has_if_then() const {
  return rex_type_case() == kIfThen;
}
inline bool Expression::_internal_has_if_then() const {
  return rex_type_case() == kIfThen;
}
inline void Expression::set_has_if_then() {
  _impl_._oneof_case_[0] = kIfThen;
}
inline void Expression::clear_if_then() {
  if (rex_type_case() == kIfThen) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.if_then_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_IfThen* Expression::release_if_then() {
  // @@protoc_insertion_point(field_release:substrait.Expression.if_then)
  if (rex_type_case() == kIfThen) {
    clear_has_rex_type();
    ::substrait::Expression_IfThen* temp = _impl_.rex_type_.if_then_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.if_then_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_IfThen& Expression::_internal_if_then() const {
  return rex_type_case() == kIfThen
      ? *_impl_.rex_type_.if_then_
      : reinterpret_cast<::substrait::Expression_IfThen&>(::substrait::_Expression_IfThen_default_instance_);
}
inline const ::substrait::Expression_IfThen& Expression::if_then() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.if_then)
  return _internal_if_then();
}
inline ::substrait::Expression_IfThen* Expression::unsafe_arena_release_if_then() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.if_then)
  if (rex_type_case() == kIfThen) {
    clear_has_rex_type();
    ::substrait::Expression_IfThen* temp = _impl_.rex_type_.if_then_;
    _impl_.rex_type_.if_then_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_if_then(::substrait::Expression_IfThen* if_then) {
  clear_rex_type();
  if (if_then) {
    set_has_if_then();
    _impl_.rex_type_.if_then_ = if_then;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.if_then)
}
inline ::substrait::Expression_IfThen* Expression::_internal_mutable_if_then() {
  if (rex_type_case() != kIfThen) {
    clear_rex_type();
    set_has_if_then();
    _impl_.rex_type_.if_then_ = CreateMaybeMessage< ::substrait::Expression_IfThen >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.if_then_;
}
inline ::substrait::Expression_IfThen* Expression::mutable_if_then() {
  ::substrait::Expression_IfThen* _msg = _internal_mutable_if_then();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.if_then)
  return _msg;
}

// .substrait.Expression.SwitchExpression switch_expression = 7 [json_name = "switchExpression"];
inline bool Expression::has_switch_expression() const {
  return rex_type_case() == kSwitchExpression;
}
inline bool Expression::_internal_has_switch_expression() const {
  return rex_type_case() == kSwitchExpression;
}
inline void Expression::set_has_switch_expression() {
  _impl_._oneof_case_[0] = kSwitchExpression;
}
inline void Expression::clear_switch_expression() {
  if (rex_type_case() == kSwitchExpression) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.switch_expression_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_SwitchExpression* Expression::release_switch_expression() {
  // @@protoc_insertion_point(field_release:substrait.Expression.switch_expression)
  if (rex_type_case() == kSwitchExpression) {
    clear_has_rex_type();
    ::substrait::Expression_SwitchExpression* temp = _impl_.rex_type_.switch_expression_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.switch_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_SwitchExpression& Expression::_internal_switch_expression() const {
  return rex_type_case() == kSwitchExpression
      ? *_impl_.rex_type_.switch_expression_
      : reinterpret_cast<::substrait::Expression_SwitchExpression&>(::substrait::_Expression_SwitchExpression_default_instance_);
}
inline const ::substrait::Expression_SwitchExpression& Expression::switch_expression() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.switch_expression)
  return _internal_switch_expression();
}
inline ::substrait::Expression_SwitchExpression* Expression::unsafe_arena_release_switch_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.switch_expression)
  if (rex_type_case() == kSwitchExpression) {
    clear_has_rex_type();
    ::substrait::Expression_SwitchExpression* temp = _impl_.rex_type_.switch_expression_;
    _impl_.rex_type_.switch_expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_switch_expression(::substrait::Expression_SwitchExpression* switch_expression) {
  clear_rex_type();
  if (switch_expression) {
    set_has_switch_expression();
    _impl_.rex_type_.switch_expression_ = switch_expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.switch_expression)
}
inline ::substrait::Expression_SwitchExpression* Expression::_internal_mutable_switch_expression() {
  if (rex_type_case() != kSwitchExpression) {
    clear_rex_type();
    set_has_switch_expression();
    _impl_.rex_type_.switch_expression_ = CreateMaybeMessage< ::substrait::Expression_SwitchExpression >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.switch_expression_;
}
inline ::substrait::Expression_SwitchExpression* Expression::mutable_switch_expression() {
  ::substrait::Expression_SwitchExpression* _msg = _internal_mutable_switch_expression();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.switch_expression)
  return _msg;
}

// .substrait.Expression.SingularOrList singular_or_list = 8 [json_name = "singularOrList"];
inline bool Expression::has_singular_or_list() const {
  return rex_type_case() == kSingularOrList;
}
inline bool Expression::_internal_has_singular_or_list() const {
  return rex_type_case() == kSingularOrList;
}
inline void Expression::set_has_singular_or_list() {
  _impl_._oneof_case_[0] = kSingularOrList;
}
inline void Expression::clear_singular_or_list() {
  if (rex_type_case() == kSingularOrList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.singular_or_list_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_SingularOrList* Expression::release_singular_or_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.singular_or_list)
  if (rex_type_case() == kSingularOrList) {
    clear_has_rex_type();
    ::substrait::Expression_SingularOrList* temp = _impl_.rex_type_.singular_or_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.singular_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_SingularOrList& Expression::_internal_singular_or_list() const {
  return rex_type_case() == kSingularOrList
      ? *_impl_.rex_type_.singular_or_list_
      : reinterpret_cast<::substrait::Expression_SingularOrList&>(::substrait::_Expression_SingularOrList_default_instance_);
}
inline const ::substrait::Expression_SingularOrList& Expression::singular_or_list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.singular_or_list)
  return _internal_singular_or_list();
}
inline ::substrait::Expression_SingularOrList* Expression::unsafe_arena_release_singular_or_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.singular_or_list)
  if (rex_type_case() == kSingularOrList) {
    clear_has_rex_type();
    ::substrait::Expression_SingularOrList* temp = _impl_.rex_type_.singular_or_list_;
    _impl_.rex_type_.singular_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_singular_or_list(::substrait::Expression_SingularOrList* singular_or_list) {
  clear_rex_type();
  if (singular_or_list) {
    set_has_singular_or_list();
    _impl_.rex_type_.singular_or_list_ = singular_or_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.singular_or_list)
}
inline ::substrait::Expression_SingularOrList* Expression::_internal_mutable_singular_or_list() {
  if (rex_type_case() != kSingularOrList) {
    clear_rex_type();
    set_has_singular_or_list();
    _impl_.rex_type_.singular_or_list_ = CreateMaybeMessage< ::substrait::Expression_SingularOrList >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.singular_or_list_;
}
inline ::substrait::Expression_SingularOrList* Expression::mutable_singular_or_list() {
  ::substrait::Expression_SingularOrList* _msg = _internal_mutable_singular_or_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.singular_or_list)
  return _msg;
}

// .substrait.Expression.MultiOrList multi_or_list = 9 [json_name = "multiOrList"];
inline bool Expression::has_multi_or_list() const {
  return rex_type_case() == kMultiOrList;
}
inline bool Expression::_internal_has_multi_or_list() const {
  return rex_type_case() == kMultiOrList;
}
inline void Expression::set_has_multi_or_list() {
  _impl_._oneof_case_[0] = kMultiOrList;
}
inline void Expression::clear_multi_or_list() {
  if (rex_type_case() == kMultiOrList) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.multi_or_list_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_MultiOrList* Expression::release_multi_or_list() {
  // @@protoc_insertion_point(field_release:substrait.Expression.multi_or_list)
  if (rex_type_case() == kMultiOrList) {
    clear_has_rex_type();
    ::substrait::Expression_MultiOrList* temp = _impl_.rex_type_.multi_or_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.multi_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_MultiOrList& Expression::_internal_multi_or_list() const {
  return rex_type_case() == kMultiOrList
      ? *_impl_.rex_type_.multi_or_list_
      : reinterpret_cast<::substrait::Expression_MultiOrList&>(::substrait::_Expression_MultiOrList_default_instance_);
}
inline const ::substrait::Expression_MultiOrList& Expression::multi_or_list() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.multi_or_list)
  return _internal_multi_or_list();
}
inline ::substrait::Expression_MultiOrList* Expression::unsafe_arena_release_multi_or_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.multi_or_list)
  if (rex_type_case() == kMultiOrList) {
    clear_has_rex_type();
    ::substrait::Expression_MultiOrList* temp = _impl_.rex_type_.multi_or_list_;
    _impl_.rex_type_.multi_or_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_multi_or_list(::substrait::Expression_MultiOrList* multi_or_list) {
  clear_rex_type();
  if (multi_or_list) {
    set_has_multi_or_list();
    _impl_.rex_type_.multi_or_list_ = multi_or_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.multi_or_list)
}
inline ::substrait::Expression_MultiOrList* Expression::_internal_mutable_multi_or_list() {
  if (rex_type_case() != kMultiOrList) {
    clear_rex_type();
    set_has_multi_or_list();
    _impl_.rex_type_.multi_or_list_ = CreateMaybeMessage< ::substrait::Expression_MultiOrList >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.multi_or_list_;
}
inline ::substrait::Expression_MultiOrList* Expression::mutable_multi_or_list() {
  ::substrait::Expression_MultiOrList* _msg = _internal_mutable_multi_or_list();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.multi_or_list)
  return _msg;
}

// .substrait.Expression.Cast cast = 11 [json_name = "cast"];
inline bool Expression::has_cast() const {
  return rex_type_case() == kCast;
}
inline bool Expression::_internal_has_cast() const {
  return rex_type_case() == kCast;
}
inline void Expression::set_has_cast() {
  _impl_._oneof_case_[0] = kCast;
}
inline void Expression::clear_cast() {
  if (rex_type_case() == kCast) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.cast_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_Cast* Expression::release_cast() {
  // @@protoc_insertion_point(field_release:substrait.Expression.cast)
  if (rex_type_case() == kCast) {
    clear_has_rex_type();
    ::substrait::Expression_Cast* temp = _impl_.rex_type_.cast_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.cast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Cast& Expression::_internal_cast() const {
  return rex_type_case() == kCast
      ? *_impl_.rex_type_.cast_
      : reinterpret_cast<::substrait::Expression_Cast&>(::substrait::_Expression_Cast_default_instance_);
}
inline const ::substrait::Expression_Cast& Expression::cast() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.cast)
  return _internal_cast();
}
inline ::substrait::Expression_Cast* Expression::unsafe_arena_release_cast() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.cast)
  if (rex_type_case() == kCast) {
    clear_has_rex_type();
    ::substrait::Expression_Cast* temp = _impl_.rex_type_.cast_;
    _impl_.rex_type_.cast_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_cast(::substrait::Expression_Cast* cast) {
  clear_rex_type();
  if (cast) {
    set_has_cast();
    _impl_.rex_type_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.cast)
}
inline ::substrait::Expression_Cast* Expression::_internal_mutable_cast() {
  if (rex_type_case() != kCast) {
    clear_rex_type();
    set_has_cast();
    _impl_.rex_type_.cast_ = CreateMaybeMessage< ::substrait::Expression_Cast >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.cast_;
}
inline ::substrait::Expression_Cast* Expression::mutable_cast() {
  ::substrait::Expression_Cast* _msg = _internal_mutable_cast();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.cast)
  return _msg;
}

// .substrait.Expression.Subquery subquery = 12 [json_name = "subquery"];
inline bool Expression::has_subquery() const {
  return rex_type_case() == kSubquery;
}
inline bool Expression::_internal_has_subquery() const {
  return rex_type_case() == kSubquery;
}
inline void Expression::set_has_subquery() {
  _impl_._oneof_case_[0] = kSubquery;
}
inline void Expression::clear_subquery() {
  if (rex_type_case() == kSubquery) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.subquery_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_Subquery* Expression::release_subquery() {
  // @@protoc_insertion_point(field_release:substrait.Expression.subquery)
  if (rex_type_case() == kSubquery) {
    clear_has_rex_type();
    ::substrait::Expression_Subquery* temp = _impl_.rex_type_.subquery_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.subquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Subquery& Expression::_internal_subquery() const {
  return rex_type_case() == kSubquery
      ? *_impl_.rex_type_.subquery_
      : reinterpret_cast<::substrait::Expression_Subquery&>(::substrait::_Expression_Subquery_default_instance_);
}
inline const ::substrait::Expression_Subquery& Expression::subquery() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.subquery)
  return _internal_subquery();
}
inline ::substrait::Expression_Subquery* Expression::unsafe_arena_release_subquery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.subquery)
  if (rex_type_case() == kSubquery) {
    clear_has_rex_type();
    ::substrait::Expression_Subquery* temp = _impl_.rex_type_.subquery_;
    _impl_.rex_type_.subquery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_subquery(::substrait::Expression_Subquery* subquery) {
  clear_rex_type();
  if (subquery) {
    set_has_subquery();
    _impl_.rex_type_.subquery_ = subquery;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.subquery)
}
inline ::substrait::Expression_Subquery* Expression::_internal_mutable_subquery() {
  if (rex_type_case() != kSubquery) {
    clear_rex_type();
    set_has_subquery();
    _impl_.rex_type_.subquery_ = CreateMaybeMessage< ::substrait::Expression_Subquery >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.subquery_;
}
inline ::substrait::Expression_Subquery* Expression::mutable_subquery() {
  ::substrait::Expression_Subquery* _msg = _internal_mutable_subquery();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.subquery)
  return _msg;
}

// .substrait.Expression.Nested nested = 13 [json_name = "nested"];
inline bool Expression::has_nested() const {
  return rex_type_case() == kNested;
}
inline bool Expression::_internal_has_nested() const {
  return rex_type_case() == kNested;
}
inline void Expression::set_has_nested() {
  _impl_._oneof_case_[0] = kNested;
}
inline void Expression::clear_nested() {
  if (rex_type_case() == kNested) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.nested_;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_Nested* Expression::release_nested() {
  // @@protoc_insertion_point(field_release:substrait.Expression.nested)
  if (rex_type_case() == kNested) {
    clear_has_rex_type();
    ::substrait::Expression_Nested* temp = _impl_.rex_type_.nested_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.nested_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Nested& Expression::_internal_nested() const {
  return rex_type_case() == kNested
      ? *_impl_.rex_type_.nested_
      : reinterpret_cast<::substrait::Expression_Nested&>(::substrait::_Expression_Nested_default_instance_);
}
inline const ::substrait::Expression_Nested& Expression::nested() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.nested)
  return _internal_nested();
}
inline ::substrait::Expression_Nested* Expression::unsafe_arena_release_nested() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.nested)
  if (rex_type_case() == kNested) {
    clear_has_rex_type();
    ::substrait::Expression_Nested* temp = _impl_.rex_type_.nested_;
    _impl_.rex_type_.nested_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_nested(::substrait::Expression_Nested* nested) {
  clear_rex_type();
  if (nested) {
    set_has_nested();
    _impl_.rex_type_.nested_ = nested;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.nested)
}
inline ::substrait::Expression_Nested* Expression::_internal_mutable_nested() {
  if (rex_type_case() != kNested) {
    clear_rex_type();
    set_has_nested();
    _impl_.rex_type_.nested_ = CreateMaybeMessage< ::substrait::Expression_Nested >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.nested_;
}
inline ::substrait::Expression_Nested* Expression::mutable_nested() {
  ::substrait::Expression_Nested* _msg = _internal_mutable_nested();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.nested)
  return _msg;
}

// .substrait.Expression.Enum enum = 10 [json_name = "enum", deprecated = true];
inline bool Expression::has_enum_() const {
  return rex_type_case() == kEnum;
}
inline bool Expression::_internal_has_enum_() const {
  return rex_type_case() == kEnum;
}
inline void Expression::set_has_enum_() {
  _impl_._oneof_case_[0] = kEnum;
}
inline void Expression::clear_enum_() {
  if (rex_type_case() == kEnum) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rex_type_.enum__;
    }
    clear_has_rex_type();
  }
}
inline ::substrait::Expression_Enum* Expression::release_enum_() {
  // @@protoc_insertion_point(field_release:substrait.Expression.enum)
  if (rex_type_case() == kEnum) {
    clear_has_rex_type();
    ::substrait::Expression_Enum* temp = _impl_.rex_type_.enum__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rex_type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression_Enum& Expression::_internal_enum_() const {
  return rex_type_case() == kEnum
      ? *_impl_.rex_type_.enum__
      : reinterpret_cast<::substrait::Expression_Enum&>(::substrait::_Expression_Enum_default_instance_);
}
inline const ::substrait::Expression_Enum& Expression::enum_() const {
  // @@protoc_insertion_point(field_get:substrait.Expression.enum)
  return _internal_enum_();
}
inline ::substrait::Expression_Enum* Expression::unsafe_arena_release_enum_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.Expression.enum)
  if (rex_type_case() == kEnum) {
    clear_has_rex_type();
    ::substrait::Expression_Enum* temp = _impl_.rex_type_.enum__;
    _impl_.rex_type_.enum__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expression::unsafe_arena_set_allocated_enum_(::substrait::Expression_Enum* enum_) {
  clear_rex_type();
  if (enum_) {
    set_has_enum_();
    _impl_.rex_type_.enum__ = enum_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Expression.enum)
}
inline ::substrait::Expression_Enum* Expression::_internal_mutable_enum_() {
  if (rex_type_case() != kEnum) {
    clear_rex_type();
    set_has_enum_();
    _impl_.rex_type_.enum__ = CreateMaybeMessage< ::substrait::Expression_Enum >(GetArenaForAllocation());
  }
  return _impl_.rex_type_.enum__;
}
inline ::substrait::Expression_Enum* Expression::mutable_enum_() {
  ::substrait::Expression_Enum* _msg = _internal_mutable_enum_();
  // @@protoc_insertion_point(field_mutable:substrait.Expression.enum)
  return _msg;
}

inline bool Expression::has_rex_type() const {
  return rex_type_case() != REX_TYPE_NOT_SET;
}
inline void Expression::clear_has_rex_type() {
  _impl_._oneof_case_[0] = REX_TYPE_NOT_SET;
}
inline Expression::RexTypeCase Expression::rex_type_case() const {
  return Expression::RexTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SortField

// .substrait.Expression expr = 1 [json_name = "expr"];
inline bool SortField::has_expr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expr_ != nullptr);
  return value;
}
inline void SortField::clear_expr() {
  if (_impl_.expr_ != nullptr) _impl_.expr_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Expression& SortField::_internal_expr() const {
  const ::substrait::Expression* p = _impl_.expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Expression&>(
      ::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& SortField::expr() const {
  // @@protoc_insertion_point(field_get:substrait.SortField.expr)
  return _internal_expr();
}
inline void SortField::unsafe_arena_set_allocated_expr(
    ::substrait::Expression* expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expr_);
  }
  _impl_.expr_ = expr;
  if (expr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.SortField.expr)
}
inline ::substrait::Expression* SortField::release_expr() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expr_;
  _impl_.expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Expression* SortField::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_release:substrait.SortField.expr)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Expression* temp = _impl_.expr_;
  _impl_.expr_ = nullptr;
  return temp;
}
inline ::substrait::Expression* SortField::_internal_mutable_expr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Expression>(GetArenaForAllocation());
    _impl_.expr_ = p;
  }
  return _impl_.expr_;
}
inline ::substrait::Expression* SortField::mutable_expr() {
  ::substrait::Expression* _msg = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:substrait.SortField.expr)
  return _msg;
}
inline void SortField::set_allocated_expr(::substrait::Expression* expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.expr_;
  }
  if (expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expr);
    if (message_arena != submessage_arena) {
      expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:substrait.SortField.expr)
}

// .substrait.SortField.SortDirection direction = 2 [json_name = "direction"];
inline bool SortField::has_direction() const {
  return sort_kind_case() == kDirection;
}
inline void SortField::set_has_direction() {
  _impl_._oneof_case_[0] = kDirection;
}
inline void SortField::clear_direction() {
  if (sort_kind_case() == kDirection) {
    _impl_.sort_kind_.direction_ = 0;
    clear_has_sort_kind();
  }
}
inline ::substrait::SortField_SortDirection SortField::direction() const {
  // @@protoc_insertion_point(field_get:substrait.SortField.direction)
  return _internal_direction();
}
inline void SortField::set_direction(::substrait::SortField_SortDirection value) {
   _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:substrait.SortField.direction)
}
inline ::substrait::SortField_SortDirection SortField::_internal_direction() const {
  if (sort_kind_case() == kDirection) {
    return static_cast<::substrait::SortField_SortDirection>(_impl_.sort_kind_.direction_);
  }
  return static_cast<::substrait::SortField_SortDirection>(0);
}
inline void SortField::_internal_set_direction(::substrait::SortField_SortDirection value) {
  if (sort_kind_case() != kDirection) {
    clear_sort_kind();
    set_has_direction();
  }
  _impl_.sort_kind_.direction_ = value;
}

// uint32 comparison_function_reference = 3 [json_name = "comparisonFunctionReference"];
inline bool SortField::has_comparison_function_reference() const {
  return sort_kind_case() == kComparisonFunctionReference;
}
inline void SortField::set_has_comparison_function_reference() {
  _impl_._oneof_case_[0] = kComparisonFunctionReference;
}
inline void SortField::clear_comparison_function_reference() {
  if (sort_kind_case() == kComparisonFunctionReference) {
    _impl_.sort_kind_.comparison_function_reference_ = 0u;
    clear_has_sort_kind();
  }
}
inline ::uint32_t SortField::comparison_function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.SortField.comparison_function_reference)
  return _internal_comparison_function_reference();
}
inline void SortField::set_comparison_function_reference(::uint32_t value) {
  _internal_set_comparison_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.SortField.comparison_function_reference)
}
inline ::uint32_t SortField::_internal_comparison_function_reference() const {
  if (sort_kind_case() == kComparisonFunctionReference) {
    return _impl_.sort_kind_.comparison_function_reference_;
  }
  return 0u;
}
inline void SortField::_internal_set_comparison_function_reference(::uint32_t value) {
  if (sort_kind_case() != kComparisonFunctionReference) {
    clear_sort_kind();
    set_has_comparison_function_reference();
  }
  _impl_.sort_kind_.comparison_function_reference_ = value;
}

inline bool SortField::has_sort_kind() const {
  return sort_kind_case() != SORT_KIND_NOT_SET;
}
inline void SortField::clear_has_sort_kind() {
  _impl_._oneof_case_[0] = SORT_KIND_NOT_SET;
}
inline SortField::SortKindCase SortField::sort_kind_case() const {
  return SortField::SortKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AggregateFunction_ReferenceRel

// int32 subtree_ordinal = 1 [json_name = "subtreeOrdinal"];
inline void AggregateFunction_ReferenceRel::clear_subtree_ordinal() {
  _impl_.subtree_ordinal_ = 0;
}
inline ::int32_t AggregateFunction_ReferenceRel::subtree_ordinal() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.ReferenceRel.subtree_ordinal)
  return _internal_subtree_ordinal();
}
inline void AggregateFunction_ReferenceRel::set_subtree_ordinal(::int32_t value) {
  _internal_set_subtree_ordinal(value);
  // @@protoc_insertion_point(field_set:substrait.AggregateFunction.ReferenceRel.subtree_ordinal)
}
inline ::int32_t AggregateFunction_ReferenceRel::_internal_subtree_ordinal() const {
  return _impl_.subtree_ordinal_;
}
inline void AggregateFunction_ReferenceRel::_internal_set_subtree_ordinal(::int32_t value) {
  ;
  _impl_.subtree_ordinal_ = value;
}

// -------------------------------------------------------------------

// AggregateFunction

// uint32 function_reference = 1 [json_name = "functionReference"];
inline void AggregateFunction::clear_function_reference() {
  _impl_.function_reference_ = 0u;
}
inline ::uint32_t AggregateFunction::function_reference() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.function_reference)
  return _internal_function_reference();
}
inline void AggregateFunction::set_function_reference(::uint32_t value) {
  _internal_set_function_reference(value);
  // @@protoc_insertion_point(field_set:substrait.AggregateFunction.function_reference)
}
inline ::uint32_t AggregateFunction::_internal_function_reference() const {
  return _impl_.function_reference_;
}
inline void AggregateFunction::_internal_set_function_reference(::uint32_t value) {
  ;
  _impl_.function_reference_ = value;
}

// repeated .substrait.FunctionArgument arguments = 7 [json_name = "arguments"];
inline int AggregateFunction::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int AggregateFunction::arguments_size() const {
  return _internal_arguments_size();
}
inline void AggregateFunction::clear_arguments() {
  _internal_mutable_arguments()->Clear();
}
inline ::substrait::FunctionArgument* AggregateFunction::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateFunction.arguments)
  return _internal_mutable_arguments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >*
AggregateFunction::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateFunction.arguments)
  return _internal_mutable_arguments();
}
inline const ::substrait::FunctionArgument& AggregateFunction::_internal_arguments(int index) const {
  return _internal_arguments().Get(index);
}
inline const ::substrait::FunctionArgument& AggregateFunction::arguments(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.arguments)
  return _internal_arguments(index);
}
inline ::substrait::FunctionArgument* AggregateFunction::_internal_add_arguments() {
  return _internal_mutable_arguments()->Add();
}
inline ::substrait::FunctionArgument* AggregateFunction::add_arguments() {
  ::substrait::FunctionArgument* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:substrait.AggregateFunction.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionArgument >&
AggregateFunction::arguments() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateFunction.arguments)
  return _internal_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>&
AggregateFunction::_internal_arguments() const {
  return _impl_.arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionArgument>*
AggregateFunction::_internal_mutable_arguments() {
  return &_impl_.arguments_;
}

// repeated .substrait.FunctionOption options = 8 [json_name = "options"];
inline int AggregateFunction::_internal_options_size() const {
  return _impl_.options_.size();
}
inline int AggregateFunction::options_size() const {
  return _internal_options_size();
}
inline void AggregateFunction::clear_options() {
  _internal_mutable_options()->Clear();
}
inline ::substrait::FunctionOption* AggregateFunction::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateFunction.options)
  return _internal_mutable_options()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >*
AggregateFunction::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateFunction.options)
  return _internal_mutable_options();
}
inline const ::substrait::FunctionOption& AggregateFunction::_internal_options(int index) const {
  return _internal_options().Get(index);
}
inline const ::substrait::FunctionOption& AggregateFunction::options(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.options)
  return _internal_options(index);
}
inline ::substrait::FunctionOption* AggregateFunction::_internal_add_options() {
  return _internal_mutable_options()->Add();
}
inline ::substrait::FunctionOption* AggregateFunction::add_options() {
  ::substrait::FunctionOption* _add = _internal_add_options();
  // @@protoc_insertion_point(field_add:substrait.AggregateFunction.options)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::FunctionOption >&
AggregateFunction::options() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateFunction.options)
  return _internal_options();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>&
AggregateFunction::_internal_options() const {
  return _impl_.options_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::FunctionOption>*
AggregateFunction::_internal_mutable_options() {
  return &_impl_.options_;
}

// .substrait.Type output_type = 5 [json_name = "outputType"];
inline bool AggregateFunction::has_output_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.output_type_ != nullptr);
  return value;
}
inline const ::substrait::Type& AggregateFunction::_internal_output_type() const {
  const ::substrait::Type* p = _impl_.output_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Type&>(
      ::substrait::_Type_default_instance_);
}
inline const ::substrait::Type& AggregateFunction::output_type() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.output_type)
  return _internal_output_type();
}
inline void AggregateFunction::unsafe_arena_set_allocated_output_type(
    ::substrait::Type* output_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  _impl_.output_type_ = output_type;
  if (output_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.AggregateFunction.output_type)
}
inline ::substrait::Type* AggregateFunction::release_output_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Type* AggregateFunction::unsafe_arena_release_output_type() {
  // @@protoc_insertion_point(field_release:substrait.AggregateFunction.output_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Type* temp = _impl_.output_type_;
  _impl_.output_type_ = nullptr;
  return temp;
}
inline ::substrait::Type* AggregateFunction::_internal_mutable_output_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.output_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Type>(GetArenaForAllocation());
    _impl_.output_type_ = p;
  }
  return _impl_.output_type_;
}
inline ::substrait::Type* AggregateFunction::mutable_output_type() {
  ::substrait::Type* _msg = _internal_mutable_output_type();
  // @@protoc_insertion_point(field_mutable:substrait.AggregateFunction.output_type)
  return _msg;
}
inline void AggregateFunction::set_allocated_output_type(::substrait::Type* output_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_type_);
  }
  if (output_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_type));
    if (message_arena != submessage_arena) {
      output_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.output_type_ = output_type;
  // @@protoc_insertion_point(field_set_allocated:substrait.AggregateFunction.output_type)
}

// .substrait.AggregationPhase phase = 4 [json_name = "phase"];
inline void AggregateFunction::clear_phase() {
  _impl_.phase_ = 0;
}
inline ::substrait::AggregationPhase AggregateFunction::phase() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.phase)
  return _internal_phase();
}
inline void AggregateFunction::set_phase(::substrait::AggregationPhase value) {
   _internal_set_phase(value);
  // @@protoc_insertion_point(field_set:substrait.AggregateFunction.phase)
}
inline ::substrait::AggregationPhase AggregateFunction::_internal_phase() const {
  return static_cast<::substrait::AggregationPhase>(_impl_.phase_);
}
inline void AggregateFunction::_internal_set_phase(::substrait::AggregationPhase value) {
  ;
  _impl_.phase_ = value;
}

// repeated .substrait.SortField sorts = 3 [json_name = "sorts"];
inline int AggregateFunction::_internal_sorts_size() const {
  return _impl_.sorts_.size();
}
inline int AggregateFunction::sorts_size() const {
  return _internal_sorts_size();
}
inline void AggregateFunction::clear_sorts() {
  _internal_mutable_sorts()->Clear();
}
inline ::substrait::SortField* AggregateFunction::mutable_sorts(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateFunction.sorts)
  return _internal_mutable_sorts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >*
AggregateFunction::mutable_sorts() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateFunction.sorts)
  return _internal_mutable_sorts();
}
inline const ::substrait::SortField& AggregateFunction::_internal_sorts(int index) const {
  return _internal_sorts().Get(index);
}
inline const ::substrait::SortField& AggregateFunction::sorts(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.sorts)
  return _internal_sorts(index);
}
inline ::substrait::SortField* AggregateFunction::_internal_add_sorts() {
  return _internal_mutable_sorts()->Add();
}
inline ::substrait::SortField* AggregateFunction::add_sorts() {
  ::substrait::SortField* _add = _internal_add_sorts();
  // @@protoc_insertion_point(field_add:substrait.AggregateFunction.sorts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::SortField >&
AggregateFunction::sorts() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateFunction.sorts)
  return _internal_sorts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>&
AggregateFunction::_internal_sorts() const {
  return _impl_.sorts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::SortField>*
AggregateFunction::_internal_mutable_sorts() {
  return &_impl_.sorts_;
}

// .substrait.AggregateFunction.AggregationInvocation invocation = 6 [json_name = "invocation"];
inline void AggregateFunction::clear_invocation() {
  _impl_.invocation_ = 0;
}
inline ::substrait::AggregateFunction_AggregationInvocation AggregateFunction::invocation() const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.invocation)
  return _internal_invocation();
}
inline void AggregateFunction::set_invocation(::substrait::AggregateFunction_AggregationInvocation value) {
   _internal_set_invocation(value);
  // @@protoc_insertion_point(field_set:substrait.AggregateFunction.invocation)
}
inline ::substrait::AggregateFunction_AggregationInvocation AggregateFunction::_internal_invocation() const {
  return static_cast<::substrait::AggregateFunction_AggregationInvocation>(_impl_.invocation_);
}
inline void AggregateFunction::_internal_set_invocation(::substrait::AggregateFunction_AggregationInvocation value) {
  ;
  _impl_.invocation_ = value;
}

// repeated .substrait.Expression args = 2 [json_name = "args", deprecated = true];
inline int AggregateFunction::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int AggregateFunction::args_size() const {
  return _internal_args_size();
}
inline void AggregateFunction::clear_args() {
  _internal_mutable_args()->Clear();
}
inline ::substrait::Expression* AggregateFunction::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.AggregateFunction.args)
  return _internal_mutable_args()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >*
AggregateFunction::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:substrait.AggregateFunction.args)
  return _internal_mutable_args();
}
inline const ::substrait::Expression& AggregateFunction::_internal_args(int index) const {
  return _internal_args().Get(index);
}
inline const ::substrait::Expression& AggregateFunction::args(int index) const {
  // @@protoc_insertion_point(field_get:substrait.AggregateFunction.args)
  return _internal_args(index);
}
inline ::substrait::Expression* AggregateFunction::_internal_add_args() {
  return _internal_mutable_args()->Add();
}
inline ::substrait::Expression* AggregateFunction::add_args() {
  ::substrait::Expression* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:substrait.AggregateFunction.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::Expression >&
AggregateFunction::args() const {
  // @@protoc_insertion_point(field_list:substrait.AggregateFunction.args)
  return _internal_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>&
AggregateFunction::_internal_args() const {
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::Expression>*
AggregateFunction::_internal_mutable_args() {
  return &_impl_.args_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::substrait::JoinRel_JoinType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::JoinRel_JoinType>() {
  return ::substrait::JoinRel_JoinType_descriptor();
}
template <>
struct is_proto_enum<::substrait::SetRel_SetOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::SetRel_SetOp>() {
  return ::substrait::SetRel_SetOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::DdlRel_DdlObject> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::DdlRel_DdlObject>() {
  return ::substrait::DdlRel_DdlObject_descriptor();
}
template <>
struct is_proto_enum<::substrait::DdlRel_DdlOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::DdlRel_DdlOp>() {
  return ::substrait::DdlRel_DdlOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::WriteRel_WriteOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::WriteRel_WriteOp>() {
  return ::substrait::WriteRel_WriteOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::WriteRel_OutputMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::WriteRel_OutputMode>() {
  return ::substrait::WriteRel_OutputMode_descriptor();
}
template <>
struct is_proto_enum<::substrait::HashJoinRel_JoinType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::HashJoinRel_JoinType>() {
  return ::substrait::HashJoinRel_JoinType_descriptor();
}
template <>
struct is_proto_enum<::substrait::MergeJoinRel_JoinType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::MergeJoinRel_JoinType>() {
  return ::substrait::MergeJoinRel_JoinType_descriptor();
}
template <>
struct is_proto_enum<::substrait::Expression_Cast_FailureBehavior> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::Expression_Cast_FailureBehavior>() {
  return ::substrait::Expression_Cast_FailureBehavior_descriptor();
}
template <>
struct is_proto_enum<::substrait::Expression_Subquery_SetPredicate_PredicateOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::Expression_Subquery_SetPredicate_PredicateOp>() {
  return ::substrait::Expression_Subquery_SetPredicate_PredicateOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::Expression_Subquery_SetComparison_ComparisonOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::Expression_Subquery_SetComparison_ComparisonOp>() {
  return ::substrait::Expression_Subquery_SetComparison_ComparisonOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::Expression_Subquery_SetComparison_ReductionOp> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::Expression_Subquery_SetComparison_ReductionOp>() {
  return ::substrait::Expression_Subquery_SetComparison_ReductionOp_descriptor();
}
template <>
struct is_proto_enum<::substrait::SortField_SortDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::SortField_SortDirection>() {
  return ::substrait::SortField_SortDirection_descriptor();
}
template <>
struct is_proto_enum<::substrait::AggregateFunction_AggregationInvocation> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::AggregateFunction_AggregationInvocation>() {
  return ::substrait::AggregateFunction_AggregationInvocation_descriptor();
}
template <>
struct is_proto_enum<::substrait::AggregationPhase> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::substrait::AggregationPhase>() {
  return ::substrait::AggregationPhase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_substrait_2falgebra_2eproto_2epb_2eh
