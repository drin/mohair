// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/capabilities.proto

#include "substrait/capabilities.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace substrait {
PROTOBUF_CONSTEXPR Capabilities_SimpleExtension::Capabilities_SimpleExtension(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_keys_)*/{}
  , /*decltype(_impl_.type_keys_)*/{}
  , /*decltype(_impl_.type_variation_keys_)*/{}
  , /*decltype(_impl_.uri_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Capabilities_SimpleExtensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Capabilities_SimpleExtensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Capabilities_SimpleExtensionDefaultTypeInternal() {}
  union {
    Capabilities_SimpleExtension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Capabilities_SimpleExtensionDefaultTypeInternal _Capabilities_SimpleExtension_default_instance_;
PROTOBUF_CONSTEXPR Capabilities::Capabilities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.substrait_versions_)*/{}
  , /*decltype(_impl_.advanced_extension_type_urls_)*/{}
  , /*decltype(_impl_.simple_extensions_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapabilitiesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapabilitiesDefaultTypeInternal() {}
  union {
    Capabilities _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2fcapabilities_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_substrait_2fcapabilities_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_substrait_2fcapabilities_2eproto = nullptr;
const ::uint32_t TableStruct_substrait_2fcapabilities_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities_SimpleExtension, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities_SimpleExtension, _impl_.uri_),
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities_SimpleExtension, _impl_.function_keys_),
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities_SimpleExtension, _impl_.type_keys_),
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities_SimpleExtension, _impl_.type_variation_keys_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities, _impl_.substrait_versions_),
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities, _impl_.advanced_extension_type_urls_),
    PROTOBUF_FIELD_OFFSET(::substrait::Capabilities, _impl_.simple_extensions_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::substrait::Capabilities_SimpleExtension)},
        { 12, -1, -1, sizeof(::substrait::Capabilities)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::substrait::_Capabilities_SimpleExtension_default_instance_._instance,
    &::substrait::_Capabilities_default_instance_._instance,
};
const char descriptor_table_protodef_substrait_2fcapabilities_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034substrait/capabilities.proto\022\tsubstrai"
    "t\"\354\002\n\014Capabilities\022-\n\022substrait_versions"
    "\030\001 \003(\tR\021substraitVersions\022\?\n\034advanced_ex"
    "tension_type_urls\030\002 \003(\tR\031advancedExtensi"
    "onTypeUrls\022T\n\021simple_extensions\030\003 \003(\0132\'."
    "substrait.Capabilities.SimpleExtensionR\020"
    "simpleExtensions\032\225\001\n\017SimpleExtension\022\020\n\003"
    "uri\030\001 \001(\tR\003uri\022#\n\rfunction_keys\030\002 \003(\tR\014f"
    "unctionKeys\022\033\n\ttype_keys\030\003 \003(\tR\010typeKeys"
    "\022.\n\023type_variation_keys\030\004 \003(\tR\021typeVaria"
    "tionKeysB\222\001\n\rcom.substraitB\021Capabilities"
    "ProtoP\001Z*github.com/substrait-io/substra"
    "it-go/proto\242\002\003SXX\252\002\tSubstrait\312\002\tSubstrai"
    "t\342\002\025Substrait\\GPBMetadata\352\002\tSubstraitb\006p"
    "roto3"
};
static ::absl::once_flag descriptor_table_substrait_2fcapabilities_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2fcapabilities_2eproto = {
    false,
    false,
    565,
    descriptor_table_protodef_substrait_2fcapabilities_2eproto,
    "substrait/capabilities.proto",
    &descriptor_table_substrait_2fcapabilities_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_substrait_2fcapabilities_2eproto::offsets,
    file_level_metadata_substrait_2fcapabilities_2eproto,
    file_level_enum_descriptors_substrait_2fcapabilities_2eproto,
    file_level_service_descriptors_substrait_2fcapabilities_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2fcapabilities_2eproto_getter() {
  return &descriptor_table_substrait_2fcapabilities_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2fcapabilities_2eproto(&descriptor_table_substrait_2fcapabilities_2eproto);
namespace substrait {
// ===================================================================

class Capabilities_SimpleExtension::_Internal {
 public:
};

Capabilities_SimpleExtension::Capabilities_SimpleExtension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Capabilities.SimpleExtension)
}
Capabilities_SimpleExtension::Capabilities_SimpleExtension(const Capabilities_SimpleExtension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Capabilities_SimpleExtension* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_keys_){from._impl_.function_keys_}
    , decltype(_impl_.type_keys_){from._impl_.type_keys_}
    , decltype(_impl_.type_variation_keys_){from._impl_.type_variation_keys_}
    , decltype(_impl_.uri_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Capabilities.SimpleExtension)
}

inline void Capabilities_SimpleExtension::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.function_keys_){arena}
    , decltype(_impl_.type_keys_){arena}
    , decltype(_impl_.type_variation_keys_){arena}
    , decltype(_impl_.uri_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.uri_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Capabilities_SimpleExtension::~Capabilities_SimpleExtension() {
  // @@protoc_insertion_point(destructor:substrait.Capabilities.SimpleExtension)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capabilities_SimpleExtension::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_function_keys()->~RepeatedPtrField();
  _internal_mutable_type_keys()->~RepeatedPtrField();
  _internal_mutable_type_variation_keys()->~RepeatedPtrField();
  _impl_.uri_.Destroy();
}

void Capabilities_SimpleExtension::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Capabilities_SimpleExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Capabilities.SimpleExtension)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_function_keys()->Clear();
  _internal_mutable_type_keys()->Clear();
  _internal_mutable_type_variation_keys()->Clear();
  _impl_.uri_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities_SimpleExtension::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1 [json_name = "uri"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.SimpleExtension.uri"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string function_keys = 2 [json_name = "functionKeys"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_function_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.SimpleExtension.function_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string type_keys = 3 [json_name = "typeKeys"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.SimpleExtension.type_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string type_variation_keys = 4 [json_name = "typeVariationKeys"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type_variation_keys();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.SimpleExtension.type_variation_keys"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Capabilities_SimpleExtension::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Capabilities.SimpleExtension)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    const std::string& _s = this->_internal_uri();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.SimpleExtension.uri");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string function_keys = 2 [json_name = "functionKeys"];
  for (int i = 0, n = this->_internal_function_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_function_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.SimpleExtension.function_keys");
    target = stream->WriteString(2, s, target);
  }

  // repeated string type_keys = 3 [json_name = "typeKeys"];
  for (int i = 0, n = this->_internal_type_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_type_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.SimpleExtension.type_keys");
    target = stream->WriteString(3, s, target);
  }

  // repeated string type_variation_keys = 4 [json_name = "typeVariationKeys"];
  for (int i = 0, n = this->_internal_type_variation_keys_size(); i < n; ++i) {
    const auto& s = this->_internal_type_variation_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.SimpleExtension.type_variation_keys");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Capabilities.SimpleExtension)
  return target;
}

::size_t Capabilities_SimpleExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Capabilities.SimpleExtension)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string function_keys = 2 [json_name = "functionKeys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_function_keys().size());
  for (int i = 0, n = _internal_function_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_function_keys().Get(i));
  }

  // repeated string type_keys = 3 [json_name = "typeKeys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_type_keys().size());
  for (int i = 0, n = _internal_type_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_type_keys().Get(i));
  }

  // repeated string type_variation_keys = 4 [json_name = "typeVariationKeys"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_type_variation_keys().size());
  for (int i = 0, n = _internal_type_variation_keys().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_type_variation_keys().Get(i));
  }

  // string uri = 1 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capabilities_SimpleExtension::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Capabilities_SimpleExtension::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capabilities_SimpleExtension::GetClassData() const { return &_class_data_; }


void Capabilities_SimpleExtension::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Capabilities_SimpleExtension*>(&to_msg);
  auto& from = static_cast<const Capabilities_SimpleExtension&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Capabilities.SimpleExtension)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_function_keys()->MergeFrom(from._internal_function_keys());
  _this->_internal_mutable_type_keys()->MergeFrom(from._internal_type_keys());
  _this->_internal_mutable_type_variation_keys()->MergeFrom(from._internal_type_variation_keys());
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capabilities_SimpleExtension::CopyFrom(const Capabilities_SimpleExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Capabilities.SimpleExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities_SimpleExtension::IsInitialized() const {
  return true;
}

void Capabilities_SimpleExtension::InternalSwap(Capabilities_SimpleExtension* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_function_keys()->InternalSwap(
      other->_internal_mutable_function_keys());
  _internal_mutable_type_keys()->InternalSwap(
      other->_internal_mutable_type_keys());
  _internal_mutable_type_variation_keys()->InternalSwap(
      other->_internal_mutable_type_variation_keys());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uri_, lhs_arena,
                                       &other->_impl_.uri_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities_SimpleExtension::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fcapabilities_2eproto_getter, &descriptor_table_substrait_2fcapabilities_2eproto_once,
      file_level_metadata_substrait_2fcapabilities_2eproto[0]);
}
// ===================================================================

class Capabilities::_Internal {
 public:
};

Capabilities::Capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Capabilities)
}
Capabilities::Capabilities(const Capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Capabilities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.substrait_versions_){from._impl_.substrait_versions_}
    , decltype(_impl_.advanced_extension_type_urls_){from._impl_.advanced_extension_type_urls_}
    , decltype(_impl_.simple_extensions_){from._impl_.simple_extensions_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Capabilities)
}

inline void Capabilities::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.substrait_versions_){arena}
    , decltype(_impl_.advanced_extension_type_urls_){arena}
    , decltype(_impl_.simple_extensions_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Capabilities::~Capabilities() {
  // @@protoc_insertion_point(destructor:substrait.Capabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capabilities::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_substrait_versions()->~RepeatedPtrField();
  _internal_mutable_advanced_extension_type_urls()->~RepeatedPtrField();
  _internal_mutable_simple_extensions()->~RepeatedPtrField();
}

void Capabilities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Capabilities)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_substrait_versions()->Clear();
  _internal_mutable_advanced_extension_type_urls()->Clear();
  _internal_mutable_simple_extensions()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string substrait_versions = 1 [json_name = "substraitVersions"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_substrait_versions();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.substrait_versions"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string advanced_extension_type_urls = 2 [json_name = "advancedExtensionTypeUrls"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_advanced_extension_type_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Capabilities.advanced_extension_type_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3 [json_name = "simpleExtensions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_simple_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Capabilities::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Capabilities)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string substrait_versions = 1 [json_name = "substraitVersions"];
  for (int i = 0, n = this->_internal_substrait_versions_size(); i < n; ++i) {
    const auto& s = this->_internal_substrait_versions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.substrait_versions");
    target = stream->WriteString(1, s, target);
  }

  // repeated string advanced_extension_type_urls = 2 [json_name = "advancedExtensionTypeUrls"];
  for (int i = 0, n = this->_internal_advanced_extension_type_urls_size(); i < n; ++i) {
    const auto& s = this->_internal_advanced_extension_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Capabilities.advanced_extension_type_urls");
    target = stream->WriteString(2, s, target);
  }

  // repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3 [json_name = "simpleExtensions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_simple_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_simple_extensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Capabilities)
  return target;
}

::size_t Capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Capabilities)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string substrait_versions = 1 [json_name = "substraitVersions"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_substrait_versions().size());
  for (int i = 0, n = _internal_substrait_versions().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_substrait_versions().Get(i));
  }

  // repeated string advanced_extension_type_urls = 2 [json_name = "advancedExtensionTypeUrls"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_advanced_extension_type_urls().size());
  for (int i = 0, n = _internal_advanced_extension_type_urls().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_advanced_extension_type_urls().Get(i));
  }

  // repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3 [json_name = "simpleExtensions"];
  total_size += 1UL * this->_internal_simple_extensions_size();
  for (const auto& msg : this->_internal_simple_extensions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capabilities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Capabilities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capabilities::GetClassData() const { return &_class_data_; }


void Capabilities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Capabilities*>(&to_msg);
  auto& from = static_cast<const Capabilities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Capabilities)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_substrait_versions()->MergeFrom(from._internal_substrait_versions());
  _this->_internal_mutable_advanced_extension_type_urls()->MergeFrom(from._internal_advanced_extension_type_urls());
  _this->_internal_mutable_simple_extensions()->MergeFrom(from._internal_simple_extensions());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capabilities::CopyFrom(const Capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capabilities::IsInitialized() const {
  return true;
}

void Capabilities::InternalSwap(Capabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_substrait_versions()->InternalSwap(
      other->_internal_mutable_substrait_versions());
  _internal_mutable_advanced_extension_type_urls()->InternalSwap(
      other->_internal_mutable_advanced_extension_type_urls());
  _internal_mutable_simple_extensions()->InternalSwap(other->_internal_mutable_simple_extensions());
}

::PROTOBUF_NAMESPACE_ID::Metadata Capabilities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fcapabilities_2eproto_getter, &descriptor_table_substrait_2fcapabilities_2eproto_once,
      file_level_metadata_substrait_2fcapabilities_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::Capabilities_SimpleExtension*
Arena::CreateMaybeMessage< ::substrait::Capabilities_SimpleExtension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Capabilities_SimpleExtension >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Capabilities*
Arena::CreateMaybeMessage< ::substrait::Capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Capabilities >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
