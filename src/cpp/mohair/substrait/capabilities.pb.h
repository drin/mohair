// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/capabilities.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_substrait_2fcapabilities_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fcapabilities_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_substrait_2fcapabilities_2eproto;
namespace substrait {
class Capabilities;
struct CapabilitiesDefaultTypeInternal;
extern CapabilitiesDefaultTypeInternal _Capabilities_default_instance_;
class Capabilities_SimpleExtension;
struct Capabilities_SimpleExtensionDefaultTypeInternal;
extern Capabilities_SimpleExtensionDefaultTypeInternal _Capabilities_SimpleExtension_default_instance_;
}  // namespace substrait
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace substrait {

// ===================================================================


// -------------------------------------------------------------------

class Capabilities_SimpleExtension final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Capabilities.SimpleExtension) */ {
 public:
  inline Capabilities_SimpleExtension() : Capabilities_SimpleExtension(nullptr) {}
  ~Capabilities_SimpleExtension() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Capabilities_SimpleExtension(::google::protobuf::internal::ConstantInitialized);

  Capabilities_SimpleExtension(const Capabilities_SimpleExtension& from);
  Capabilities_SimpleExtension(Capabilities_SimpleExtension&& from) noexcept
    : Capabilities_SimpleExtension() {
    *this = ::std::move(from);
  }

  inline Capabilities_SimpleExtension& operator=(const Capabilities_SimpleExtension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capabilities_SimpleExtension& operator=(Capabilities_SimpleExtension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capabilities_SimpleExtension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capabilities_SimpleExtension* internal_default_instance() {
    return reinterpret_cast<const Capabilities_SimpleExtension*>(
               &_Capabilities_SimpleExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Capabilities_SimpleExtension& a, Capabilities_SimpleExtension& b) {
    a.Swap(&b);
  }
  inline void Swap(Capabilities_SimpleExtension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capabilities_SimpleExtension* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capabilities_SimpleExtension* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capabilities_SimpleExtension>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Capabilities_SimpleExtension& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Capabilities_SimpleExtension& from) {
    Capabilities_SimpleExtension::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities_SimpleExtension* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Capabilities.SimpleExtension";
  }
  protected:
  explicit Capabilities_SimpleExtension(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionKeysFieldNumber = 2,
    kTypeKeysFieldNumber = 3,
    kTypeVariationKeysFieldNumber = 4,
    kUriFieldNumber = 1,
  };
  // repeated string function_keys = 2 [json_name = "functionKeys"];
  int function_keys_size() const;
  private:
  int _internal_function_keys_size() const;

  public:
  void clear_function_keys() ;
  const std::string& function_keys(int index) const;
  std::string* mutable_function_keys(int index);
  void set_function_keys(int index, const std::string& value);
  void set_function_keys(int index, std::string&& value);
  void set_function_keys(int index, const char* value);
  void set_function_keys(int index, const char* value, std::size_t size);
  void set_function_keys(int index, absl::string_view value);
  std::string* add_function_keys();
  void add_function_keys(const std::string& value);
  void add_function_keys(std::string&& value);
  void add_function_keys(const char* value);
  void add_function_keys(const char* value, std::size_t size);
  void add_function_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& function_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_function_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_function_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_function_keys();

  public:
  // repeated string type_keys = 3 [json_name = "typeKeys"];
  int type_keys_size() const;
  private:
  int _internal_type_keys_size() const;

  public:
  void clear_type_keys() ;
  const std::string& type_keys(int index) const;
  std::string* mutable_type_keys(int index);
  void set_type_keys(int index, const std::string& value);
  void set_type_keys(int index, std::string&& value);
  void set_type_keys(int index, const char* value);
  void set_type_keys(int index, const char* value, std::size_t size);
  void set_type_keys(int index, absl::string_view value);
  std::string* add_type_keys();
  void add_type_keys(const std::string& value);
  void add_type_keys(std::string&& value);
  void add_type_keys(const char* value);
  void add_type_keys(const char* value, std::size_t size);
  void add_type_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& type_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_type_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_type_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_type_keys();

  public:
  // repeated string type_variation_keys = 4 [json_name = "typeVariationKeys"];
  int type_variation_keys_size() const;
  private:
  int _internal_type_variation_keys_size() const;

  public:
  void clear_type_variation_keys() ;
  const std::string& type_variation_keys(int index) const;
  std::string* mutable_type_variation_keys(int index);
  void set_type_variation_keys(int index, const std::string& value);
  void set_type_variation_keys(int index, std::string&& value);
  void set_type_variation_keys(int index, const char* value);
  void set_type_variation_keys(int index, const char* value, std::size_t size);
  void set_type_variation_keys(int index, absl::string_view value);
  std::string* add_type_variation_keys();
  void add_type_variation_keys(const std::string& value);
  void add_type_variation_keys(std::string&& value);
  void add_type_variation_keys(const char* value);
  void add_type_variation_keys(const char* value, std::size_t size);
  void add_type_variation_keys(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& type_variation_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_type_variation_keys();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_type_variation_keys() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_type_variation_keys();

  public:
  // string uri = 1 [json_name = "uri"];
  void clear_uri() ;
  const std::string& uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uri(Arg_&& arg, Args_... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* ptr);

  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(
      const std::string& value);
  std::string* _internal_mutable_uri();

  public:
  // @@protoc_insertion_point(class_scope:substrait.Capabilities.SimpleExtension)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 4, 0, 91, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> function_keys_;
    ::google::protobuf::RepeatedPtrField<std::string> type_keys_;
    ::google::protobuf::RepeatedPtrField<std::string> type_variation_keys_;
    ::google::protobuf::internal::ArenaStringPtr uri_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fcapabilities_2eproto;
};// -------------------------------------------------------------------

class Capabilities final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:substrait.Capabilities) */ {
 public:
  inline Capabilities() : Capabilities(nullptr) {}
  ~Capabilities() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Capabilities(::google::protobuf::internal::ConstantInitialized);

  Capabilities(const Capabilities& from);
  Capabilities(Capabilities&& from) noexcept
    : Capabilities() {
    *this = ::std::move(from);
  }

  inline Capabilities& operator=(const Capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capabilities& operator=(Capabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capabilities* internal_default_instance() {
    return reinterpret_cast<const Capabilities*>(
               &_Capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Capabilities& a, Capabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(Capabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capabilities* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capabilities* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capabilities>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Capabilities& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Capabilities& from) {
    Capabilities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capabilities* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Capabilities";
  }
  protected:
  explicit Capabilities(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Capabilities_SimpleExtension SimpleExtension;

  // accessors -------------------------------------------------------

  enum : int {
    kSubstraitVersionsFieldNumber = 1,
    kAdvancedExtensionTypeUrlsFieldNumber = 2,
    kSimpleExtensionsFieldNumber = 3,
  };
  // repeated string substrait_versions = 1 [json_name = "substraitVersions"];
  int substrait_versions_size() const;
  private:
  int _internal_substrait_versions_size() const;

  public:
  void clear_substrait_versions() ;
  const std::string& substrait_versions(int index) const;
  std::string* mutable_substrait_versions(int index);
  void set_substrait_versions(int index, const std::string& value);
  void set_substrait_versions(int index, std::string&& value);
  void set_substrait_versions(int index, const char* value);
  void set_substrait_versions(int index, const char* value, std::size_t size);
  void set_substrait_versions(int index, absl::string_view value);
  std::string* add_substrait_versions();
  void add_substrait_versions(const std::string& value);
  void add_substrait_versions(std::string&& value);
  void add_substrait_versions(const char* value);
  void add_substrait_versions(const char* value, std::size_t size);
  void add_substrait_versions(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& substrait_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_substrait_versions();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_substrait_versions() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_substrait_versions();

  public:
  // repeated string advanced_extension_type_urls = 2 [json_name = "advancedExtensionTypeUrls"];
  int advanced_extension_type_urls_size() const;
  private:
  int _internal_advanced_extension_type_urls_size() const;

  public:
  void clear_advanced_extension_type_urls() ;
  const std::string& advanced_extension_type_urls(int index) const;
  std::string* mutable_advanced_extension_type_urls(int index);
  void set_advanced_extension_type_urls(int index, const std::string& value);
  void set_advanced_extension_type_urls(int index, std::string&& value);
  void set_advanced_extension_type_urls(int index, const char* value);
  void set_advanced_extension_type_urls(int index, const char* value, std::size_t size);
  void set_advanced_extension_type_urls(int index, absl::string_view value);
  std::string* add_advanced_extension_type_urls();
  void add_advanced_extension_type_urls(const std::string& value);
  void add_advanced_extension_type_urls(std::string&& value);
  void add_advanced_extension_type_urls(const char* value);
  void add_advanced_extension_type_urls(const char* value, std::size_t size);
  void add_advanced_extension_type_urls(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& advanced_extension_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_advanced_extension_type_urls();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_advanced_extension_type_urls() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_advanced_extension_type_urls();

  public:
  // repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3 [json_name = "simpleExtensions"];
  int simple_extensions_size() const;
  private:
  int _internal_simple_extensions_size() const;

  public:
  void clear_simple_extensions() ;
  ::substrait::Capabilities_SimpleExtension* mutable_simple_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >*
      mutable_simple_extensions();
  private:
  const ::google::protobuf::RepeatedPtrField<::substrait::Capabilities_SimpleExtension>& _internal_simple_extensions() const;
  ::google::protobuf::RepeatedPtrField<::substrait::Capabilities_SimpleExtension>* _internal_mutable_simple_extensions();
  public:
  const ::substrait::Capabilities_SimpleExtension& simple_extensions(int index) const;
  ::substrait::Capabilities_SimpleExtension* add_simple_extensions();
  const ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >&
      simple_extensions() const;
  // @@protoc_insertion_point(class_scope:substrait.Capabilities)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 77, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedPtrField<std::string> substrait_versions_;
    ::google::protobuf::RepeatedPtrField<std::string> advanced_extension_type_urls_;
    ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension > simple_extensions_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fcapabilities_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Capabilities_SimpleExtension

// string uri = 1 [json_name = "uri"];
inline void Capabilities_SimpleExtension::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Capabilities_SimpleExtension::uri() const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.uri)
  return _internal_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Capabilities_SimpleExtension::set_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uri_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.uri)
}
inline std::string* Capabilities_SimpleExtension::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.uri)
  return _s;
}
inline const std::string& Capabilities_SimpleExtension::_internal_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uri_.Get();
}
inline void Capabilities_SimpleExtension::_internal_set_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Capabilities_SimpleExtension::_internal_mutable_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uri_.Mutable( GetArenaForAllocation());
}
inline std::string* Capabilities_SimpleExtension::release_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:substrait.Capabilities.SimpleExtension.uri)
  return _impl_.uri_.Release();
}
inline void Capabilities_SimpleExtension::set_allocated_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uri_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uri_.IsDefault()) {
          _impl_.uri_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Capabilities.SimpleExtension.uri)
}

// repeated string function_keys = 2 [json_name = "functionKeys"];
inline int Capabilities_SimpleExtension::_internal_function_keys_size() const {
  return _internal_function_keys().size();
}
inline int Capabilities_SimpleExtension::function_keys_size() const {
  return _internal_function_keys_size();
}
inline void Capabilities_SimpleExtension::clear_function_keys() {
  _internal_mutable_function_keys()->Clear();
}
inline std::string* Capabilities_SimpleExtension::add_function_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_function_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.function_keys)
  return _s;
}
inline const std::string& Capabilities_SimpleExtension::function_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.function_keys)
  return _internal_function_keys().Get(index);
}
inline std::string* Capabilities_SimpleExtension::mutable_function_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.function_keys)
  return _internal_mutable_function_keys()->Mutable(index);
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, const std::string& value) {
  _internal_mutable_function_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, std::string&& value) {
  _internal_mutable_function_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_function_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_function_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::set_function_keys(int index, absl::string_view value) {
  _internal_mutable_function_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_function_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_function_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_function_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_function_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.function_keys)
}
inline void Capabilities_SimpleExtension::add_function_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_function_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Capabilities.SimpleExtension.function_keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::function_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.function_keys)
  return _internal_function_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Capabilities_SimpleExtension::mutable_function_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.function_keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_function_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::_internal_function_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.function_keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Capabilities_SimpleExtension::_internal_mutable_function_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.function_keys_;
}

// repeated string type_keys = 3 [json_name = "typeKeys"];
inline int Capabilities_SimpleExtension::_internal_type_keys_size() const {
  return _internal_type_keys().size();
}
inline int Capabilities_SimpleExtension::type_keys_size() const {
  return _internal_type_keys_size();
}
inline void Capabilities_SimpleExtension::clear_type_keys() {
  _internal_mutable_type_keys()->Clear();
}
inline std::string* Capabilities_SimpleExtension::add_type_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_type_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.type_keys)
  return _s;
}
inline const std::string& Capabilities_SimpleExtension::type_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.type_keys)
  return _internal_type_keys().Get(index);
}
inline std::string* Capabilities_SimpleExtension::mutable_type_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.type_keys)
  return _internal_mutable_type_keys()->Mutable(index);
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, const std::string& value) {
  _internal_mutable_type_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, std::string&& value) {
  _internal_mutable_type_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_type_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_type_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::set_type_keys(int index, absl::string_view value) {
  _internal_mutable_type_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.type_keys)
}
inline void Capabilities_SimpleExtension::add_type_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Capabilities.SimpleExtension.type_keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::type_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.type_keys)
  return _internal_type_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Capabilities_SimpleExtension::mutable_type_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.type_keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_type_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::_internal_type_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Capabilities_SimpleExtension::_internal_mutable_type_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.type_keys_;
}

// repeated string type_variation_keys = 4 [json_name = "typeVariationKeys"];
inline int Capabilities_SimpleExtension::_internal_type_variation_keys_size() const {
  return _internal_type_variation_keys().size();
}
inline int Capabilities_SimpleExtension::type_variation_keys_size() const {
  return _internal_type_variation_keys_size();
}
inline void Capabilities_SimpleExtension::clear_type_variation_keys() {
  _internal_mutable_type_variation_keys()->Clear();
}
inline std::string* Capabilities_SimpleExtension::add_type_variation_keys() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_type_variation_keys()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return _s;
}
inline const std::string& Capabilities_SimpleExtension::type_variation_keys(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return _internal_type_variation_keys().Get(index);
}
inline std::string* Capabilities_SimpleExtension::mutable_type_variation_keys(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return _internal_mutable_type_variation_keys()->Mutable(index);
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const std::string& value) {
  _internal_mutable_type_variation_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, std::string&& value) {
  _internal_mutable_type_variation_keys()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_type_variation_keys()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_type_variation_keys()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::set_type_variation_keys(int index, absl::string_view value) {
  _internal_mutable_type_variation_keys()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_variation_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_variation_keys()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_variation_keys()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_variation_keys()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline void Capabilities_SimpleExtension::add_type_variation_keys(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_type_variation_keys()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Capabilities.SimpleExtension.type_variation_keys)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::type_variation_keys() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.SimpleExtension.type_variation_keys)
  return _internal_type_variation_keys();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Capabilities_SimpleExtension::mutable_type_variation_keys() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.SimpleExtension.type_variation_keys)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_type_variation_keys();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities_SimpleExtension::_internal_type_variation_keys() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_variation_keys_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Capabilities_SimpleExtension::_internal_mutable_type_variation_keys() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.type_variation_keys_;
}

// -------------------------------------------------------------------

// Capabilities

// repeated string substrait_versions = 1 [json_name = "substraitVersions"];
inline int Capabilities::_internal_substrait_versions_size() const {
  return _internal_substrait_versions().size();
}
inline int Capabilities::substrait_versions_size() const {
  return _internal_substrait_versions_size();
}
inline void Capabilities::clear_substrait_versions() {
  _internal_mutable_substrait_versions()->Clear();
}
inline std::string* Capabilities::add_substrait_versions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_substrait_versions()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.substrait_versions)
  return _s;
}
inline const std::string& Capabilities::substrait_versions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.substrait_versions)
  return _internal_substrait_versions().Get(index);
}
inline std::string* Capabilities::mutable_substrait_versions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.substrait_versions)
  return _internal_mutable_substrait_versions()->Mutable(index);
}
inline void Capabilities::set_substrait_versions(int index, const std::string& value) {
  _internal_mutable_substrait_versions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::set_substrait_versions(int index, std::string&& value) {
  _internal_mutable_substrait_versions()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::set_substrait_versions(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_substrait_versions()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::set_substrait_versions(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_substrait_versions()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::set_substrait_versions(int index, absl::string_view value) {
  _internal_mutable_substrait_versions()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_substrait_versions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_substrait_versions()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_substrait_versions()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_substrait_versions()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.substrait_versions)
}
inline void Capabilities::add_substrait_versions(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_substrait_versions()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Capabilities.substrait_versions)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities::substrait_versions() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.substrait_versions)
  return _internal_substrait_versions();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Capabilities::mutable_substrait_versions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.substrait_versions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_substrait_versions();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities::_internal_substrait_versions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.substrait_versions_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Capabilities::_internal_mutable_substrait_versions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.substrait_versions_;
}

// repeated string advanced_extension_type_urls = 2 [json_name = "advancedExtensionTypeUrls"];
inline int Capabilities::_internal_advanced_extension_type_urls_size() const {
  return _internal_advanced_extension_type_urls().size();
}
inline int Capabilities::advanced_extension_type_urls_size() const {
  return _internal_advanced_extension_type_urls_size();
}
inline void Capabilities::clear_advanced_extension_type_urls() {
  _internal_mutable_advanced_extension_type_urls()->Clear();
}
inline std::string* Capabilities::add_advanced_extension_type_urls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_advanced_extension_type_urls()->Add();
  // @@protoc_insertion_point(field_add_mutable:substrait.Capabilities.advanced_extension_type_urls)
  return _s;
}
inline const std::string& Capabilities::advanced_extension_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.advanced_extension_type_urls)
  return _internal_advanced_extension_type_urls().Get(index);
}
inline std::string* Capabilities::mutable_advanced_extension_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.advanced_extension_type_urls)
  return _internal_mutable_advanced_extension_type_urls()->Mutable(index);
}
inline void Capabilities::set_advanced_extension_type_urls(int index, const std::string& value) {
  _internal_mutable_advanced_extension_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::set_advanced_extension_type_urls(int index, std::string&& value) {
  _internal_mutable_advanced_extension_type_urls()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::set_advanced_extension_type_urls(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_advanced_extension_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::set_advanced_extension_type_urls(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_advanced_extension_type_urls()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::set_advanced_extension_type_urls(int index, absl::string_view value) {
  _internal_mutable_advanced_extension_type_urls()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_advanced_extension_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_advanced_extension_type_urls()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_advanced_extension_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_advanced_extension_type_urls()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Capabilities.advanced_extension_type_urls)
}
inline void Capabilities::add_advanced_extension_type_urls(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_advanced_extension_type_urls()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Capabilities.advanced_extension_type_urls)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities::advanced_extension_type_urls() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.advanced_extension_type_urls)
  return _internal_advanced_extension_type_urls();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* Capabilities::mutable_advanced_extension_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.advanced_extension_type_urls)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_advanced_extension_type_urls();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Capabilities::_internal_advanced_extension_type_urls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.advanced_extension_type_urls_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Capabilities::_internal_mutable_advanced_extension_type_urls() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.advanced_extension_type_urls_;
}

// repeated .substrait.Capabilities.SimpleExtension simple_extensions = 3 [json_name = "simpleExtensions"];
inline int Capabilities::_internal_simple_extensions_size() const {
  return _internal_simple_extensions().size();
}
inline int Capabilities::simple_extensions_size() const {
  return _internal_simple_extensions_size();
}
inline void Capabilities::clear_simple_extensions() {
  _internal_mutable_simple_extensions()->Clear();
}
inline ::substrait::Capabilities_SimpleExtension* Capabilities::mutable_simple_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Capabilities.simple_extensions)
  return _internal_mutable_simple_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >*
Capabilities::mutable_simple_extensions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Capabilities.simple_extensions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_simple_extensions();
}
inline const ::substrait::Capabilities_SimpleExtension& Capabilities::simple_extensions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Capabilities.simple_extensions)
    return _internal_simple_extensions().Get(index);
}
inline ::substrait::Capabilities_SimpleExtension* Capabilities::add_simple_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::substrait::Capabilities_SimpleExtension* _add = _internal_mutable_simple_extensions()->Add();
  // @@protoc_insertion_point(field_add:substrait.Capabilities.simple_extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::substrait::Capabilities_SimpleExtension >&
Capabilities::simple_extensions() const {
  // @@protoc_insertion_point(field_list:substrait.Capabilities.simple_extensions)
  return _internal_simple_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::substrait::Capabilities_SimpleExtension>&
Capabilities::_internal_simple_extensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.simple_extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::substrait::Capabilities_SimpleExtension>*
Capabilities::_internal_mutable_simple_extensions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.simple_extensions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_substrait_2fcapabilities_2eproto_2epb_2eh
