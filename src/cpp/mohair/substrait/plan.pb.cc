// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/plan.proto

#include "substrait/plan.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace substrait {
PROTOBUF_CONSTEXPR PlanRel::PlanRel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rel_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PlanRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanRelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanRelDefaultTypeInternal() {}
  union {
    PlanRel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanRelDefaultTypeInternal _PlanRel_default_instance_;
PROTOBUF_CONSTEXPR Plan::Plan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extension_uris_)*/{}
  , /*decltype(_impl_.extensions_)*/{}
  , /*decltype(_impl_.relations_)*/{}
  , /*decltype(_impl_.expected_type_urls_)*/{}
  , /*decltype(_impl_.advanced_extensions_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr} {}
struct PlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDefaultTypeInternal() {}
  union {
    Plan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDefaultTypeInternal _Plan_default_instance_;
PROTOBUF_CONSTEXPR PlanVersion::PlanVersion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.version_)*/nullptr} {}
struct PlanVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanVersionDefaultTypeInternal() {}
  union {
    PlanVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanVersionDefaultTypeInternal _PlanVersion_default_instance_;
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.git_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.producer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.major_number_)*/ 0u

  , /*decltype(_impl_.minor_number_)*/ 0u

  , /*decltype(_impl_.patch_number_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2fplan_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_substrait_2fplan_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_substrait_2fplan_2eproto = nullptr;
const ::uint32_t TableStruct_substrait_2fplan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_.rel_type_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.extension_uris_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.extensions_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.relations_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.advanced_extensions_),
    PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.expected_type_urls_),
    1,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _impl_.version_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.major_number_),
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.minor_number_),
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.patch_number_),
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.git_hash_),
    PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.producer_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::substrait::PlanRel)},
        { 11, 25, -1, sizeof(::substrait::Plan)},
        { 31, 40, -1, sizeof(::substrait::PlanVersion)},
        { 41, -1, -1, sizeof(::substrait::Version)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::substrait::_PlanRel_default_instance_._instance,
    &::substrait::_Plan_default_instance_._instance,
    &::substrait::_PlanVersion_default_instance_._instance,
    &::substrait::_Version_default_instance_._instance,
};
const char descriptor_table_protodef_substrait_2fplan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024substrait/plan.proto\022\tsubstrait\032\027subst"
    "rait/algebra.proto\032%substrait/extensions"
    "/extensions.proto\"c\n\007PlanRel\022\"\n\003rel\030\001 \001("
    "\0132\016.substrait.RelH\000R\003rel\022(\n\004root\030\002 \001(\0132\022"
    ".substrait.RelRootH\000R\004rootB\n\n\010rel_type\"\221"
    "\003\n\004Plan\022,\n\007version\030\006 \001(\0132\022.substrait.Ver"
    "sionR\007version\022O\n\016extension_uris\030\001 \003(\0132(."
    "substrait.extensions.SimpleExtensionURIR"
    "\rextensionUris\022P\n\nextensions\030\002 \003(\01320.sub"
    "strait.extensions.SimpleExtensionDeclara"
    "tionR\nextensions\0220\n\trelations\030\003 \003(\0132\022.su"
    "bstrait.PlanRelR\trelations\022X\n\023advanced_e"
    "xtensions\030\004 \001(\0132\'.substrait.extensions.A"
    "dvancedExtensionR\022advancedExtensions\022,\n\022"
    "expected_type_urls\030\005 \003(\tR\020expectedTypeUr"
    "ls\";\n\013PlanVersion\022,\n\007version\030\006 \001(\0132\022.sub"
    "strait.VersionR\007version\"\251\001\n\007Version\022!\n\014m"
    "ajor_number\030\001 \001(\rR\013majorNumber\022!\n\014minor_"
    "number\030\002 \001(\rR\013minorNumber\022!\n\014patch_numbe"
    "r\030\003 \001(\rR\013patchNumber\022\031\n\010git_hash\030\004 \001(\tR\007"
    "gitHash\022\032\n\010producer\030\005 \001(\tR\010producerB\212\001\n\r"
    "com.substraitB\tPlanProtoP\001Z*github.com/s"
    "ubstrait-io/substrait-go/proto\242\002\003SXX\252\002\tS"
    "ubstrait\312\002\tSubstrait\342\002\025Substrait\\GPBMeta"
    "data\352\002\tSubstraitb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2fplan_2eproto_deps[2] =
    {
        &::descriptor_table_substrait_2falgebra_2eproto,
        &::descriptor_table_substrait_2fextensions_2fextensions_2eproto,
};
static ::absl::once_flag descriptor_table_substrait_2fplan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2fplan_2eproto = {
    false,
    false,
    984,
    descriptor_table_protodef_substrait_2fplan_2eproto,
    "substrait/plan.proto",
    &descriptor_table_substrait_2fplan_2eproto_once,
    descriptor_table_substrait_2fplan_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_substrait_2fplan_2eproto::offsets,
    file_level_metadata_substrait_2fplan_2eproto,
    file_level_enum_descriptors_substrait_2fplan_2eproto,
    file_level_service_descriptors_substrait_2fplan_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2fplan_2eproto_getter() {
  return &descriptor_table_substrait_2fplan_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2fplan_2eproto(&descriptor_table_substrait_2fplan_2eproto);
namespace substrait {
// ===================================================================

class PlanRel::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_._oneof_case_);
  static const ::substrait::Rel& rel(const PlanRel* msg);
  static const ::substrait::RelRoot& root(const PlanRel* msg);
};

const ::substrait::Rel&
PlanRel::_Internal::rel(const PlanRel* msg) {
  return *msg->_impl_.rel_type_.rel_;
}
const ::substrait::RelRoot&
PlanRel::_Internal::root(const PlanRel* msg) {
  return *msg->_impl_.rel_type_.root_;
}
void PlanRel::set_allocated_rel(::substrait::Rel* rel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (rel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rel));
    if (message_arena != submessage_arena) {
      rel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rel, submessage_arena);
    }
    set_has_rel();
    _impl_.rel_type_.rel_ = rel;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.rel)
}
void PlanRel::clear_rel() {
  if (rel_type_case() == kRel) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.rel_;
    }
    clear_has_rel_type();
  }
}
void PlanRel::set_allocated_root(::substrait::RelRoot* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_rel_type();
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root));
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    set_has_root();
    _impl_.rel_type_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.root)
}
void PlanRel::clear_root() {
  if (rel_type_case() == kRoot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.rel_type_.root_;
    }
    clear_has_rel_type();
  }
}
PlanRel::PlanRel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.PlanRel)
}
PlanRel::PlanRel(const PlanRel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlanRel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rel_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_rel_type();
  switch (from.rel_type_case()) {
    case kRel: {
      _this->_internal_mutable_rel()->::substrait::Rel::MergeFrom(
          from._internal_rel());
      break;
    }
    case kRoot: {
      _this->_internal_mutable_root()->::substrait::RelRoot::MergeFrom(
          from._internal_root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.PlanRel)
}

inline void PlanRel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.rel_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_rel_type();
}

PlanRel::~PlanRel() {
  // @@protoc_insertion_point(destructor:substrait.PlanRel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanRel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
}

void PlanRel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanRel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.PlanRel)
  switch (rel_type_case()) {
    case kRel: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.rel_;
      }
      break;
    }
    case kRoot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.rel_type_.root_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}


void PlanRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanRel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanRel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Rel rel = 1 [json_name = "rel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_rel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.RelRoot root = 2 [json_name = "root"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlanRel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanRel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (rel_type_case()) {
    case kRel: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::rel(this),
          _Internal::rel(this).GetCachedSize(), target, stream);
      break;
    }
    case kRoot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::root(this),
          _Internal::root(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanRel)
  return target;
}

::size_t PlanRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanRel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.Rel rel = 1 [json_name = "rel"];
    case kRel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.rel_);
      break;
    }
    // .substrait.RelRoot root = 2 [json_name = "root"];
    case kRoot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rel_type_.root_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanRel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlanRel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanRel::GetClassData() const { return &_class_data_; }


void PlanRel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlanRel*>(&to_msg);
  auto& from = static_cast<const PlanRel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanRel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.rel_type_case()) {
    case kRel: {
      _this->_internal_mutable_rel()->::substrait::Rel::MergeFrom(
          from._internal_rel());
      break;
    }
    case kRoot: {
      _this->_internal_mutable_root()->::substrait::RelRoot::MergeFrom(
          from._internal_root());
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanRel::CopyFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanRel::IsInitialized() const {
  return true;
}

void PlanRel::InternalSwap(PlanRel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rel_type_, other->_impl_.rel_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fplan_2eproto_getter, &descriptor_table_substrait_2fplan_2eproto_once,
      file_level_metadata_substrait_2fplan_2eproto[0]);
}
// ===================================================================

class Plan::_Internal {
 public:
  using HasBits = decltype(std::declval<Plan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_);
  static const ::substrait::Version& version(const Plan* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::substrait::extensions::AdvancedExtension& advanced_extensions(const Plan* msg);
  static void set_has_advanced_extensions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::substrait::Version&
Plan::_Internal::version(const Plan* msg) {
  return *msg->_impl_.version_;
}
const ::substrait::extensions::AdvancedExtension&
Plan::_Internal::advanced_extensions(const Plan* msg) {
  return *msg->_impl_.advanced_extensions_;
}
void Plan::clear_extension_uris() {
  _internal_mutable_extension_uris()->Clear();
}
void Plan::clear_extensions() {
  _internal_mutable_extensions()->Clear();
}
void Plan::clear_advanced_extensions() {
  if (_impl_.advanced_extensions_ != nullptr) _impl_.advanced_extensions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Plan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extension_uris_){from._impl_.extension_uris_}
    , decltype(_impl_.extensions_){from._impl_.extensions_}
    , decltype(_impl_.relations_){from._impl_.relations_}
    , decltype(_impl_.expected_type_urls_){from._impl_.expected_type_urls_}
    , decltype(_impl_.advanced_extensions_){nullptr}
    , decltype(_impl_.version_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.advanced_extensions_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extensions_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.version_ = new ::substrait::Version(*from._impl_.version_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Plan)
}

inline void Plan::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extension_uris_){arena}
    , decltype(_impl_.extensions_){arena}
    , decltype(_impl_.relations_){arena}
    , decltype(_impl_.expected_type_urls_){arena}
    , decltype(_impl_.advanced_extensions_){nullptr}
    , decltype(_impl_.version_){nullptr}
  };
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:substrait.Plan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Plan::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_extension_uris()->~RepeatedPtrField();
  _internal_mutable_extensions()->~RepeatedPtrField();
  _internal_mutable_relations()->~RepeatedPtrField();
  _internal_mutable_expected_type_urls()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.advanced_extensions_;
  if (this != internal_default_instance()) delete _impl_.version_;
}

void Plan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Plan)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_extension_uris()->Clear();
  _internal_mutable_extensions()->Clear();
  _internal_mutable_relations()->Clear();
  _internal_mutable_expected_type_urls()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.advanced_extensions_ != nullptr);
      _impl_.advanced_extensions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extensions(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_type_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.Plan.expected_type_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Version version = 6 [json_name = "version"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Plan::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Plan)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_uris_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension_uris(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_extensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relations_size()); i < n; i++) {
    const auto& repfield = this->_internal_relations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::advanced_extensions(this),
        _Internal::advanced_extensions(this).GetCachedSize(), target, stream);
  }

  // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
  for (int i = 0, n = this->_internal_expected_type_urls_size(); i < n; ++i) {
    const auto& s = this->_internal_expected_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Plan.expected_type_urls");
    target = stream->WriteString(5, s, target);
  }

  // .substrait.Version version = 6 [json_name = "version"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Plan)
  return target;
}

::size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Plan)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
  total_size += 1UL * this->_internal_extension_uris_size();
  for (const auto& msg : this->_internal_extension_uris()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->_internal_extensions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->_internal_relations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_expected_type_urls().size());
  for (int i = 0, n = _internal_expected_type_urls().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_expected_type_urls().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.advanced_extensions_);
    }

    // .substrait.Version version = 6 [json_name = "version"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Plan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plan::GetClassData() const { return &_class_data_; }


void Plan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Plan*>(&to_msg);
  auto& from = static_cast<const Plan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Plan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension_uris()->MergeFrom(from._internal_extension_uris());
  _this->_internal_mutable_extensions()->MergeFrom(from._internal_extensions());
  _this->_internal_mutable_relations()->MergeFrom(from._internal_relations());
  _this->_internal_mutable_expected_type_urls()->MergeFrom(from._internal_expected_type_urls());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_advanced_extensions()->::substrait::extensions::AdvancedExtension::MergeFrom(
          from._internal_advanced_extensions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version()->::substrait::Version::MergeFrom(
          from._internal_version());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_extension_uris()->InternalSwap(other->_internal_mutable_extension_uris());
  _internal_mutable_extensions()->InternalSwap(other->_internal_mutable_extensions());
  _internal_mutable_relations()->InternalSwap(other->_internal_mutable_relations());
  _internal_mutable_expected_type_urls()->InternalSwap(
      other->_internal_mutable_expected_type_urls());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.version_)
      + sizeof(Plan::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Plan, _impl_.advanced_extensions_)>(
          reinterpret_cast<char*>(&_impl_.advanced_extensions_),
          reinterpret_cast<char*>(&other->_impl_.advanced_extensions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fplan_2eproto_getter, &descriptor_table_substrait_2fplan_2eproto_once,
      file_level_metadata_substrait_2fplan_2eproto[1]);
}
// ===================================================================

class PlanVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanVersion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_._has_bits_);
  static const ::substrait::Version& version(const PlanVersion* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::substrait::Version&
PlanVersion::_Internal::version(const PlanVersion* msg) {
  return *msg->_impl_.version_;
}
PlanVersion::PlanVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.PlanVersion)
}
PlanVersion::PlanVersion(const PlanVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlanVersion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.version_ = new ::substrait::Version(*from._impl_.version_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.PlanVersion)
}

inline void PlanVersion::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.version_){nullptr}
  };
}

PlanVersion::~PlanVersion() {
  // @@protoc_insertion_point(destructor:substrait.PlanVersion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanVersion::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.version_;
}

void PlanVersion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlanVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanVersion)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.version_ != nullptr);
    _impl_.version_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanVersion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Version version = 6 [json_name = "version"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PlanVersion::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanVersion)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Version version = 6 [json_name = "version"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanVersion)
  return target;
}

::size_t PlanVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Version version = 6 [json_name = "version"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlanVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanVersion::GetClassData() const { return &_class_data_; }


void PlanVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlanVersion*>(&to_msg);
  auto& from = static_cast<const PlanVersion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_version()->::substrait::Version::MergeFrom(
        from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanVersion::CopyFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanVersion::IsInitialized() const {
  return true;
}

void PlanVersion::InternalSwap(PlanVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fplan_2eproto_getter, &descriptor_table_substrait_2fplan_2eproto_once,
      file_level_metadata_substrait_2fplan_2eproto[2]);
}
// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.git_hash_) {}

    , decltype(_impl_.producer_) {}

    , decltype(_impl_.major_number_) {}

    , decltype(_impl_.minor_number_) {}

    , decltype(_impl_.patch_number_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.git_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.git_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_hash().empty()) {
    _this->_impl_.git_hash_.Set(from._internal_git_hash(), _this->GetArenaForAllocation());
  }
  _impl_.producer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_producer().empty()) {
    _this->_impl_.producer_.Set(from._internal_producer(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.major_number_, &from._impl_.major_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.patch_number_) -
    reinterpret_cast<char*>(&_impl_.major_number_)) + sizeof(_impl_.patch_number_));
  // @@protoc_insertion_point(copy_constructor:substrait.Version)
}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.git_hash_) {}

    , decltype(_impl_.producer_) {}

    , decltype(_impl_.major_number_) { 0u }

    , decltype(_impl_.minor_number_) { 0u }

    , decltype(_impl_.patch_number_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.git_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.git_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.producer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.producer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:substrait.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.git_hash_.Destroy();
  _impl_.producer_.Destroy();
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Version)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.git_hash_.ClearToEmpty();
  _impl_.producer_.ClearToEmpty();
  ::memset(&_impl_.major_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.patch_number_) -
      reinterpret_cast<char*>(&_impl_.major_number_)) + sizeof(_impl_.patch_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major_number = 1 [json_name = "majorNumber"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.major_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 minor_number = 2 [json_name = "minorNumber"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.minor_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 patch_number = 3 [json_name = "patchNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.patch_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string git_hash = 4 [json_name = "gitHash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_git_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Version.git_hash"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string producer = 5 [json_name = "producer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_producer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Version.producer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Version)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major_number = 1 [json_name = "majorNumber"];
  if (this->_internal_major_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_major_number(), target);
  }

  // uint32 minor_number = 2 [json_name = "minorNumber"];
  if (this->_internal_minor_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_minor_number(), target);
  }

  // uint32 patch_number = 3 [json_name = "patchNumber"];
  if (this->_internal_patch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_patch_number(), target);
  }

  // string git_hash = 4 [json_name = "gitHash"];
  if (!this->_internal_git_hash().empty()) {
    const std::string& _s = this->_internal_git_hash();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Version.git_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string producer = 5 [json_name = "producer"];
  if (!this->_internal_producer().empty()) {
    const std::string& _s = this->_internal_producer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Version.producer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string git_hash = 4 [json_name = "gitHash"];
  if (!this->_internal_git_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_git_hash());
  }

  // string producer = 5 [json_name = "producer"];
  if (!this->_internal_producer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_producer());
  }

  // uint32 major_number = 1 [json_name = "majorNumber"];
  if (this->_internal_major_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_major_number());
  }

  // uint32 minor_number = 2 [json_name = "minorNumber"];
  if (this->_internal_minor_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_minor_number());
  }

  // uint32 patch_number = 3 [json_name = "patchNumber"];
  if (this->_internal_patch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_patch_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_git_hash().empty()) {
    _this->_internal_set_git_hash(from._internal_git_hash());
  }
  if (!from._internal_producer().empty()) {
    _this->_internal_set_producer(from._internal_producer());
  }
  if (from._internal_major_number() != 0) {
    _this->_internal_set_major_number(from._internal_major_number());
  }
  if (from._internal_minor_number() != 0) {
    _this->_internal_set_minor_number(from._internal_minor_number());
  }
  if (from._internal_patch_number() != 0) {
    _this->_internal_set_patch_number(from._internal_patch_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.git_hash_, lhs_arena,
                                       &other->_impl_.git_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_, lhs_arena,
                                       &other->_impl_.producer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_number_)
      + sizeof(Version::_impl_.patch_number_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_number_)>(
          reinterpret_cast<char*>(&_impl_.major_number_),
          reinterpret_cast<char*>(&other->_impl_.major_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fplan_2eproto_getter, &descriptor_table_substrait_2fplan_2eproto_once,
      file_level_metadata_substrait_2fplan_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::PlanRel*
Arena::CreateMaybeMessage< ::substrait::PlanRel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::PlanRel >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Plan*
Arena::CreateMaybeMessage< ::substrait::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::PlanVersion*
Arena::CreateMaybeMessage< ::substrait::PlanVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::PlanVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Version*
Arena::CreateMaybeMessage< ::substrait::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Version >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
