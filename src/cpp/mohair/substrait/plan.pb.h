// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/plan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2fplan_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2fplan_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "algebra.pb.h"
#include "extensions/extensions.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_substrait_2fplan_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fplan_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_substrait_2fplan_2eproto;
namespace substrait {
class Plan;
struct PlanDefaultTypeInternal;
extern PlanDefaultTypeInternal _Plan_default_instance_;
class PlanRel;
struct PlanRelDefaultTypeInternal;
extern PlanRelDefaultTypeInternal _PlanRel_default_instance_;
class PlanVersion;
struct PlanVersionDefaultTypeInternal;
extern PlanVersionDefaultTypeInternal _PlanVersion_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template <>
::substrait::Plan* Arena::CreateMaybeMessage<::substrait::Plan>(Arena*);
template <>
::substrait::PlanRel* Arena::CreateMaybeMessage<::substrait::PlanRel>(Arena*);
template <>
::substrait::PlanVersion* Arena::CreateMaybeMessage<::substrait::PlanVersion>(Arena*);
template <>
::substrait::Version* Arena::CreateMaybeMessage<::substrait::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace substrait {

// ===================================================================


// -------------------------------------------------------------------

class PlanRel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.PlanRel) */ {
 public:
  inline PlanRel() : PlanRel(nullptr) {}
  ~PlanRel() override;
  explicit PROTOBUF_CONSTEXPR PlanRel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanRel(const PlanRel& from);
  PlanRel(PlanRel&& from) noexcept
    : PlanRel() {
    *this = ::std::move(from);
  }

  inline PlanRel& operator=(const PlanRel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanRel& operator=(PlanRel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanRel& default_instance() {
    return *internal_default_instance();
  }
  enum RelTypeCase {
    kRel = 1,
    kRoot = 2,
    REL_TYPE_NOT_SET = 0,
  };

  static inline const PlanRel* internal_default_instance() {
    return reinterpret_cast<const PlanRel*>(
               &_PlanRel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlanRel& a, PlanRel& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanRel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanRel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanRel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanRel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanRel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanRel& from) {
    PlanRel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanRel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.PlanRel";
  }
  protected:
  explicit PlanRel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // .substrait.Rel rel = 1 [json_name = "rel"];
  bool has_rel() const;
  private:
  bool _internal_has_rel() const;

  public:
  void clear_rel() ;
  const ::substrait::Rel& rel() const;
  PROTOBUF_NODISCARD ::substrait::Rel* release_rel();
  ::substrait::Rel* mutable_rel();
  void set_allocated_rel(::substrait::Rel* rel);
  private:
  const ::substrait::Rel& _internal_rel() const;
  ::substrait::Rel* _internal_mutable_rel();
  public:
  void unsafe_arena_set_allocated_rel(
      ::substrait::Rel* rel);
  ::substrait::Rel* unsafe_arena_release_rel();
  // .substrait.RelRoot root = 2 [json_name = "root"];
  bool has_root() const;
  private:
  bool _internal_has_root() const;

  public:
  void clear_root() ;
  const ::substrait::RelRoot& root() const;
  PROTOBUF_NODISCARD ::substrait::RelRoot* release_root();
  ::substrait::RelRoot* mutable_root();
  void set_allocated_root(::substrait::RelRoot* root);
  private:
  const ::substrait::RelRoot& _internal_root() const;
  ::substrait::RelRoot* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::substrait::RelRoot* root);
  ::substrait::RelRoot* unsafe_arena_release_root();
  void clear_rel_type();
  RelTypeCase rel_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.PlanRel)
 private:
  class _Internal;
  void set_has_rel();
  void set_has_root();

  inline bool has_rel_type() const;
  inline void clear_has_rel_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RelTypeUnion {
      constexpr RelTypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::substrait::Rel* rel_;
      ::substrait::RelRoot* root_;
    } rel_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};// -------------------------------------------------------------------

class Plan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Plan) */ {
 public:
  inline Plan() : Plan(nullptr) {}
  ~Plan() override;
  explicit PROTOBUF_CONSTEXPR Plan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Plan(const Plan& from);
  Plan(Plan&& from) noexcept
    : Plan() {
    *this = ::std::move(from);
  }

  inline Plan& operator=(const Plan& from) {
    CopyFrom(from);
    return *this;
  }
  inline Plan& operator=(Plan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Plan& default_instance() {
    return *internal_default_instance();
  }
  static inline const Plan* internal_default_instance() {
    return reinterpret_cast<const Plan*>(
               &_Plan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Plan& a, Plan& b) {
    a.Swap(&b);
  }
  inline void Swap(Plan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Plan* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Plan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Plan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Plan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Plan& from) {
    Plan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Plan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Plan";
  }
  protected:
  explicit Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionUrisFieldNumber = 1,
    kExtensionsFieldNumber = 2,
    kRelationsFieldNumber = 3,
    kExpectedTypeUrlsFieldNumber = 5,
    kAdvancedExtensionsFieldNumber = 4,
    kVersionFieldNumber = 6,
  };
  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
  int extension_uris_size() const;
  private:
  int _internal_extension_uris_size() const;

  public:
  void clear_extension_uris() ;
  ::substrait::extensions::SimpleExtensionURI* mutable_extension_uris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
      mutable_extension_uris();
  private:
  const ::substrait::extensions::SimpleExtensionURI& _internal_extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* _internal_add_extension_uris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>& _internal_extension_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>* _internal_mutable_extension_uris();
  public:
  const ::substrait::extensions::SimpleExtensionURI& extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* add_extension_uris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
      extension_uris() const;
  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;

  public:
  void clear_extensions() ;
  ::substrait::extensions::SimpleExtensionDeclaration* mutable_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
      mutable_extensions();
  private:
  const ::substrait::extensions::SimpleExtensionDeclaration& _internal_extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* _internal_add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>& _internal_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>* _internal_mutable_extensions();
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration& extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
      extensions() const;
  // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
  int relations_size() const;
  private:
  int _internal_relations_size() const;

  public:
  void clear_relations() ;
  ::substrait::PlanRel* mutable_relations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::PlanRel >*
      mutable_relations();
  private:
  const ::substrait::PlanRel& _internal_relations(int index) const;
  ::substrait::PlanRel* _internal_add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::PlanRel>& _internal_relations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::PlanRel>* _internal_mutable_relations();
  public:
  const ::substrait::PlanRel& relations(int index) const;
  ::substrait::PlanRel* add_relations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::PlanRel >&
      relations() const;
  // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
  int expected_type_urls_size() const;
  private:
  int _internal_expected_type_urls_size() const;

  public:
  void clear_expected_type_urls() ;
  const std::string& expected_type_urls(int index) const;
  std::string* mutable_expected_type_urls(int index);
  void set_expected_type_urls(int index, const std::string& value);
  void set_expected_type_urls(int index, std::string&& value);
  void set_expected_type_urls(int index, const char* value);
  void set_expected_type_urls(int index, const char* value, std::size_t size);
  void set_expected_type_urls(int index, absl::string_view value);
  std::string* add_expected_type_urls();
  void add_expected_type_urls(const std::string& value);
  void add_expected_type_urls(std::string&& value);
  void add_expected_type_urls(const char* value);
  void add_expected_type_urls(const char* value, std::size_t size);
  void add_expected_type_urls(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& expected_type_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_expected_type_urls();

  private:
  const std::string& _internal_expected_type_urls(int index) const;
  std::string* _internal_add_expected_type_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_expected_type_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_expected_type_urls();

  public:
  // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
  bool has_advanced_extensions() const;
  void clear_advanced_extensions() ;
  const ::substrait::extensions::AdvancedExtension& advanced_extensions() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extensions();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extensions();
  void set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extensions() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extensions();
  public:
  void unsafe_arena_set_allocated_advanced_extensions(
      ::substrait::extensions::AdvancedExtension* advanced_extensions);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extensions();
  // .substrait.Version version = 6 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const ::substrait::Version& version() const;
  PROTOBUF_NODISCARD ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* version);
  private:
  const ::substrait::Version& _internal_version() const;
  ::substrait::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::substrait::Version* version);
  ::substrait::Version* unsafe_arena_release_version();
  // @@protoc_insertion_point(class_scope:substrait.Plan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI > extension_uris_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration > extensions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::PlanRel > relations_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> expected_type_urls_;
    ::substrait::extensions::AdvancedExtension* advanced_extensions_;
    ::substrait::Version* version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};// -------------------------------------------------------------------

class PlanVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.PlanVersion) */ {
 public:
  inline PlanVersion() : PlanVersion(nullptr) {}
  ~PlanVersion() override;
  explicit PROTOBUF_CONSTEXPR PlanVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlanVersion(const PlanVersion& from);
  PlanVersion(PlanVersion&& from) noexcept
    : PlanVersion() {
    *this = ::std::move(from);
  }

  inline PlanVersion& operator=(const PlanVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanVersion& operator=(PlanVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlanVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlanVersion* internal_default_instance() {
    return reinterpret_cast<const PlanVersion*>(
               &_PlanVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanVersion& a, PlanVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlanVersion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlanVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlanVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlanVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlanVersion& from) {
    PlanVersion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.PlanVersion";
  }
  protected:
  explicit PlanVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 6,
  };
  // .substrait.Version version = 6 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const ::substrait::Version& version() const;
  PROTOBUF_NODISCARD ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* version);
  private:
  const ::substrait::Version& _internal_version() const;
  ::substrait::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::substrait::Version* version);
  ::substrait::Version* unsafe_arena_release_version();
  // @@protoc_insertion_point(class_scope:substrait.PlanVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::substrait::Version* version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "substrait.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGitHashFieldNumber = 4,
    kProducerFieldNumber = 5,
    kMajorNumberFieldNumber = 1,
    kMinorNumberFieldNumber = 2,
    kPatchNumberFieldNumber = 3,
  };
  // string git_hash = 4 [json_name = "gitHash"];
  void clear_git_hash() ;
  const std::string& git_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_git_hash(Arg_&& arg, Args_... args);
  std::string* mutable_git_hash();
  PROTOBUF_NODISCARD std::string* release_git_hash();
  void set_allocated_git_hash(std::string* ptr);

  private:
  const std::string& _internal_git_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_git_hash(
      const std::string& value);
  std::string* _internal_mutable_git_hash();

  public:
  // string producer = 5 [json_name = "producer"];
  void clear_producer() ;
  const std::string& producer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_producer(Arg_&& arg, Args_... args);
  std::string* mutable_producer();
  PROTOBUF_NODISCARD std::string* release_producer();
  void set_allocated_producer(std::string* ptr);

  private:
  const std::string& _internal_producer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_producer(
      const std::string& value);
  std::string* _internal_mutable_producer();

  public:
  // uint32 major_number = 1 [json_name = "majorNumber"];
  void clear_major_number() ;
  ::uint32_t major_number() const;
  void set_major_number(::uint32_t value);

  private:
  ::uint32_t _internal_major_number() const;
  void _internal_set_major_number(::uint32_t value);

  public:
  // uint32 minor_number = 2 [json_name = "minorNumber"];
  void clear_minor_number() ;
  ::uint32_t minor_number() const;
  void set_minor_number(::uint32_t value);

  private:
  ::uint32_t _internal_minor_number() const;
  void _internal_set_minor_number(::uint32_t value);

  public:
  // uint32 patch_number = 3 [json_name = "patchNumber"];
  void clear_patch_number() ;
  ::uint32_t patch_number() const;
  void set_patch_number(::uint32_t value);

  private:
  ::uint32_t _internal_patch_number() const;
  void _internal_set_patch_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:substrait.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr git_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_;
    ::uint32_t major_number_;
    ::uint32_t minor_number_;
    ::uint32_t patch_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_substrait_2fplan_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PlanRel

// .substrait.Rel rel = 1 [json_name = "rel"];
inline bool PlanRel::has_rel() const {
  return rel_type_case() == kRel;
}
inline bool PlanRel::_internal_has_rel() const {
  return rel_type_case() == kRel;
}
inline void PlanRel::set_has_rel() {
  _impl_._oneof_case_[0] = kRel;
}
inline ::substrait::Rel* PlanRel::release_rel() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.rel)
  if (rel_type_case() == kRel) {
    clear_has_rel_type();
    ::substrait::Rel* temp = _impl_.rel_type_.rel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.rel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Rel& PlanRel::_internal_rel() const {
  return rel_type_case() == kRel
      ? *_impl_.rel_type_.rel_
      : reinterpret_cast<::substrait::Rel&>(::substrait::_Rel_default_instance_);
}
inline const ::substrait::Rel& PlanRel::rel() const {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.rel)
  return _internal_rel();
}
inline ::substrait::Rel* PlanRel::unsafe_arena_release_rel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.PlanRel.rel)
  if (rel_type_case() == kRel) {
    clear_has_rel_type();
    ::substrait::Rel* temp = _impl_.rel_type_.rel_;
    _impl_.rel_type_.rel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanRel::unsafe_arena_set_allocated_rel(::substrait::Rel* rel) {
  clear_rel_type();
  if (rel) {
    set_has_rel();
    _impl_.rel_type_.rel_ = rel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanRel.rel)
}
inline ::substrait::Rel* PlanRel::_internal_mutable_rel() {
  if (rel_type_case() != kRel) {
    clear_rel_type();
    set_has_rel();
    _impl_.rel_type_.rel_ = CreateMaybeMessage< ::substrait::Rel >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.rel_;
}
inline ::substrait::Rel* PlanRel::mutable_rel() {
  ::substrait::Rel* _msg = _internal_mutable_rel();
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.rel)
  return _msg;
}

// .substrait.RelRoot root = 2 [json_name = "root"];
inline bool PlanRel::has_root() const {
  return rel_type_case() == kRoot;
}
inline bool PlanRel::_internal_has_root() const {
  return rel_type_case() == kRoot;
}
inline void PlanRel::set_has_root() {
  _impl_._oneof_case_[0] = kRoot;
}
inline ::substrait::RelRoot* PlanRel::release_root() {
  // @@protoc_insertion_point(field_release:substrait.PlanRel.root)
  if (rel_type_case() == kRoot) {
    clear_has_rel_type();
    ::substrait::RelRoot* temp = _impl_.rel_type_.root_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.rel_type_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::RelRoot& PlanRel::_internal_root() const {
  return rel_type_case() == kRoot
      ? *_impl_.rel_type_.root_
      : reinterpret_cast<::substrait::RelRoot&>(::substrait::_RelRoot_default_instance_);
}
inline const ::substrait::RelRoot& PlanRel::root() const {
  // @@protoc_insertion_point(field_get:substrait.PlanRel.root)
  return _internal_root();
}
inline ::substrait::RelRoot* PlanRel::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.PlanRel.root)
  if (rel_type_case() == kRoot) {
    clear_has_rel_type();
    ::substrait::RelRoot* temp = _impl_.rel_type_.root_;
    _impl_.rel_type_.root_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlanRel::unsafe_arena_set_allocated_root(::substrait::RelRoot* root) {
  clear_rel_type();
  if (root) {
    set_has_root();
    _impl_.rel_type_.root_ = root;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanRel.root)
}
inline ::substrait::RelRoot* PlanRel::_internal_mutable_root() {
  if (rel_type_case() != kRoot) {
    clear_rel_type();
    set_has_root();
    _impl_.rel_type_.root_ = CreateMaybeMessage< ::substrait::RelRoot >(GetArenaForAllocation());
  }
  return _impl_.rel_type_.root_;
}
inline ::substrait::RelRoot* PlanRel::mutable_root() {
  ::substrait::RelRoot* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:substrait.PlanRel.root)
  return _msg;
}

inline bool PlanRel::has_rel_type() const {
  return rel_type_case() != REL_TYPE_NOT_SET;
}
inline void PlanRel::clear_has_rel_type() {
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}
inline PlanRel::RelTypeCase PlanRel::rel_type_case() const {
  return PlanRel::RelTypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Plan

// .substrait.Version version = 6 [json_name = "version"];
inline bool Plan::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void Plan::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::substrait::Version& Plan::_internal_version() const {
  const ::substrait::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Version&>(
      ::substrait::_Version_default_instance_);
}
inline const ::substrait::Version& Plan::version() const {
  // @@protoc_insertion_point(field_get:substrait.Plan.version)
  return _internal_version();
}
inline void Plan::unsafe_arena_set_allocated_version(
    ::substrait::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Plan.version)
}
inline ::substrait::Version* Plan::release_version() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Version* Plan::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:substrait.Plan.version)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::substrait::Version* Plan::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Version>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::substrait::Version* Plan::mutable_version() {
  ::substrait::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:substrait.Plan.version)
  return _msg;
}
inline void Plan::set_allocated_version(::substrait::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.version)
}

// repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
inline int Plan::_internal_extension_uris_size() const {
  return _impl_.extension_uris_.size();
}
inline int Plan::extension_uris_size() const {
  return _internal_extension_uris_size();
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::mutable_extension_uris(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extension_uris)
  return _internal_mutable_extension_uris()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
Plan::mutable_extension_uris() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extension_uris)
  return _internal_mutable_extension_uris();
}
inline const ::substrait::extensions::SimpleExtensionURI& Plan::_internal_extension_uris(int index) const {
  return _internal_extension_uris().Get(index);
}
inline const ::substrait::extensions::SimpleExtensionURI& Plan::extension_uris(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.extension_uris)
  return _internal_extension_uris(index);
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::_internal_add_extension_uris() {
  return _internal_mutable_extension_uris()->Add();
}
inline ::substrait::extensions::SimpleExtensionURI* Plan::add_extension_uris() {
  ::substrait::extensions::SimpleExtensionURI* _add = _internal_add_extension_uris();
  // @@protoc_insertion_point(field_add:substrait.Plan.extension_uris)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
Plan::extension_uris() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.extension_uris)
  return _internal_extension_uris();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>&
Plan::_internal_extension_uris() const {
  return _impl_.extension_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionURI>*
Plan::_internal_mutable_extension_uris() {
  return &_impl_.extension_uris_;
}

// repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
inline int Plan::_internal_extensions_size() const {
  return _impl_.extensions_.size();
}
inline int Plan::extensions_size() const {
  return _internal_extensions_size();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.extensions)
  return _internal_mutable_extensions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
Plan::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.extensions)
  return _internal_mutable_extensions();
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& Plan::_internal_extensions(int index) const {
  return _internal_extensions().Get(index);
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& Plan::extensions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.extensions)
  return _internal_extensions(index);
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::_internal_add_extensions() {
  return _internal_mutable_extensions()->Add();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* Plan::add_extensions() {
  ::substrait::extensions::SimpleExtensionDeclaration* _add = _internal_add_extensions();
  // @@protoc_insertion_point(field_add:substrait.Plan.extensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
Plan::extensions() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.extensions)
  return _internal_extensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>&
Plan::_internal_extensions() const {
  return _impl_.extensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::extensions::SimpleExtensionDeclaration>*
Plan::_internal_mutable_extensions() {
  return &_impl_.extensions_;
}

// repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
inline int Plan::_internal_relations_size() const {
  return _impl_.relations_.size();
}
inline int Plan::relations_size() const {
  return _internal_relations_size();
}
inline void Plan::clear_relations() {
  _internal_mutable_relations()->Clear();
}
inline ::substrait::PlanRel* Plan::mutable_relations(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.relations)
  return _internal_mutable_relations()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::PlanRel >*
Plan::mutable_relations() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.relations)
  return _internal_mutable_relations();
}
inline const ::substrait::PlanRel& Plan::_internal_relations(int index) const {
  return _internal_relations().Get(index);
}
inline const ::substrait::PlanRel& Plan::relations(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.relations)
  return _internal_relations(index);
}
inline ::substrait::PlanRel* Plan::_internal_add_relations() {
  return _internal_mutable_relations()->Add();
}
inline ::substrait::PlanRel* Plan::add_relations() {
  ::substrait::PlanRel* _add = _internal_add_relations();
  // @@protoc_insertion_point(field_add:substrait.Plan.relations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::PlanRel >&
Plan::relations() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.relations)
  return _internal_relations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::PlanRel>&
Plan::_internal_relations() const {
  return _impl_.relations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::substrait::PlanRel>*
Plan::_internal_mutable_relations() {
  return &_impl_.relations_;
}

// .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
inline bool Plan::has_advanced_extensions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.advanced_extensions_ != nullptr);
  return value;
}
inline const ::substrait::extensions::AdvancedExtension& Plan::_internal_advanced_extensions() const {
  const ::substrait::extensions::AdvancedExtension* p = _impl_.advanced_extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& Plan::advanced_extensions() const {
  // @@protoc_insertion_point(field_get:substrait.Plan.advanced_extensions)
  return _internal_advanced_extensions();
}
inline void Plan::unsafe_arena_set_allocated_advanced_extensions(
    ::substrait::extensions::AdvancedExtension* advanced_extensions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extensions_);
  }
  _impl_.advanced_extensions_ = advanced_extensions;
  if (advanced_extensions) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.Plan.advanced_extensions)
}
inline ::substrait::extensions::AdvancedExtension* Plan::release_advanced_extensions() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extensions_;
  _impl_.advanced_extensions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* Plan::unsafe_arena_release_advanced_extensions() {
  // @@protoc_insertion_point(field_release:substrait.Plan.advanced_extensions)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::extensions::AdvancedExtension* temp = _impl_.advanced_extensions_;
  _impl_.advanced_extensions_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* Plan::_internal_mutable_advanced_extensions() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.advanced_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    _impl_.advanced_extensions_ = p;
  }
  return _impl_.advanced_extensions_;
}
inline ::substrait::extensions::AdvancedExtension* Plan::mutable_advanced_extensions() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extensions();
  // @@protoc_insertion_point(field_mutable:substrait.Plan.advanced_extensions)
  return _msg;
}
inline void Plan::set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.advanced_extensions_);
  }
  if (advanced_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extensions));
    if (message_arena != submessage_arena) {
      advanced_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extensions, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.advanced_extensions_ = advanced_extensions;
  // @@protoc_insertion_point(field_set_allocated:substrait.Plan.advanced_extensions)
}

// repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
inline int Plan::_internal_expected_type_urls_size() const {
  return _impl_.expected_type_urls_.size();
}
inline int Plan::expected_type_urls_size() const {
  return _internal_expected_type_urls_size();
}
inline void Plan::clear_expected_type_urls() {
  _internal_mutable_expected_type_urls()->Clear();
}
inline std::string* Plan::add_expected_type_urls() {
  std::string* _s = _internal_add_expected_type_urls();
  // @@protoc_insertion_point(field_add_mutable:substrait.Plan.expected_type_urls)
  return _s;
}
inline const std::string& Plan::expected_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:substrait.Plan.expected_type_urls)
  return _internal_expected_type_urls(index);
}
inline std::string* Plan::mutable_expected_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.Plan.expected_type_urls)
  return _internal_mutable_expected_type_urls()->Mutable(index);
}
inline void Plan::set_expected_type_urls(int index, const std::string& value) {
  _internal_mutable_expected_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.Plan.expected_type_urls)
}
inline void Plan::set_expected_type_urls(int index, std::string&& value) {
  _internal_mutable_expected_type_urls()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.Plan.expected_type_urls)
}
inline void Plan::set_expected_type_urls(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_expected_type_urls()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.Plan.expected_type_urls)
}
inline void Plan::set_expected_type_urls(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_expected_type_urls()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.Plan.expected_type_urls)
}
inline void Plan::set_expected_type_urls(int index, absl::string_view value) {
  _internal_mutable_expected_type_urls()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(const std::string& value) {
  _internal_mutable_expected_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(std::string&& value) {
  _internal_mutable_expected_type_urls()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_expected_type_urls()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(const char* value, std::size_t size) {
  _internal_mutable_expected_type_urls()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.Plan.expected_type_urls)
}
inline void Plan::add_expected_type_urls(absl::string_view value) {
  _internal_mutable_expected_type_urls()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:substrait.Plan.expected_type_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Plan::expected_type_urls() const {
  // @@protoc_insertion_point(field_list:substrait.Plan.expected_type_urls)
  return _internal_expected_type_urls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Plan::mutable_expected_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:substrait.Plan.expected_type_urls)
  return _internal_mutable_expected_type_urls();
}
inline const std::string& Plan::_internal_expected_type_urls(int index) const {
  return _internal_expected_type_urls().Get(index);
}
inline std::string* Plan::_internal_add_expected_type_urls() {
  return _internal_mutable_expected_type_urls()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Plan::_internal_expected_type_urls() const {
  return _impl_.expected_type_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Plan::_internal_mutable_expected_type_urls() {
  return &_impl_.expected_type_urls_;
}

// -------------------------------------------------------------------

// PlanVersion

// .substrait.Version version = 6 [json_name = "version"];
inline bool PlanVersion::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void PlanVersion::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::substrait::Version& PlanVersion::_internal_version() const {
  const ::substrait::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Version&>(
      ::substrait::_Version_default_instance_);
}
inline const ::substrait::Version& PlanVersion::version() const {
  // @@protoc_insertion_point(field_get:substrait.PlanVersion.version)
  return _internal_version();
}
inline void PlanVersion::unsafe_arena_set_allocated_version(
    ::substrait::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.PlanVersion.version)
}
inline ::substrait::Version* PlanVersion::release_version() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Version* PlanVersion::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:substrait.PlanVersion.version)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::substrait::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::substrait::Version* PlanVersion::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Version>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::substrait::Version* PlanVersion::mutable_version() {
  ::substrait::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:substrait.PlanVersion.version)
  return _msg;
}
inline void PlanVersion::set_allocated_version(::substrait::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanVersion.version)
}

// -------------------------------------------------------------------

// Version

// uint32 major_number = 1 [json_name = "majorNumber"];
inline void Version::clear_major_number() {
  _impl_.major_number_ = 0u;
}
inline ::uint32_t Version::major_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.major_number)
  return _internal_major_number();
}
inline void Version::set_major_number(::uint32_t value) {
  _internal_set_major_number(value);
  // @@protoc_insertion_point(field_set:substrait.Version.major_number)
}
inline ::uint32_t Version::_internal_major_number() const {
  return _impl_.major_number_;
}
inline void Version::_internal_set_major_number(::uint32_t value) {
  ;
  _impl_.major_number_ = value;
}

// uint32 minor_number = 2 [json_name = "minorNumber"];
inline void Version::clear_minor_number() {
  _impl_.minor_number_ = 0u;
}
inline ::uint32_t Version::minor_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.minor_number)
  return _internal_minor_number();
}
inline void Version::set_minor_number(::uint32_t value) {
  _internal_set_minor_number(value);
  // @@protoc_insertion_point(field_set:substrait.Version.minor_number)
}
inline ::uint32_t Version::_internal_minor_number() const {
  return _impl_.minor_number_;
}
inline void Version::_internal_set_minor_number(::uint32_t value) {
  ;
  _impl_.minor_number_ = value;
}

// uint32 patch_number = 3 [json_name = "patchNumber"];
inline void Version::clear_patch_number() {
  _impl_.patch_number_ = 0u;
}
inline ::uint32_t Version::patch_number() const {
  // @@protoc_insertion_point(field_get:substrait.Version.patch_number)
  return _internal_patch_number();
}
inline void Version::set_patch_number(::uint32_t value) {
  _internal_set_patch_number(value);
  // @@protoc_insertion_point(field_set:substrait.Version.patch_number)
}
inline ::uint32_t Version::_internal_patch_number() const {
  return _impl_.patch_number_;
}
inline void Version::_internal_set_patch_number(::uint32_t value) {
  ;
  _impl_.patch_number_ = value;
}

// string git_hash = 4 [json_name = "gitHash"];
inline void Version::clear_git_hash() {
  _impl_.git_hash_.ClearToEmpty();
}
inline const std::string& Version::git_hash() const {
  // @@protoc_insertion_point(field_get:substrait.Version.git_hash)
  return _internal_git_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_git_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.git_hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Version.git_hash)
}
inline std::string* Version::mutable_git_hash() {
  std::string* _s = _internal_mutable_git_hash();
  // @@protoc_insertion_point(field_mutable:substrait.Version.git_hash)
  return _s;
}
inline const std::string& Version::_internal_git_hash() const {
  return _impl_.git_hash_.Get();
}
inline void Version::_internal_set_git_hash(const std::string& value) {
  ;


  _impl_.git_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_git_hash() {
  ;
  return _impl_.git_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Version::release_git_hash() {
  // @@protoc_insertion_point(field_release:substrait.Version.git_hash)
  return _impl_.git_hash_.Release();
}
inline void Version::set_allocated_git_hash(std::string* value) {
  _impl_.git_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.git_hash_.IsDefault()) {
          _impl_.git_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.git_hash)
}

// string producer = 5 [json_name = "producer"];
inline void Version::clear_producer() {
  _impl_.producer_.ClearToEmpty();
}
inline const std::string& Version::producer() const {
  // @@protoc_insertion_point(field_get:substrait.Version.producer)
  return _internal_producer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_producer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.producer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:substrait.Version.producer)
}
inline std::string* Version::mutable_producer() {
  std::string* _s = _internal_mutable_producer();
  // @@protoc_insertion_point(field_mutable:substrait.Version.producer)
  return _s;
}
inline const std::string& Version::_internal_producer() const {
  return _impl_.producer_.Get();
}
inline void Version::_internal_set_producer(const std::string& value) {
  ;


  _impl_.producer_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_producer() {
  ;
  return _impl_.producer_.Mutable( GetArenaForAllocation());
}
inline std::string* Version::release_producer() {
  // @@protoc_insertion_point(field_release:substrait.Version.producer)
  return _impl_.producer_.Release();
}
inline void Version::set_allocated_producer(std::string* value) {
  _impl_.producer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.producer_.IsDefault()) {
          _impl_.producer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:substrait.Version.producer)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_substrait_2fplan_2eproto_2epb_2eh
