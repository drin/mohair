// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/type.proto

#include "type.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace substrait {
PROTOBUF_CONSTEXPR Type_Boolean::Type_Boolean(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_BooleanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_BooleanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_BooleanDefaultTypeInternal() {}
  union {
    Type_Boolean _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_BooleanDefaultTypeInternal _Type_Boolean_default_instance_;
PROTOBUF_CONSTEXPR Type_I8::Type_I8(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_I8DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_I8DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_I8DefaultTypeInternal() {}
  union {
    Type_I8 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_I8DefaultTypeInternal _Type_I8_default_instance_;
PROTOBUF_CONSTEXPR Type_I16::Type_I16(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_I16DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_I16DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_I16DefaultTypeInternal() {}
  union {
    Type_I16 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_I16DefaultTypeInternal _Type_I16_default_instance_;
PROTOBUF_CONSTEXPR Type_I32::Type_I32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_I32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_I32DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_I32DefaultTypeInternal() {}
  union {
    Type_I32 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_I32DefaultTypeInternal _Type_I32_default_instance_;
PROTOBUF_CONSTEXPR Type_I64::Type_I64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_I64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_I64DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_I64DefaultTypeInternal() {}
  union {
    Type_I64 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_I64DefaultTypeInternal _Type_I64_default_instance_;
PROTOBUF_CONSTEXPR Type_FP32::Type_FP32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_FP32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_FP32DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_FP32DefaultTypeInternal() {}
  union {
    Type_FP32 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FP32DefaultTypeInternal _Type_FP32_default_instance_;
PROTOBUF_CONSTEXPR Type_FP64::Type_FP64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_FP64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_FP64DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_FP64DefaultTypeInternal() {}
  union {
    Type_FP64 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FP64DefaultTypeInternal _Type_FP64_default_instance_;
PROTOBUF_CONSTEXPR Type_String::Type_String(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_StringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_StringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_StringDefaultTypeInternal() {}
  union {
    Type_String _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_StringDefaultTypeInternal _Type_String_default_instance_;
PROTOBUF_CONSTEXPR Type_Binary::Type_Binary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_BinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_BinaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_BinaryDefaultTypeInternal() {}
  union {
    Type_Binary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_BinaryDefaultTypeInternal _Type_Binary_default_instance_;
PROTOBUF_CONSTEXPR Type_Timestamp::Type_Timestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_TimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_TimestampDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_TimestampDefaultTypeInternal() {}
  union {
    Type_Timestamp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_TimestampDefaultTypeInternal _Type_Timestamp_default_instance_;
PROTOBUF_CONSTEXPR Type_Date::Type_Date(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_DateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_DateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_DateDefaultTypeInternal() {}
  union {
    Type_Date _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_DateDefaultTypeInternal _Type_Date_default_instance_;
PROTOBUF_CONSTEXPR Type_Time::Type_Time(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_TimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_TimeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_TimeDefaultTypeInternal() {}
  union {
    Type_Time _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_TimeDefaultTypeInternal _Type_Time_default_instance_;
PROTOBUF_CONSTEXPR Type_TimestampTZ::Type_TimestampTZ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_TimestampTZDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_TimestampTZDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_TimestampTZDefaultTypeInternal() {}
  union {
    Type_TimestampTZ _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_TimestampTZDefaultTypeInternal _Type_TimestampTZ_default_instance_;
PROTOBUF_CONSTEXPR Type_IntervalYear::Type_IntervalYear(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_IntervalYearDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_IntervalYearDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_IntervalYearDefaultTypeInternal() {}
  union {
    Type_IntervalYear _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_IntervalYearDefaultTypeInternal _Type_IntervalYear_default_instance_;
PROTOBUF_CONSTEXPR Type_IntervalDay::Type_IntervalDay(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_IntervalDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_IntervalDayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_IntervalDayDefaultTypeInternal() {}
  union {
    Type_IntervalDay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_IntervalDayDefaultTypeInternal _Type_IntervalDay_default_instance_;
PROTOBUF_CONSTEXPR Type_UUID::Type_UUID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_UUIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_UUIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_UUIDDefaultTypeInternal() {}
  union {
    Type_UUID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_UUIDDefaultTypeInternal _Type_UUID_default_instance_;
PROTOBUF_CONSTEXPR Type_FixedChar::Type_FixedChar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_FixedCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_FixedCharDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_FixedCharDefaultTypeInternal() {}
  union {
    Type_FixedChar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FixedCharDefaultTypeInternal _Type_FixedChar_default_instance_;
PROTOBUF_CONSTEXPR Type_VarChar::Type_VarChar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_VarCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_VarCharDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_VarCharDefaultTypeInternal() {}
  union {
    Type_VarChar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_VarCharDefaultTypeInternal _Type_VarChar_default_instance_;
PROTOBUF_CONSTEXPR Type_FixedBinary::Type_FixedBinary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.length_)*/ 0

  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_FixedBinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_FixedBinaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_FixedBinaryDefaultTypeInternal() {}
  union {
    Type_FixedBinary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FixedBinaryDefaultTypeInternal _Type_FixedBinary_default_instance_;
PROTOBUF_CONSTEXPR Type_Decimal::Type_Decimal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scale_)*/ 0

  , /*decltype(_impl_.precision_)*/ 0

  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_DecimalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_DecimalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_DecimalDefaultTypeInternal() {}
  union {
    Type_Decimal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_DecimalDefaultTypeInternal _Type_Decimal_default_instance_;
PROTOBUF_CONSTEXPR Type_Struct::Type_Struct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.types_)*/{}
  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_StructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_StructDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_StructDefaultTypeInternal() {}
  union {
    Type_Struct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_StructDefaultTypeInternal _Type_Struct_default_instance_;
PROTOBUF_CONSTEXPR Type_List::Type_List(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0
} {}
struct Type_ListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_ListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_ListDefaultTypeInternal() {}
  union {
    Type_List _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_ListDefaultTypeInternal _Type_List_default_instance_;
PROTOBUF_CONSTEXPR Type_Map::Type_Map(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0
} {}
struct Type_MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_MapDefaultTypeInternal() {}
  union {
    Type_Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_MapDefaultTypeInternal _Type_Map_default_instance_;
PROTOBUF_CONSTEXPR Type_UserDefined::Type_UserDefined(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_parameters_)*/{}
  , /*decltype(_impl_.type_reference_)*/ 0u

  , /*decltype(_impl_.type_variation_reference_)*/ 0u

  , /*decltype(_impl_.nullability_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_UserDefinedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_UserDefinedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_UserDefinedDefaultTypeInternal() {}
  union {
    Type_UserDefined _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_UserDefinedDefaultTypeInternal _Type_UserDefined_default_instance_;
PROTOBUF_CONSTEXPR Type_Parameter::Type_Parameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameter_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Type_ParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_ParameterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_ParameterDefaultTypeInternal() {}
  union {
    Type_Parameter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_ParameterDefaultTypeInternal _Type_Parameter_default_instance_;
PROTOBUF_CONSTEXPR Type::Type(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeDefaultTypeInternal() {}
  union {
    Type _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeDefaultTypeInternal _Type_default_instance_;
PROTOBUF_CONSTEXPR NamedStruct::NamedStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_)*/{}
  , /*decltype(_impl_.struct__)*/nullptr} {}
struct NamedStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedStructDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedStructDefaultTypeInternal() {}
  union {
    NamedStruct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedStructDefaultTypeInternal _NamedStruct_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2ftype_2eproto[27];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_substrait_2ftype_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_substrait_2ftype_2eproto = nullptr;
const ::uint32_t TableStruct_substrait_2ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Boolean, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Boolean, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Boolean, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I8, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I8, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I8, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I16, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I16, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I16, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I32, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I32, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I32, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I64, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I64, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_I64, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP32, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP32, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP32, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP64, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP64, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FP64, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_String, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_String, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_String, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Binary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Binary, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Binary, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Timestamp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Timestamp, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Timestamp, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Date, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Date, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Date, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Time, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Time, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Time, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_TimestampTZ, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_TimestampTZ, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_TimestampTZ, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalYear, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalYear, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalYear, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalDay, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalDay, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_IntervalDay, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UUID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UUID, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UUID, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedChar, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedChar, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedChar, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedChar, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_VarChar, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_VarChar, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_VarChar, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_VarChar, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedBinary, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedBinary, _impl_.length_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedBinary, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_FixedBinary, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Decimal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Decimal, _impl_.scale_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Decimal, _impl_.precision_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Decimal, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Decimal, _impl_.nullability_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Struct, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Struct, _impl_.types_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Struct, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Struct, _impl_.nullability_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_List, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_List, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_List, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_List, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_List, _impl_.nullability_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Map, _impl_.nullability_),
    0,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UserDefined, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UserDefined, _impl_.type_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UserDefined, _impl_.type_variation_reference_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UserDefined, _impl_.nullability_),
    PROTOBUF_FIELD_OFFSET(::substrait::Type_UserDefined, _impl_.type_parameters_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Parameter, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Parameter, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Parameter, _impl_.parameter_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::substrait::Type, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::substrait::Type, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::substrait::Type, _impl_.kind_),
    PROTOBUF_FIELD_OFFSET(::substrait::NamedStruct, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::substrait::NamedStruct, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::substrait::NamedStruct, _impl_.names_),
    PROTOBUF_FIELD_OFFSET(::substrait::NamedStruct, _impl_.struct__),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::substrait::Type_Boolean)},
        { 10, -1, -1, sizeof(::substrait::Type_I8)},
        { 20, -1, -1, sizeof(::substrait::Type_I16)},
        { 30, -1, -1, sizeof(::substrait::Type_I32)},
        { 40, -1, -1, sizeof(::substrait::Type_I64)},
        { 50, -1, -1, sizeof(::substrait::Type_FP32)},
        { 60, -1, -1, sizeof(::substrait::Type_FP64)},
        { 70, -1, -1, sizeof(::substrait::Type_String)},
        { 80, -1, -1, sizeof(::substrait::Type_Binary)},
        { 90, -1, -1, sizeof(::substrait::Type_Timestamp)},
        { 100, -1, -1, sizeof(::substrait::Type_Date)},
        { 110, -1, -1, sizeof(::substrait::Type_Time)},
        { 120, -1, -1, sizeof(::substrait::Type_TimestampTZ)},
        { 130, -1, -1, sizeof(::substrait::Type_IntervalYear)},
        { 140, -1, -1, sizeof(::substrait::Type_IntervalDay)},
        { 150, -1, -1, sizeof(::substrait::Type_UUID)},
        { 160, -1, -1, sizeof(::substrait::Type_FixedChar)},
        { 171, -1, -1, sizeof(::substrait::Type_VarChar)},
        { 182, -1, -1, sizeof(::substrait::Type_FixedBinary)},
        { 193, -1, -1, sizeof(::substrait::Type_Decimal)},
        { 205, -1, -1, sizeof(::substrait::Type_Struct)},
        { 216, 227, -1, sizeof(::substrait::Type_List)},
        { 230, 242, -1, sizeof(::substrait::Type_Map)},
        { 246, -1, -1, sizeof(::substrait::Type_UserDefined)},
        { 258, -1, -1, sizeof(::substrait::Type_Parameter)},
        { 273, -1, -1, sizeof(::substrait::Type)},
        { 307, 317, -1, sizeof(::substrait::NamedStruct)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::substrait::_Type_Boolean_default_instance_._instance,
    &::substrait::_Type_I8_default_instance_._instance,
    &::substrait::_Type_I16_default_instance_._instance,
    &::substrait::_Type_I32_default_instance_._instance,
    &::substrait::_Type_I64_default_instance_._instance,
    &::substrait::_Type_FP32_default_instance_._instance,
    &::substrait::_Type_FP64_default_instance_._instance,
    &::substrait::_Type_String_default_instance_._instance,
    &::substrait::_Type_Binary_default_instance_._instance,
    &::substrait::_Type_Timestamp_default_instance_._instance,
    &::substrait::_Type_Date_default_instance_._instance,
    &::substrait::_Type_Time_default_instance_._instance,
    &::substrait::_Type_TimestampTZ_default_instance_._instance,
    &::substrait::_Type_IntervalYear_default_instance_._instance,
    &::substrait::_Type_IntervalDay_default_instance_._instance,
    &::substrait::_Type_UUID_default_instance_._instance,
    &::substrait::_Type_FixedChar_default_instance_._instance,
    &::substrait::_Type_VarChar_default_instance_._instance,
    &::substrait::_Type_FixedBinary_default_instance_._instance,
    &::substrait::_Type_Decimal_default_instance_._instance,
    &::substrait::_Type_Struct_default_instance_._instance,
    &::substrait::_Type_List_default_instance_._instance,
    &::substrait::_Type_Map_default_instance_._instance,
    &::substrait::_Type_UserDefined_default_instance_._instance,
    &::substrait::_Type_Parameter_default_instance_._instance,
    &::substrait::_Type_default_instance_._instance,
    &::substrait::_NamedStruct_default_instance_._instance,
};
const char descriptor_table_protodef_substrait_2ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\024substrait/type.proto\022\tsubstrait\032\033googl"
    "e/protobuf/empty.proto\"\264(\n\004Type\022-\n\004bool\030"
    "\001 \001(\0132\027.substrait.Type.BooleanH\000R\004bool\022$"
    "\n\002i8\030\002 \001(\0132\022.substrait.Type.I8H\000R\002i8\022\'\n\003"
    "i16\030\003 \001(\0132\023.substrait.Type.I16H\000R\003i16\022\'\n"
    "\003i32\030\005 \001(\0132\023.substrait.Type.I32H\000R\003i32\022\'"
    "\n\003i64\030\007 \001(\0132\023.substrait.Type.I64H\000R\003i64\022"
    "*\n\004fp32\030\n \001(\0132\024.substrait.Type.FP32H\000R\004f"
    "p32\022*\n\004fp64\030\013 \001(\0132\024.substrait.Type.FP64H"
    "\000R\004fp64\0220\n\006string\030\014 \001(\0132\026.substrait.Type"
    ".StringH\000R\006string\0220\n\006binary\030\r \001(\0132\026.subs"
    "trait.Type.BinaryH\000R\006binary\0229\n\ttimestamp"
    "\030\016 \001(\0132\031.substrait.Type.TimestampH\000R\ttim"
    "estamp\022*\n\004date\030\020 \001(\0132\024.substrait.Type.Da"
    "teH\000R\004date\022*\n\004time\030\021 \001(\0132\024.substrait.Typ"
    "e.TimeH\000R\004time\022C\n\rinterval_year\030\023 \001(\0132\034."
    "substrait.Type.IntervalYearH\000R\014intervalY"
    "ear\022@\n\014interval_day\030\024 \001(\0132\033.substrait.Ty"
    "pe.IntervalDayH\000R\013intervalDay\022@\n\014timesta"
    "mp_tz\030\035 \001(\0132\033.substrait.Type.TimestampTZ"
    "H\000R\013timestampTz\022*\n\004uuid\030  \001(\0132\024.substrai"
    "t.Type.UUIDH\000R\004uuid\022:\n\nfixed_char\030\025 \001(\0132"
    "\031.substrait.Type.FixedCharH\000R\tfixedChar\022"
    "3\n\007varchar\030\026 \001(\0132\027.substrait.Type.VarCha"
    "rH\000R\007varchar\022@\n\014fixed_binary\030\027 \001(\0132\033.sub"
    "strait.Type.FixedBinaryH\000R\013fixedBinary\0223"
    "\n\007decimal\030\030 \001(\0132\027.substrait.Type.Decimal"
    "H\000R\007decimal\0220\n\006struct\030\031 \001(\0132\026.substrait."
    "Type.StructH\000R\006struct\022*\n\004list\030\033 \001(\0132\024.su"
    "bstrait.Type.ListH\000R\004list\022\'\n\003map\030\034 \001(\0132\023"
    ".substrait.Type.MapH\000R\003map\022@\n\014user_defin"
    "ed\030\036 \001(\0132\033.substrait.Type.UserDefinedH\000R"
    "\013userDefined\022C\n\033user_defined_type_refere"
    "nce\030\037 \001(\rB\002\030\001H\000R\030userDefinedTypeReferenc"
    "e\032\202\001\n\007Boolean\0228\n\030type_variation_referenc"
    "e\030\001 \001(\rR\026typeVariationReference\022=\n\013nulla"
    "bility\030\002 \001(\0162\033.substrait.Type.Nullabilit"
    "yR\013nullability\032}\n\002I8\0228\n\030type_variation_r"
    "eference\030\001 \001(\rR\026typeVariationReference\022="
    "\n\013nullability\030\002 \001(\0162\033.substrait.Type.Nul"
    "labilityR\013nullability\032~\n\003I16\0228\n\030type_var"
    "iation_reference\030\001 \001(\rR\026typeVariationRef"
    "erence\022=\n\013nullability\030\002 \001(\0162\033.substrait."
    "Type.NullabilityR\013nullability\032~\n\003I32\0228\n\030"
    "type_variation_reference\030\001 \001(\rR\026typeVari"
    "ationReference\022=\n\013nullability\030\002 \001(\0162\033.su"
    "bstrait.Type.NullabilityR\013nullability\032~\n"
    "\003I64\0228\n\030type_variation_reference\030\001 \001(\rR\026"
    "typeVariationReference\022=\n\013nullability\030\002 "
    "\001(\0162\033.substrait.Type.NullabilityR\013nullab"
    "ility\032\177\n\004FP32\0228\n\030type_variation_referenc"
    "e\030\001 \001(\rR\026typeVariationReference\022=\n\013nulla"
    "bility\030\002 \001(\0162\033.substrait.Type.Nullabilit"
    "yR\013nullability\032\177\n\004FP64\0228\n\030type_variation"
    "_reference\030\001 \001(\rR\026typeVariationReference"
    "\022=\n\013nullability\030\002 \001(\0162\033.substrait.Type.N"
    "ullabilityR\013nullability\032\201\001\n\006String\0228\n\030ty"
    "pe_variation_reference\030\001 \001(\rR\026typeVariat"
    "ionReference\022=\n\013nullability\030\002 \001(\0162\033.subs"
    "trait.Type.NullabilityR\013nullability\032\201\001\n\006"
    "Binary\0228\n\030type_variation_reference\030\001 \001(\r"
    "R\026typeVariationReference\022=\n\013nullability\030"
    "\002 \001(\0162\033.substrait.Type.NullabilityR\013null"
    "ability\032\204\001\n\tTimestamp\0228\n\030type_variation_"
    "reference\030\001 \001(\rR\026typeVariationReference\022"
    "=\n\013nullability\030\002 \001(\0162\033.substrait.Type.Nu"
    "llabilityR\013nullability\032\177\n\004Date\0228\n\030type_v"
    "ariation_reference\030\001 \001(\rR\026typeVariationR"
    "eference\022=\n\013nullability\030\002 \001(\0162\033.substrai"
    "t.Type.NullabilityR\013nullability\032\177\n\004Time\022"
    "8\n\030type_variation_reference\030\001 \001(\rR\026typeV"
    "ariationReference\022=\n\013nullability\030\002 \001(\0162\033"
    ".substrait.Type.NullabilityR\013nullability"
    "\032\206\001\n\013TimestampTZ\0228\n\030type_variation_refer"
    "ence\030\001 \001(\rR\026typeVariationReference\022=\n\013nu"
    "llability\030\002 \001(\0162\033.substrait.Type.Nullabi"
    "lityR\013nullability\032\207\001\n\014IntervalYear\0228\n\030ty"
    "pe_variation_reference\030\001 \001(\rR\026typeVariat"
    "ionReference\022=\n\013nullability\030\002 \001(\0162\033.subs"
    "trait.Type.NullabilityR\013nullability\032\206\001\n\013"
    "IntervalDay\0228\n\030type_variation_reference\030"
    "\001 \001(\rR\026typeVariationReference\022=\n\013nullabi"
    "lity\030\002 \001(\0162\033.substrait.Type.NullabilityR"
    "\013nullability\032\177\n\004UUID\0228\n\030type_variation_r"
    "eference\030\001 \001(\rR\026typeVariationReference\022="
    "\n\013nullability\030\002 \001(\0162\033.substrait.Type.Nul"
    "labilityR\013nullability\032\234\001\n\tFixedChar\022\026\n\006l"
    "ength\030\001 \001(\005R\006length\0228\n\030type_variation_re"
    "ference\030\002 \001(\rR\026typeVariationReference\022=\n"
    "\013nullability\030\003 \001(\0162\033.substrait.Type.Null"
    "abilityR\013nullability\032\232\001\n\007VarChar\022\026\n\006leng"
    "th\030\001 \001(\005R\006length\0228\n\030type_variation_refer"
    "ence\030\002 \001(\rR\026typeVariationReference\022=\n\013nu"
    "llability\030\003 \001(\0162\033.substrait.Type.Nullabi"
    "lityR\013nullability\032\236\001\n\013FixedBinary\022\026\n\006len"
    "gth\030\001 \001(\005R\006length\0228\n\030type_variation_refe"
    "rence\030\002 \001(\rR\026typeVariationReference\022=\n\013n"
    "ullability\030\003 \001(\0162\033.substrait.Type.Nullab"
    "ilityR\013nullability\032\266\001\n\007Decimal\022\024\n\005scale\030"
    "\001 \001(\005R\005scale\022\034\n\tprecision\030\002 \001(\005R\tprecisi"
    "on\0228\n\030type_variation_reference\030\003 \001(\rR\026ty"
    "peVariationReference\022=\n\013nullability\030\004 \001("
    "\0162\033.substrait.Type.NullabilityR\013nullabil"
    "ity\032\250\001\n\006Struct\022%\n\005types\030\001 \003(\0132\017.substrai"
    "t.TypeR\005types\0228\n\030type_variation_referenc"
    "e\030\002 \001(\rR\026typeVariationReference\022=\n\013nulla"
    "bility\030\003 \001(\0162\033.substrait.Type.Nullabilit"
    "yR\013nullability\032\244\001\n\004List\022#\n\004type\030\001 \001(\0132\017."
    "substrait.TypeR\004type\0228\n\030type_variation_r"
    "eference\030\002 \001(\rR\026typeVariationReference\022="
    "\n\013nullability\030\003 \001(\0162\033.substrait.Type.Nul"
    "labilityR\013nullability\032\310\001\n\003Map\022!\n\003key\030\001 \001"
    "(\0132\017.substrait.TypeR\003key\022%\n\005value\030\002 \001(\0132"
    "\017.substrait.TypeR\005value\0228\n\030type_variatio"
    "n_reference\030\003 \001(\rR\026typeVariationReferenc"
    "e\022=\n\013nullability\030\004 \001(\0162\033.substrait.Type."
    "NullabilityR\013nullability\032\361\001\n\013UserDefined"
    "\022%\n\016type_reference\030\001 \001(\rR\rtypeReference\022"
    "8\n\030type_variation_reference\030\002 \001(\rR\026typeV"
    "ariationReference\022=\n\013nullability\030\003 \001(\0162\033"
    ".substrait.Type.NullabilityR\013nullability"
    "\022B\n\017type_parameters\030\004 \003(\0132\031.substrait.Ty"
    "pe.ParameterR\016typeParameters\032\336\001\n\tParamet"
    "er\022,\n\004null\030\001 \001(\0132\026.google.protobuf.Empty"
    "H\000R\004null\022.\n\tdata_type\030\002 \001(\0132\017.substrait."
    "TypeH\000R\010dataType\022\032\n\007boolean\030\003 \001(\010H\000R\007boo"
    "lean\022\032\n\007integer\030\004 \001(\003H\000R\007integer\022\024\n\004enum"
    "\030\005 \001(\tH\000R\004enum\022\030\n\006string\030\006 \001(\tH\000R\006string"
    "B\013\n\tparameter\"^\n\013Nullability\022\033\n\027NULLABIL"
    "ITY_UNSPECIFIED\020\000\022\030\n\024NULLABILITY_NULLABL"
    "E\020\001\022\030\n\024NULLABILITY_REQUIRED\020\002B\006\n\004kind\"S\n"
    "\013NamedStruct\022\024\n\005names\030\001 \003(\tR\005names\022.\n\006st"
    "ruct\030\002 \001(\0132\026.substrait.Type.StructR\006stru"
    "ctB\212\001\n\rcom.substraitB\tTypeProtoP\001Z*githu"
    "b.com/substrait-io/substrait-go/proto\242\002\003"
    "SXX\252\002\tSubstrait\312\002\tSubstrait\342\002\025Substrait\\"
    "GPBMetadata\352\002\tSubstraitb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2ftype_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_substrait_2ftype_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2ftype_2eproto = {
    false,
    false,
    5471,
    descriptor_table_protodef_substrait_2ftype_2eproto,
    "substrait/type.proto",
    &descriptor_table_substrait_2ftype_2eproto_once,
    descriptor_table_substrait_2ftype_2eproto_deps,
    1,
    27,
    schemas,
    file_default_instances,
    TableStruct_substrait_2ftype_2eproto::offsets,
    file_level_metadata_substrait_2ftype_2eproto,
    file_level_enum_descriptors_substrait_2ftype_2eproto,
    file_level_service_descriptors_substrait_2ftype_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2ftype_2eproto_getter() {
  return &descriptor_table_substrait_2ftype_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2ftype_2eproto(&descriptor_table_substrait_2ftype_2eproto);
namespace substrait {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_Nullability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_substrait_2ftype_2eproto);
  return file_level_enum_descriptors_substrait_2ftype_2eproto[0];
}
bool Type_Nullability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Type_Nullability Type::NULLABILITY_UNSPECIFIED;
constexpr Type_Nullability Type::NULLABILITY_NULLABLE;
constexpr Type_Nullability Type::NULLABILITY_REQUIRED;
constexpr Type_Nullability Type::Nullability_MIN;
constexpr Type_Nullability Type::Nullability_MAX;
constexpr int Type::Nullability_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Type_Boolean::_Internal {
 public:
};

Type_Boolean::Type_Boolean(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Boolean)
}
Type_Boolean::Type_Boolean(const Type_Boolean& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Boolean)
}

inline void Type_Boolean::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Boolean::~Type_Boolean() {
  // @@protoc_insertion_point(destructor:substrait.Type.Boolean)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Boolean::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Boolean::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Boolean::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Boolean)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Boolean::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Boolean::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Boolean)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Boolean)
  return target;
}

::size_t Type_Boolean::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Boolean)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Boolean::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Boolean::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Boolean::GetClassData() const { return &_class_data_; }


void Type_Boolean::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Boolean*>(&to_msg);
  auto& from = static_cast<const Type_Boolean&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Boolean)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Boolean::CopyFrom(const Type_Boolean& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Boolean)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Boolean::IsInitialized() const {
  return true;
}

void Type_Boolean::InternalSwap(Type_Boolean* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Boolean, _impl_.nullability_)
      + sizeof(Type_Boolean::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Boolean, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Boolean::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[0]);
}
// ===================================================================

class Type_I8::_Internal {
 public:
};

Type_I8::Type_I8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.I8)
}
Type_I8::Type_I8(const Type_I8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.I8)
}

inline void Type_I8::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_I8::~Type_I8() {
  // @@protoc_insertion_point(destructor:substrait.Type.I8)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_I8::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_I8::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_I8::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.I8)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I8::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_I8::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.I8)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.I8)
  return target;
}

::size_t Type_I8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.I8)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_I8::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_I8::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_I8::GetClassData() const { return &_class_data_; }


void Type_I8::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_I8*>(&to_msg);
  auto& from = static_cast<const Type_I8&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.I8)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_I8::CopyFrom(const Type_I8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.I8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I8::IsInitialized() const {
  return true;
}

void Type_I8::InternalSwap(Type_I8* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I8, _impl_.nullability_)
      + sizeof(Type_I8::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I8, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I8::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[1]);
}
// ===================================================================

class Type_I16::_Internal {
 public:
};

Type_I16::Type_I16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.I16)
}
Type_I16::Type_I16(const Type_I16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.I16)
}

inline void Type_I16::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_I16::~Type_I16() {
  // @@protoc_insertion_point(destructor:substrait.Type.I16)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_I16::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_I16::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_I16::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.I16)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I16::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_I16::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.I16)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.I16)
  return target;
}

::size_t Type_I16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.I16)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_I16::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_I16::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_I16::GetClassData() const { return &_class_data_; }


void Type_I16::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_I16*>(&to_msg);
  auto& from = static_cast<const Type_I16&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.I16)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_I16::CopyFrom(const Type_I16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.I16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I16::IsInitialized() const {
  return true;
}

void Type_I16::InternalSwap(Type_I16* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I16, _impl_.nullability_)
      + sizeof(Type_I16::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I16, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I16::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[2]);
}
// ===================================================================

class Type_I32::_Internal {
 public:
};

Type_I32::Type_I32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.I32)
}
Type_I32::Type_I32(const Type_I32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.I32)
}

inline void Type_I32::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_I32::~Type_I32() {
  // @@protoc_insertion_point(destructor:substrait.Type.I32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_I32::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_I32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_I32::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.I32)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_I32::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.I32)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.I32)
  return target;
}

::size_t Type_I32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.I32)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_I32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_I32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_I32::GetClassData() const { return &_class_data_; }


void Type_I32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_I32*>(&to_msg);
  auto& from = static_cast<const Type_I32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.I32)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_I32::CopyFrom(const Type_I32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.I32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I32::IsInitialized() const {
  return true;
}

void Type_I32::InternalSwap(Type_I32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I32, _impl_.nullability_)
      + sizeof(Type_I32::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I32, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[3]);
}
// ===================================================================

class Type_I64::_Internal {
 public:
};

Type_I64::Type_I64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.I64)
}
Type_I64::Type_I64(const Type_I64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.I64)
}

inline void Type_I64::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_I64::~Type_I64() {
  // @@protoc_insertion_point(destructor:substrait.Type.I64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_I64::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_I64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_I64::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.I64)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_I64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_I64::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.I64)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.I64)
  return target;
}

::size_t Type_I64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.I64)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_I64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_I64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_I64::GetClassData() const { return &_class_data_; }


void Type_I64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_I64*>(&to_msg);
  auto& from = static_cast<const Type_I64&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.I64)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_I64::CopyFrom(const Type_I64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.I64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_I64::IsInitialized() const {
  return true;
}

void Type_I64::InternalSwap(Type_I64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_I64, _impl_.nullability_)
      + sizeof(Type_I64::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_I64, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_I64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[4]);
}
// ===================================================================

class Type_FP32::_Internal {
 public:
};

Type_FP32::Type_FP32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.FP32)
}
Type_FP32::Type_FP32(const Type_FP32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.FP32)
}

inline void Type_FP32::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_FP32::~Type_FP32() {
  // @@protoc_insertion_point(destructor:substrait.Type.FP32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_FP32::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_FP32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_FP32::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.FP32)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_FP32::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.FP32)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.FP32)
  return target;
}

::size_t Type_FP32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.FP32)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_FP32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_FP32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_FP32::GetClassData() const { return &_class_data_; }


void Type_FP32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_FP32*>(&to_msg);
  auto& from = static_cast<const Type_FP32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.FP32)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_FP32::CopyFrom(const Type_FP32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.FP32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP32::IsInitialized() const {
  return true;
}

void Type_FP32::InternalSwap(Type_FP32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP32, _impl_.nullability_)
      + sizeof(Type_FP32::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP32, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[5]);
}
// ===================================================================

class Type_FP64::_Internal {
 public:
};

Type_FP64::Type_FP64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.FP64)
}
Type_FP64::Type_FP64(const Type_FP64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.FP64)
}

inline void Type_FP64::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_FP64::~Type_FP64() {
  // @@protoc_insertion_point(destructor:substrait.Type.FP64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_FP64::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_FP64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_FP64::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.FP64)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FP64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_FP64::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.FP64)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.FP64)
  return target;
}

::size_t Type_FP64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.FP64)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_FP64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_FP64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_FP64::GetClassData() const { return &_class_data_; }


void Type_FP64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_FP64*>(&to_msg);
  auto& from = static_cast<const Type_FP64&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.FP64)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_FP64::CopyFrom(const Type_FP64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.FP64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FP64::IsInitialized() const {
  return true;
}

void Type_FP64::InternalSwap(Type_FP64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FP64, _impl_.nullability_)
      + sizeof(Type_FP64::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FP64, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FP64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[6]);
}
// ===================================================================

class Type_String::_Internal {
 public:
};

Type_String::Type_String(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.String)
}
Type_String::Type_String(const Type_String& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.String)
}

inline void Type_String::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_String::~Type_String() {
  // @@protoc_insertion_point(destructor:substrait.Type.String)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_String::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_String::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_String::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.String)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_String::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_String::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.String)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.String)
  return target;
}

::size_t Type_String::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.String)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_String::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_String::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_String::GetClassData() const { return &_class_data_; }


void Type_String::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_String*>(&to_msg);
  auto& from = static_cast<const Type_String&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.String)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_String::CopyFrom(const Type_String& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.String)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_String::IsInitialized() const {
  return true;
}

void Type_String::InternalSwap(Type_String* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_String, _impl_.nullability_)
      + sizeof(Type_String::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_String, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_String::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[7]);
}
// ===================================================================

class Type_Binary::_Internal {
 public:
};

Type_Binary::Type_Binary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Binary)
}
Type_Binary::Type_Binary(const Type_Binary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Binary)
}

inline void Type_Binary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Binary::~Type_Binary() {
  // @@protoc_insertion_point(destructor:substrait.Type.Binary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Binary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Binary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Binary::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Binary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Binary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Binary::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Binary)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Binary)
  return target;
}

::size_t Type_Binary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Binary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Binary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Binary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Binary::GetClassData() const { return &_class_data_; }


void Type_Binary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Binary*>(&to_msg);
  auto& from = static_cast<const Type_Binary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Binary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Binary::CopyFrom(const Type_Binary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Binary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Binary::IsInitialized() const {
  return true;
}

void Type_Binary::InternalSwap(Type_Binary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Binary, _impl_.nullability_)
      + sizeof(Type_Binary::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Binary, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Binary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[8]);
}
// ===================================================================

class Type_Timestamp::_Internal {
 public:
};

Type_Timestamp::Type_Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Timestamp)
}
Type_Timestamp::Type_Timestamp(const Type_Timestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Timestamp)
}

inline void Type_Timestamp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Timestamp::~Type_Timestamp() {
  // @@protoc_insertion_point(destructor:substrait.Type.Timestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Timestamp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Timestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Timestamp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Timestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Timestamp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Timestamp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Timestamp)
  return target;
}

::size_t Type_Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Timestamp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Timestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Timestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Timestamp::GetClassData() const { return &_class_data_; }


void Type_Timestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Timestamp*>(&to_msg);
  auto& from = static_cast<const Type_Timestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Timestamp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Timestamp::CopyFrom(const Type_Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Timestamp::IsInitialized() const {
  return true;
}

void Type_Timestamp::InternalSwap(Type_Timestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Timestamp, _impl_.nullability_)
      + sizeof(Type_Timestamp::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Timestamp, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Timestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[9]);
}
// ===================================================================

class Type_Date::_Internal {
 public:
};

Type_Date::Type_Date(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Date)
}
Type_Date::Type_Date(const Type_Date& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Date)
}

inline void Type_Date::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Date::~Type_Date() {
  // @@protoc_insertion_point(destructor:substrait.Type.Date)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Date::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Date::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Date::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Date)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Date::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Date::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Date)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Date)
  return target;
}

::size_t Type_Date::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Date)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Date::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Date::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Date::GetClassData() const { return &_class_data_; }


void Type_Date::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Date*>(&to_msg);
  auto& from = static_cast<const Type_Date&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Date)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Date::CopyFrom(const Type_Date& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Date)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Date::IsInitialized() const {
  return true;
}

void Type_Date::InternalSwap(Type_Date* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Date, _impl_.nullability_)
      + sizeof(Type_Date::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Date, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Date::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[10]);
}
// ===================================================================

class Type_Time::_Internal {
 public:
};

Type_Time::Type_Time(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Time)
}
Type_Time::Type_Time(const Type_Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Time)
}

inline void Type_Time::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Time::~Type_Time() {
  // @@protoc_insertion_point(destructor:substrait.Type.Time)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Time::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Time::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Time::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Time)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Time::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Time::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Time)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Time)
  return target;
}

::size_t Type_Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Time)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Time::GetClassData() const { return &_class_data_; }


void Type_Time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Time*>(&to_msg);
  auto& from = static_cast<const Type_Time&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Time)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Time::CopyFrom(const Type_Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Time::IsInitialized() const {
  return true;
}

void Type_Time::InternalSwap(Type_Time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Time, _impl_.nullability_)
      + sizeof(Type_Time::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Time, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Time::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[11]);
}
// ===================================================================

class Type_TimestampTZ::_Internal {
 public:
};

Type_TimestampTZ::Type_TimestampTZ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.TimestampTZ)
}
Type_TimestampTZ::Type_TimestampTZ(const Type_TimestampTZ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.TimestampTZ)
}

inline void Type_TimestampTZ::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_TimestampTZ::~Type_TimestampTZ() {
  // @@protoc_insertion_point(destructor:substrait.Type.TimestampTZ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_TimestampTZ::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_TimestampTZ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_TimestampTZ::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.TimestampTZ)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_TimestampTZ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_TimestampTZ::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.TimestampTZ)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.TimestampTZ)
  return target;
}

::size_t Type_TimestampTZ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.TimestampTZ)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_TimestampTZ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_TimestampTZ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_TimestampTZ::GetClassData() const { return &_class_data_; }


void Type_TimestampTZ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_TimestampTZ*>(&to_msg);
  auto& from = static_cast<const Type_TimestampTZ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.TimestampTZ)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_TimestampTZ::CopyFrom(const Type_TimestampTZ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.TimestampTZ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_TimestampTZ::IsInitialized() const {
  return true;
}

void Type_TimestampTZ::InternalSwap(Type_TimestampTZ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, _impl_.nullability_)
      + sizeof(Type_TimestampTZ::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_TimestampTZ, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_TimestampTZ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[12]);
}
// ===================================================================

class Type_IntervalYear::_Internal {
 public:
};

Type_IntervalYear::Type_IntervalYear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.IntervalYear)
}
Type_IntervalYear::Type_IntervalYear(const Type_IntervalYear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.IntervalYear)
}

inline void Type_IntervalYear::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_IntervalYear::~Type_IntervalYear() {
  // @@protoc_insertion_point(destructor:substrait.Type.IntervalYear)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_IntervalYear::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_IntervalYear::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_IntervalYear::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.IntervalYear)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalYear::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_IntervalYear::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.IntervalYear)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.IntervalYear)
  return target;
}

::size_t Type_IntervalYear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.IntervalYear)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_IntervalYear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_IntervalYear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_IntervalYear::GetClassData() const { return &_class_data_; }


void Type_IntervalYear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_IntervalYear*>(&to_msg);
  auto& from = static_cast<const Type_IntervalYear&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.IntervalYear)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_IntervalYear::CopyFrom(const Type_IntervalYear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.IntervalYear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalYear::IsInitialized() const {
  return true;
}

void Type_IntervalYear::InternalSwap(Type_IntervalYear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalYear, _impl_.nullability_)
      + sizeof(Type_IntervalYear::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalYear, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalYear::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[13]);
}
// ===================================================================

class Type_IntervalDay::_Internal {
 public:
};

Type_IntervalDay::Type_IntervalDay(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.IntervalDay)
}
Type_IntervalDay::Type_IntervalDay(const Type_IntervalDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.IntervalDay)
}

inline void Type_IntervalDay::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_IntervalDay::~Type_IntervalDay() {
  // @@protoc_insertion_point(destructor:substrait.Type.IntervalDay)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_IntervalDay::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_IntervalDay::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_IntervalDay::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.IntervalDay)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_IntervalDay::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_IntervalDay::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.IntervalDay)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.IntervalDay)
  return target;
}

::size_t Type_IntervalDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.IntervalDay)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_IntervalDay::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_IntervalDay::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_IntervalDay::GetClassData() const { return &_class_data_; }


void Type_IntervalDay::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_IntervalDay*>(&to_msg);
  auto& from = static_cast<const Type_IntervalDay&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.IntervalDay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_IntervalDay::CopyFrom(const Type_IntervalDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.IntervalDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_IntervalDay::IsInitialized() const {
  return true;
}

void Type_IntervalDay::InternalSwap(Type_IntervalDay* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_IntervalDay, _impl_.nullability_)
      + sizeof(Type_IntervalDay::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_IntervalDay, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_IntervalDay::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[14]);
}
// ===================================================================

class Type_UUID::_Internal {
 public:
};

Type_UUID::Type_UUID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.UUID)
}
Type_UUID::Type_UUID(const Type_UUID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.UUID)
}

inline void Type_UUID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_UUID::~Type_UUID() {
  // @@protoc_insertion_point(destructor:substrait.Type.UUID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_UUID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_UUID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_UUID::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.UUID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_UUID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_UUID::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.UUID)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.UUID)
  return target;
}

::size_t Type_UUID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.UUID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 type_variation_reference = 1 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 2 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_UUID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_UUID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_UUID::GetClassData() const { return &_class_data_; }


void Type_UUID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_UUID*>(&to_msg);
  auto& from = static_cast<const Type_UUID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.UUID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_UUID::CopyFrom(const Type_UUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.UUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_UUID::IsInitialized() const {
  return true;
}

void Type_UUID::InternalSwap(Type_UUID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_UUID, _impl_.nullability_)
      + sizeof(Type_UUID::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_UUID, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_UUID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[15]);
}
// ===================================================================

class Type_FixedChar::_Internal {
 public:
};

Type_FixedChar::Type_FixedChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.FixedChar)
}
Type_FixedChar::Type_FixedChar(const Type_FixedChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.FixedChar)
}

inline void Type_FixedChar::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.length_) { 0 }

    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_FixedChar::~Type_FixedChar() {
  // @@protoc_insertion_point(destructor:substrait.Type.FixedChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_FixedChar::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_FixedChar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_FixedChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.FixedChar)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.length_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1 [json_name = "length"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_FixedChar::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.FixedChar)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.FixedChar)
  return target;
}

::size_t Type_FixedChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.FixedChar)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_FixedChar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_FixedChar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_FixedChar::GetClassData() const { return &_class_data_; }


void Type_FixedChar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_FixedChar*>(&to_msg);
  auto& from = static_cast<const Type_FixedChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.FixedChar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_FixedChar::CopyFrom(const Type_FixedChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.FixedChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedChar::IsInitialized() const {
  return true;
}

void Type_FixedChar::InternalSwap(Type_FixedChar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedChar, _impl_.nullability_)
      + sizeof(Type_FixedChar::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedChar, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedChar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[16]);
}
// ===================================================================

class Type_VarChar::_Internal {
 public:
};

Type_VarChar::Type_VarChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.VarChar)
}
Type_VarChar::Type_VarChar(const Type_VarChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.VarChar)
}

inline void Type_VarChar::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.length_) { 0 }

    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_VarChar::~Type_VarChar() {
  // @@protoc_insertion_point(destructor:substrait.Type.VarChar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_VarChar::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_VarChar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_VarChar::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.VarChar)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.length_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_VarChar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1 [json_name = "length"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_VarChar::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.VarChar)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.VarChar)
  return target;
}

::size_t Type_VarChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.VarChar)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_VarChar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_VarChar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_VarChar::GetClassData() const { return &_class_data_; }


void Type_VarChar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_VarChar*>(&to_msg);
  auto& from = static_cast<const Type_VarChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.VarChar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_VarChar::CopyFrom(const Type_VarChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.VarChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_VarChar::IsInitialized() const {
  return true;
}

void Type_VarChar::InternalSwap(Type_VarChar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_VarChar, _impl_.nullability_)
      + sizeof(Type_VarChar::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_VarChar, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_VarChar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[17]);
}
// ===================================================================

class Type_FixedBinary::_Internal {
 public:
};

Type_FixedBinary::Type_FixedBinary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.FixedBinary)
}
Type_FixedBinary::Type_FixedBinary(const Type_FixedBinary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.FixedBinary)
}

inline void Type_FixedBinary::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.length_) { 0 }

    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_FixedBinary::~Type_FixedBinary() {
  // @@protoc_insertion_point(destructor:substrait.Type.FixedBinary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_FixedBinary::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_FixedBinary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_FixedBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.FixedBinary)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.length_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FixedBinary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 length = 1 [json_name = "length"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_FixedBinary::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.FixedBinary)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_length(), target);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.FixedBinary)
  return target;
}

::size_t Type_FixedBinary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.FixedBinary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 length = 1 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_length());
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_FixedBinary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_FixedBinary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_FixedBinary::GetClassData() const { return &_class_data_; }


void Type_FixedBinary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_FixedBinary*>(&to_msg);
  auto& from = static_cast<const Type_FixedBinary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.FixedBinary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_FixedBinary::CopyFrom(const Type_FixedBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.FixedBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FixedBinary::IsInitialized() const {
  return true;
}

void Type_FixedBinary::InternalSwap(Type_FixedBinary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_FixedBinary, _impl_.nullability_)
      + sizeof(Type_FixedBinary::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_FixedBinary, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FixedBinary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[18]);
}
// ===================================================================

class Type_Decimal::_Internal {
 public:
};

Type_Decimal::Type_Decimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Decimal)
}
Type_Decimal::Type_Decimal(const Type_Decimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Decimal)
}

inline void Type_Decimal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.scale_) { 0 }

    , decltype(_impl_.precision_) { 0 }

    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Decimal::~Type_Decimal() {
  // @@protoc_insertion_point(destructor:substrait.Type.Decimal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Decimal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Type_Decimal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Decimal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scale_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.scale_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Decimal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 scale = 1 [json_name = "scale"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 precision = 2 [json_name = "precision"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Decimal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Decimal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1 [json_name = "scale"];
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_scale(), target);
  }

  // int32 precision = 2 [json_name = "precision"];
  if (this->_internal_precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_precision(), target);
  }

  // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Decimal)
  return target;
}

::size_t Type_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Decimal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 scale = 1 [json_name = "scale"];
  if (this->_internal_scale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_scale());
  }

  // int32 precision = 2 [json_name = "precision"];
  if (this->_internal_precision() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_precision());
  }

  // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Decimal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Decimal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Decimal::GetClassData() const { return &_class_data_; }


void Type_Decimal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Decimal*>(&to_msg);
  auto& from = static_cast<const Type_Decimal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Decimal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  if (from._internal_precision() != 0) {
    _this->_internal_set_precision(from._internal_precision());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Decimal::CopyFrom(const Type_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Decimal::IsInitialized() const {
  return true;
}

void Type_Decimal::InternalSwap(Type_Decimal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Decimal, _impl_.nullability_)
      + sizeof(Type_Decimal::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Decimal, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Decimal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[19]);
}
// ===================================================================

class Type_Struct::_Internal {
 public:
};

Type_Struct::Type_Struct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Struct)
}
Type_Struct::Type_Struct(const Type_Struct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_Struct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){from._impl_.types_}
    , decltype(_impl_.type_variation_reference_) {}

    , decltype(_impl_.nullability_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_variation_reference_, &from._impl_.type_variation_reference_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nullability_) -
    reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Struct)
}

inline void Type_Struct::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.types_){arena}
    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_Struct::~Type_Struct() {
  // @@protoc_insertion_point(destructor:substrait.Type.Struct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Struct::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_types()->~RepeatedPtrField();
}

void Type_Struct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Struct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Struct)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_types()->Clear();
  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Struct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.Type types = 1 [json_name = "types"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Struct::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Struct)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.Type types = 1 [json_name = "types"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Struct)
  return target;
}

::size_t Type_Struct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Struct)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Type types = 1 [json_name = "types"];
  total_size += 1UL * this->_internal_types_size();
  for (const auto& msg : this->_internal_types()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Struct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Struct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Struct::GetClassData() const { return &_class_data_; }


void Type_Struct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Struct*>(&to_msg);
  auto& from = static_cast<const Type_Struct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Struct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_types()->MergeFrom(from._internal_types());
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Struct::CopyFrom(const Type_Struct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Struct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Struct::IsInitialized() const {
  return true;
}

void Type_Struct::InternalSwap(Type_Struct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_types()->InternalSwap(other->_internal_mutable_types());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Struct, _impl_.nullability_)
      + sizeof(Type_Struct::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Struct, _impl_.type_variation_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_variation_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_variation_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Struct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[20]);
}
// ===================================================================

class Type_List::_Internal {
 public:
  using HasBits = decltype(std::declval<Type_List>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Type_List, _impl_._has_bits_);
  static const ::substrait::Type& type(const Type_List* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::substrait::Type&
Type_List::_Internal::type(const Type_List* msg) {
  return *msg->_impl_.type_;
}
Type_List::Type_List(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.List)
}
Type_List::Type_List(const Type_List& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_List* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.type_variation_reference_) {}

    , decltype(_impl_.nullability_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.type_ = new ::substrait::Type(*from._impl_.type_);
  }
  ::memcpy(&_impl_.type_variation_reference_, &from._impl_.type_variation_reference_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nullability_) -
    reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.Type.List)
}

inline void Type_List::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

  };
}

Type_List::~Type_List() {
  // @@protoc_insertion_point(destructor:substrait.Type.List)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_List::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.type_;
}

void Type_List::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_List::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.List)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.type_ != nullptr);
    _impl_.type_->Clear();
  }
  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_List::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Type type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_List::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.List)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Type type = 1 [json_name = "type"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.List)
  return target;
}

::size_t Type_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.List)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Type type = 1 [json_name = "type"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_List::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_List::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_List::GetClassData() const { return &_class_data_; }


void Type_List::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_List*>(&to_msg);
  auto& from = static_cast<const Type_List&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.List)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_type()->::substrait::Type::MergeFrom(
        from._internal_type());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_List::CopyFrom(const Type_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_List::IsInitialized() const {
  return true;
}

void Type_List::InternalSwap(Type_List* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_List, _impl_.nullability_)
      + sizeof(Type_List::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_List, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_List::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[21]);
}
// ===================================================================

class Type_Map::_Internal {
 public:
  using HasBits = decltype(std::declval<Type_Map>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Type_Map, _impl_._has_bits_);
  static const ::substrait::Type& key(const Type_Map* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::substrait::Type& value(const Type_Map* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::substrait::Type&
Type_Map::_Internal::key(const Type_Map* msg) {
  return *msg->_impl_.key_;
}
const ::substrait::Type&
Type_Map::_Internal::value(const Type_Map* msg) {
  return *msg->_impl_.value_;
}
Type_Map::Type_Map(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Map)
}
Type_Map::Type_Map(const Type_Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_Map* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_variation_reference_) {}

    , decltype(_impl_.nullability_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.key_ = new ::substrait::Type(*from._impl_.key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.value_ = new ::substrait::Type(*from._impl_.value_);
  }
  ::memcpy(&_impl_.type_variation_reference_, &from._impl_.type_variation_reference_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nullability_) -
    reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Map)
}

inline void Type_Map::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

  };
}

Type_Map::~Type_Map() {
  // @@protoc_insertion_point(destructor:substrait.Type.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Map::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Type_Map::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Map)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  ::memset(&_impl_.type_variation_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_variation_reference_)) + sizeof(_impl_.nullability_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Type key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Map::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Map)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Type key = 1 [json_name = "key"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // .substrait.Type value = 2 [json_name = "value"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_nullability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Map)
  return target;
}

::size_t Type_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .substrait.Type key = 1 [json_name = "key"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.key_);
    }

    // .substrait.Type value = 2 [json_name = "value"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

  }
  // uint32 type_variation_reference = 3 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 4 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Map::GetClassData() const { return &_class_data_; }


void Type_Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Map*>(&to_msg);
  auto& from = static_cast<const Type_Map&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::substrait::Type::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::substrait::Type::MergeFrom(
          from._internal_value());
    }
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Map::CopyFrom(const Type_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Map::IsInitialized() const {
  return true;
}

void Type_Map::InternalSwap(Type_Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_Map, _impl_.nullability_)
      + sizeof(Type_Map::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_Map, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[22]);
}
// ===================================================================

class Type_UserDefined::_Internal {
 public:
};

Type_UserDefined::Type_UserDefined(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.UserDefined)
}
Type_UserDefined::Type_UserDefined(const Type_UserDefined& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_UserDefined* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_parameters_){from._impl_.type_parameters_}
    , decltype(_impl_.type_reference_) {}

    , decltype(_impl_.type_variation_reference_) {}

    , decltype(_impl_.nullability_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.type_reference_, &from._impl_.type_reference_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nullability_) -
    reinterpret_cast<char*>(&_impl_.type_reference_)) + sizeof(_impl_.nullability_));
  // @@protoc_insertion_point(copy_constructor:substrait.Type.UserDefined)
}

inline void Type_UserDefined::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_parameters_){arena}
    , decltype(_impl_.type_reference_) { 0u }

    , decltype(_impl_.type_variation_reference_) { 0u }

    , decltype(_impl_.nullability_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_UserDefined::~Type_UserDefined() {
  // @@protoc_insertion_point(destructor:substrait.Type.UserDefined)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_UserDefined::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_type_parameters()->~RepeatedPtrField();
}

void Type_UserDefined::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_UserDefined::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.UserDefined)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_type_parameters()->Clear();
  ::memset(&_impl_.type_reference_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.nullability_) -
      reinterpret_cast<char*>(&_impl_.type_reference_)) + sizeof(_impl_.nullability_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_UserDefined::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 type_reference = 1 [json_name = "typeReference"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.type_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.type_variation_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_nullability(static_cast<::substrait::Type_Nullability>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .substrait.Type.Parameter type_parameters = 4 [json_name = "typeParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_UserDefined::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.UserDefined)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type_reference = 1 [json_name = "typeReference"];
  if (this->_internal_type_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_type_reference(), target);
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_type_variation_reference(), target);
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_nullability(), target);
  }

  // repeated .substrait.Type.Parameter type_parameters = 4 [json_name = "typeParameters"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_parameters_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_parameters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.UserDefined)
  return target;
}

::size_t Type_UserDefined::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.UserDefined)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.Type.Parameter type_parameters = 4 [json_name = "typeParameters"];
  total_size += 1UL * this->_internal_type_parameters_size();
  for (const auto& msg : this->_internal_type_parameters()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 type_reference = 1 [json_name = "typeReference"];
  if (this->_internal_type_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_reference());
  }

  // uint32 type_variation_reference = 2 [json_name = "typeVariationReference"];
  if (this->_internal_type_variation_reference() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_type_variation_reference());
  }

  // .substrait.Type.Nullability nullability = 3 [json_name = "nullability"];
  if (this->_internal_nullability() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_nullability());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_UserDefined::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_UserDefined::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_UserDefined::GetClassData() const { return &_class_data_; }


void Type_UserDefined::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_UserDefined*>(&to_msg);
  auto& from = static_cast<const Type_UserDefined&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.UserDefined)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_type_parameters()->MergeFrom(from._internal_type_parameters());
  if (from._internal_type_reference() != 0) {
    _this->_internal_set_type_reference(from._internal_type_reference());
  }
  if (from._internal_type_variation_reference() != 0) {
    _this->_internal_set_type_variation_reference(from._internal_type_variation_reference());
  }
  if (from._internal_nullability() != 0) {
    _this->_internal_set_nullability(from._internal_nullability());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_UserDefined::CopyFrom(const Type_UserDefined& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.UserDefined)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_UserDefined::IsInitialized() const {
  return true;
}

void Type_UserDefined::InternalSwap(Type_UserDefined* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_type_parameters()->InternalSwap(other->_internal_mutable_type_parameters());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_UserDefined, _impl_.nullability_)
      + sizeof(Type_UserDefined::_impl_.nullability_)
      - PROTOBUF_FIELD_OFFSET(Type_UserDefined, _impl_.type_reference_)>(
          reinterpret_cast<char*>(&_impl_.type_reference_),
          reinterpret_cast<char*>(&other->_impl_.type_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_UserDefined::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[23]);
}
// ===================================================================

class Type_Parameter::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::substrait::Type_Parameter, _impl_._oneof_case_);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& null(const Type_Parameter* msg);
  static const ::substrait::Type& data_type(const Type_Parameter* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
Type_Parameter::_Internal::null(const Type_Parameter* msg) {
  return *msg->_impl_.parameter_.null_;
}
const ::substrait::Type&
Type_Parameter::_Internal::data_type(const Type_Parameter* msg) {
  return *msg->_impl_.parameter_.data_type_;
}
void Type_Parameter::set_allocated_null(::PROTOBUF_NAMESPACE_ID::Empty* null) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameter();
  if (null) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(null));
    if (message_arena != submessage_arena) {
      null = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, null, submessage_arena);
    }
    set_has_null();
    _impl_.parameter_.null_ = null;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.Parameter.null)
}
void Type_Parameter::clear_null() {
  if (parameter_case() == kNull) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.parameter_.null_;
    }
    clear_has_parameter();
  }
}
void Type_Parameter::set_allocated_data_type(::substrait::Type* data_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_parameter();
  if (data_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_type);
    if (message_arena != submessage_arena) {
      data_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_type, submessage_arena);
    }
    set_has_data_type();
    _impl_.parameter_.data_type_ = data_type;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.Parameter.data_type)
}
Type_Parameter::Type_Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type.Parameter)
}
Type_Parameter::Type_Parameter(const Type_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_Parameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_parameter();
  switch (from.parameter_case()) {
    case kNull: {
      _this->_internal_mutable_null()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_null());
      break;
    }
    case kDataType: {
      _this->_internal_mutable_data_type()->::substrait::Type::MergeFrom(
          from._internal_data_type());
      break;
    }
    case kBoolean: {
      _this->_internal_set_boolean(from._internal_boolean());
      break;
    }
    case kInteger: {
      _this->_internal_set_integer(from._internal_integer());
      break;
    }
    case kEnum: {
      _this->_internal_set_enum_(from._internal_enum_());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Type.Parameter)
}

inline void Type_Parameter::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_parameter();
}

Type_Parameter::~Type_Parameter() {
  // @@protoc_insertion_point(destructor:substrait.Type.Parameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_Parameter::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_parameter()) {
    clear_parameter();
  }
}

void Type_Parameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_Parameter::clear_parameter() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Type.Parameter)
  switch (parameter_case()) {
    case kNull: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameter_.null_;
      }
      break;
    }
    case kDataType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.parameter_.data_type_;
      }
      break;
    }
    case kBoolean: {
      // No need to clear
      break;
    }
    case kInteger: {
      // No need to clear
      break;
    }
    case kEnum: {
      _impl_.parameter_.enum__.Destroy();
      break;
    }
    case kString: {
      _impl_.parameter_.string_.Destroy();
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PARAMETER_NOT_SET;
}


void Type_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type.Parameter)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_parameter();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_Parameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty null = 1 [json_name = "null"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_null(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type data_type = 2 [json_name = "dataType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool boolean = 3 [json_name = "boolean"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _internal_set_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 integer = 4 [json_name = "integer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _internal_set_integer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string enum = 5 [json_name = "enum"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_enum_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Type.Parameter.enum"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string string = 6 [json_name = "string"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "substrait.Type.Parameter.string"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type_Parameter::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type.Parameter)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (parameter_case()) {
    case kNull: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::null(this),
          _Internal::null(this).GetCachedSize(), target, stream);
      break;
    }
    case kDataType: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::data_type(this),
          _Internal::data_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kBoolean: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          3, this->_internal_boolean(), target);
      break;
    }
    case kInteger: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt64ToArray(
          4, this->_internal_integer(), target);
      break;
    }
    case kEnum: {
      const std::string& _s = this->_internal_enum_();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Type.Parameter.enum");
      target = stream->WriteStringMaybeAliased(5, _s, target);
      break;
    }
    case kString: {
      const std::string& _s = this->_internal_string();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.Type.Parameter.string");
      target = stream->WriteStringMaybeAliased(6, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type.Parameter)
  return target;
}

::size_t Type_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type.Parameter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (parameter_case()) {
    // .google.protobuf.Empty null = 1 [json_name = "null"];
    case kNull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameter_.null_);
      break;
    }
    // .substrait.Type data_type = 2 [json_name = "dataType"];
    case kDataType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parameter_.data_type_);
      break;
    }
    // bool boolean = 3 [json_name = "boolean"];
    case kBoolean: {
      total_size += 2;
      break;
    }
    // int64 integer = 4 [json_name = "integer"];
    case kInteger: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_integer());
      break;
    }
    // string enum = 5 [json_name = "enum"];
    case kEnum: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_enum_());
      break;
    }
    // string string = 6 [json_name = "string"];
    case kString: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_Parameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_Parameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_Parameter::GetClassData() const { return &_class_data_; }


void Type_Parameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_Parameter*>(&to_msg);
  auto& from = static_cast<const Type_Parameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type.Parameter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.parameter_case()) {
    case kNull: {
      _this->_internal_mutable_null()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_null());
      break;
    }
    case kDataType: {
      _this->_internal_mutable_data_type()->::substrait::Type::MergeFrom(
          from._internal_data_type());
      break;
    }
    case kBoolean: {
      _this->_internal_set_boolean(from._internal_boolean());
      break;
    }
    case kInteger: {
      _this->_internal_set_integer(from._internal_integer());
      break;
    }
    case kEnum: {
      _this->_internal_set_enum_(from._internal_enum_());
      break;
    }
    case kString: {
      _this->_internal_set_string(from._internal_string());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_Parameter::CopyFrom(const Type_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_Parameter::IsInitialized() const {
  return true;
}

void Type_Parameter::InternalSwap(Type_Parameter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.parameter_, other->_impl_.parameter_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_Parameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[24]);
}
// ===================================================================

class Type::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::substrait::Type, _impl_._oneof_case_);
  static const ::substrait::Type_Boolean& bool_(const Type* msg);
  static const ::substrait::Type_I8& i8(const Type* msg);
  static const ::substrait::Type_I16& i16(const Type* msg);
  static const ::substrait::Type_I32& i32(const Type* msg);
  static const ::substrait::Type_I64& i64(const Type* msg);
  static const ::substrait::Type_FP32& fp32(const Type* msg);
  static const ::substrait::Type_FP64& fp64(const Type* msg);
  static const ::substrait::Type_String& string(const Type* msg);
  static const ::substrait::Type_Binary& binary(const Type* msg);
  static const ::substrait::Type_Timestamp& timestamp(const Type* msg);
  static const ::substrait::Type_Date& date(const Type* msg);
  static const ::substrait::Type_Time& time(const Type* msg);
  static const ::substrait::Type_IntervalYear& interval_year(const Type* msg);
  static const ::substrait::Type_IntervalDay& interval_day(const Type* msg);
  static const ::substrait::Type_TimestampTZ& timestamp_tz(const Type* msg);
  static const ::substrait::Type_UUID& uuid(const Type* msg);
  static const ::substrait::Type_FixedChar& fixed_char(const Type* msg);
  static const ::substrait::Type_VarChar& varchar(const Type* msg);
  static const ::substrait::Type_FixedBinary& fixed_binary(const Type* msg);
  static const ::substrait::Type_Decimal& decimal(const Type* msg);
  static const ::substrait::Type_Struct& struct_(const Type* msg);
  static const ::substrait::Type_List& list(const Type* msg);
  static const ::substrait::Type_Map& map(const Type* msg);
  static const ::substrait::Type_UserDefined& user_defined(const Type* msg);
};

const ::substrait::Type_Boolean&
Type::_Internal::bool_(const Type* msg) {
  return *msg->_impl_.kind_.bool__;
}
const ::substrait::Type_I8&
Type::_Internal::i8(const Type* msg) {
  return *msg->_impl_.kind_.i8_;
}
const ::substrait::Type_I16&
Type::_Internal::i16(const Type* msg) {
  return *msg->_impl_.kind_.i16_;
}
const ::substrait::Type_I32&
Type::_Internal::i32(const Type* msg) {
  return *msg->_impl_.kind_.i32_;
}
const ::substrait::Type_I64&
Type::_Internal::i64(const Type* msg) {
  return *msg->_impl_.kind_.i64_;
}
const ::substrait::Type_FP32&
Type::_Internal::fp32(const Type* msg) {
  return *msg->_impl_.kind_.fp32_;
}
const ::substrait::Type_FP64&
Type::_Internal::fp64(const Type* msg) {
  return *msg->_impl_.kind_.fp64_;
}
const ::substrait::Type_String&
Type::_Internal::string(const Type* msg) {
  return *msg->_impl_.kind_.string_;
}
const ::substrait::Type_Binary&
Type::_Internal::binary(const Type* msg) {
  return *msg->_impl_.kind_.binary_;
}
const ::substrait::Type_Timestamp&
Type::_Internal::timestamp(const Type* msg) {
  return *msg->_impl_.kind_.timestamp_;
}
const ::substrait::Type_Date&
Type::_Internal::date(const Type* msg) {
  return *msg->_impl_.kind_.date_;
}
const ::substrait::Type_Time&
Type::_Internal::time(const Type* msg) {
  return *msg->_impl_.kind_.time_;
}
const ::substrait::Type_IntervalYear&
Type::_Internal::interval_year(const Type* msg) {
  return *msg->_impl_.kind_.interval_year_;
}
const ::substrait::Type_IntervalDay&
Type::_Internal::interval_day(const Type* msg) {
  return *msg->_impl_.kind_.interval_day_;
}
const ::substrait::Type_TimestampTZ&
Type::_Internal::timestamp_tz(const Type* msg) {
  return *msg->_impl_.kind_.timestamp_tz_;
}
const ::substrait::Type_UUID&
Type::_Internal::uuid(const Type* msg) {
  return *msg->_impl_.kind_.uuid_;
}
const ::substrait::Type_FixedChar&
Type::_Internal::fixed_char(const Type* msg) {
  return *msg->_impl_.kind_.fixed_char_;
}
const ::substrait::Type_VarChar&
Type::_Internal::varchar(const Type* msg) {
  return *msg->_impl_.kind_.varchar_;
}
const ::substrait::Type_FixedBinary&
Type::_Internal::fixed_binary(const Type* msg) {
  return *msg->_impl_.kind_.fixed_binary_;
}
const ::substrait::Type_Decimal&
Type::_Internal::decimal(const Type* msg) {
  return *msg->_impl_.kind_.decimal_;
}
const ::substrait::Type_Struct&
Type::_Internal::struct_(const Type* msg) {
  return *msg->_impl_.kind_.struct__;
}
const ::substrait::Type_List&
Type::_Internal::list(const Type* msg) {
  return *msg->_impl_.kind_.list_;
}
const ::substrait::Type_Map&
Type::_Internal::map(const Type* msg) {
  return *msg->_impl_.kind_.map_;
}
const ::substrait::Type_UserDefined&
Type::_Internal::user_defined(const Type* msg) {
  return *msg->_impl_.kind_.user_defined_;
}
void Type::set_allocated_bool_(::substrait::Type_Boolean* bool_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (bool_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bool_);
    if (message_arena != submessage_arena) {
      bool_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_, submessage_arena);
    }
    set_has_bool_();
    _impl_.kind_.bool__ = bool_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.bool)
}
void Type::set_allocated_i8(::substrait::Type_I8* i8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (i8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(i8);
    if (message_arena != submessage_arena) {
      i8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i8, submessage_arena);
    }
    set_has_i8();
    _impl_.kind_.i8_ = i8;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.i8)
}
void Type::set_allocated_i16(::substrait::Type_I16* i16) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (i16) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(i16);
    if (message_arena != submessage_arena) {
      i16 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i16, submessage_arena);
    }
    set_has_i16();
    _impl_.kind_.i16_ = i16;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.i16)
}
void Type::set_allocated_i32(::substrait::Type_I32* i32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (i32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(i32);
    if (message_arena != submessage_arena) {
      i32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i32, submessage_arena);
    }
    set_has_i32();
    _impl_.kind_.i32_ = i32;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.i32)
}
void Type::set_allocated_i64(::substrait::Type_I64* i64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (i64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(i64);
    if (message_arena != submessage_arena) {
      i64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, i64, submessage_arena);
    }
    set_has_i64();
    _impl_.kind_.i64_ = i64;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.i64)
}
void Type::set_allocated_fp32(::substrait::Type_FP32* fp32) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (fp32) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fp32);
    if (message_arena != submessage_arena) {
      fp32 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp32, submessage_arena);
    }
    set_has_fp32();
    _impl_.kind_.fp32_ = fp32;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.fp32)
}
void Type::set_allocated_fp64(::substrait::Type_FP64* fp64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (fp64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fp64);
    if (message_arena != submessage_arena) {
      fp64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fp64, submessage_arena);
    }
    set_has_fp64();
    _impl_.kind_.fp64_ = fp64;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.fp64)
}
void Type::set_allocated_string(::substrait::Type_String* string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string);
    if (message_arena != submessage_arena) {
      string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string, submessage_arena);
    }
    set_has_string();
    _impl_.kind_.string_ = string;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.string)
}
void Type::set_allocated_binary(::substrait::Type_Binary* binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(binary);
    if (message_arena != submessage_arena) {
      binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binary, submessage_arena);
    }
    set_has_binary();
    _impl_.kind_.binary_ = binary;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.binary)
}
void Type::set_allocated_timestamp(::substrait::Type_Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    set_has_timestamp();
    _impl_.kind_.timestamp_ = timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.timestamp)
}
void Type::set_allocated_date(::substrait::Type_Date* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(date);
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    set_has_date();
    _impl_.kind_.date_ = date;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.date)
}
void Type::set_allocated_time(::substrait::Type_Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(time);
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    _impl_.kind_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.time)
}
void Type::set_allocated_interval_year(::substrait::Type_IntervalYear* interval_year) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (interval_year) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval_year);
    if (message_arena != submessage_arena) {
      interval_year = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_year, submessage_arena);
    }
    set_has_interval_year();
    _impl_.kind_.interval_year_ = interval_year;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.interval_year)
}
void Type::set_allocated_interval_day(::substrait::Type_IntervalDay* interval_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (interval_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval_day);
    if (message_arena != submessage_arena) {
      interval_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_day, submessage_arena);
    }
    set_has_interval_day();
    _impl_.kind_.interval_day_ = interval_day;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.interval_day)
}
void Type::set_allocated_timestamp_tz(::substrait::Type_TimestampTZ* timestamp_tz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (timestamp_tz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timestamp_tz);
    if (message_arena != submessage_arena) {
      timestamp_tz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_tz, submessage_arena);
    }
    set_has_timestamp_tz();
    _impl_.kind_.timestamp_tz_ = timestamp_tz;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.timestamp_tz)
}
void Type::set_allocated_uuid(::substrait::Type_UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(uuid);
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    set_has_uuid();
    _impl_.kind_.uuid_ = uuid;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.uuid)
}
void Type::set_allocated_fixed_char(::substrait::Type_FixedChar* fixed_char) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (fixed_char) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed_char);
    if (message_arena != submessage_arena) {
      fixed_char = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_char, submessage_arena);
    }
    set_has_fixed_char();
    _impl_.kind_.fixed_char_ = fixed_char;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.fixed_char)
}
void Type::set_allocated_varchar(::substrait::Type_VarChar* varchar) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (varchar) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(varchar);
    if (message_arena != submessage_arena) {
      varchar = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, varchar, submessage_arena);
    }
    set_has_varchar();
    _impl_.kind_.varchar_ = varchar;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.varchar)
}
void Type::set_allocated_fixed_binary(::substrait::Type_FixedBinary* fixed_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (fixed_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fixed_binary);
    if (message_arena != submessage_arena) {
      fixed_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_binary, submessage_arena);
    }
    set_has_fixed_binary();
    _impl_.kind_.fixed_binary_ = fixed_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.fixed_binary)
}
void Type::set_allocated_decimal(::substrait::Type_Decimal* decimal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (decimal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(decimal);
    if (message_arena != submessage_arena) {
      decimal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decimal, submessage_arena);
    }
    set_has_decimal();
    _impl_.kind_.decimal_ = decimal;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.decimal)
}
void Type::set_allocated_struct_(::substrait::Type_Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(struct_);
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    _impl_.kind_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.struct)
}
void Type::set_allocated_list(::substrait::Type_List* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    set_has_list();
    _impl_.kind_.list_ = list;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.list)
}
void Type::set_allocated_map(::substrait::Type_Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    set_has_map();
    _impl_.kind_.map_ = map;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.map)
}
void Type::set_allocated_user_defined(::substrait::Type_UserDefined* user_defined) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (user_defined) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_defined);
    if (message_arena != submessage_arena) {
      user_defined = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_defined, submessage_arena);
    }
    set_has_user_defined();
    _impl_.kind_.user_defined_ = user_defined;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.Type.user_defined)
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kBool: {
      _this->_internal_mutable_bool_()->::substrait::Type_Boolean::MergeFrom(
          from._internal_bool_());
      break;
    }
    case kI8: {
      _this->_internal_mutable_i8()->::substrait::Type_I8::MergeFrom(
          from._internal_i8());
      break;
    }
    case kI16: {
      _this->_internal_mutable_i16()->::substrait::Type_I16::MergeFrom(
          from._internal_i16());
      break;
    }
    case kI32: {
      _this->_internal_mutable_i32()->::substrait::Type_I32::MergeFrom(
          from._internal_i32());
      break;
    }
    case kI64: {
      _this->_internal_mutable_i64()->::substrait::Type_I64::MergeFrom(
          from._internal_i64());
      break;
    }
    case kFp32: {
      _this->_internal_mutable_fp32()->::substrait::Type_FP32::MergeFrom(
          from._internal_fp32());
      break;
    }
    case kFp64: {
      _this->_internal_mutable_fp64()->::substrait::Type_FP64::MergeFrom(
          from._internal_fp64());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::substrait::Type_String::MergeFrom(
          from._internal_string());
      break;
    }
    case kBinary: {
      _this->_internal_mutable_binary()->::substrait::Type_Binary::MergeFrom(
          from._internal_binary());
      break;
    }
    case kTimestamp: {
      _this->_internal_mutable_timestamp()->::substrait::Type_Timestamp::MergeFrom(
          from._internal_timestamp());
      break;
    }
    case kDate: {
      _this->_internal_mutable_date()->::substrait::Type_Date::MergeFrom(
          from._internal_date());
      break;
    }
    case kTime: {
      _this->_internal_mutable_time()->::substrait::Type_Time::MergeFrom(
          from._internal_time());
      break;
    }
    case kIntervalYear: {
      _this->_internal_mutable_interval_year()->::substrait::Type_IntervalYear::MergeFrom(
          from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _this->_internal_mutable_interval_day()->::substrait::Type_IntervalDay::MergeFrom(
          from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _this->_internal_mutable_timestamp_tz()->::substrait::Type_TimestampTZ::MergeFrom(
          from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _this->_internal_mutable_uuid()->::substrait::Type_UUID::MergeFrom(
          from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _this->_internal_mutable_fixed_char()->::substrait::Type_FixedChar::MergeFrom(
          from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _this->_internal_mutable_varchar()->::substrait::Type_VarChar::MergeFrom(
          from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _this->_internal_mutable_fixed_binary()->::substrait::Type_FixedBinary::MergeFrom(
          from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _this->_internal_mutable_decimal()->::substrait::Type_Decimal::MergeFrom(
          from._internal_decimal());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Type_Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Type_List::MergeFrom(
          from._internal_list());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Type_Map::MergeFrom(
          from._internal_map());
      break;
    }
    case kUserDefined: {
      _this->_internal_mutable_user_defined()->::substrait::Type_UserDefined::MergeFrom(
          from._internal_user_defined());
      break;
    }
    case kUserDefinedTypeReference: {
      _this->_internal_set_user_defined_type_reference(from._internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.Type)
}

inline void Type::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:substrait.Type)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void Type::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:substrait.Type)
  switch (kind_case()) {
    case kBool: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.bool__;
      }
      break;
    }
    case kI8: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.i8_;
      }
      break;
    }
    case kI16: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.i16_;
      }
      break;
    }
    case kI32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.i32_;
      }
      break;
    }
    case kI64: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.i64_;
      }
      break;
    }
    case kFp32: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.fp32_;
      }
      break;
    }
    case kFp64: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.fp64_;
      }
      break;
    }
    case kString: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.string_;
      }
      break;
    }
    case kBinary: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.binary_;
      }
      break;
    }
    case kTimestamp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.timestamp_;
      }
      break;
    }
    case kDate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.date_;
      }
      break;
    }
    case kTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.time_;
      }
      break;
    }
    case kIntervalYear: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.interval_year_;
      }
      break;
    }
    case kIntervalDay: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.interval_day_;
      }
      break;
    }
    case kTimestampTz: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.timestamp_tz_;
      }
      break;
    }
    case kUuid: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.uuid_;
      }
      break;
    }
    case kFixedChar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.fixed_char_;
      }
      break;
    }
    case kVarchar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.varchar_;
      }
      break;
    }
    case kFixedBinary: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.fixed_binary_;
      }
      break;
    }
    case kDecimal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.decimal_;
      }
      break;
    }
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.struct__;
      }
      break;
    }
    case kList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.list_;
      }
      break;
    }
    case kMap: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.map_;
      }
      break;
    }
    case kUserDefined: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.user_defined_;
      }
      break;
    }
    case kUserDefinedTypeReference: {
      // No need to clear
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Type)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Type.Boolean bool = 1 [json_name = "bool"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.I8 i8 = 2 [json_name = "i8"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_i8(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.I16 i16 = 3 [json_name = "i16"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_i16(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.I32 i32 = 5 [json_name = "i32"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_i32(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.I64 i64 = 7 [json_name = "i64"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_i64(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.FP32 fp32 = 10 [json_name = "fp32"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp32(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.FP64 fp64 = 11 [json_name = "fp64"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fp64(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.String string = 12 [json_name = "string"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_string(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Binary binary = 13 [json_name = "binary"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_binary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Timestamp timestamp = 14 [json_name = "timestamp"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Date date = 16 [json_name = "date"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Time time = 17 [json_name = "time"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.IntervalYear interval_year = 19 [json_name = "intervalYear"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_year(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.IntervalDay interval_day = 20 [json_name = "intervalDay"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval_day(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.FixedChar fixed_char = 21 [json_name = "fixedChar"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_char(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.VarChar varchar = 22 [json_name = "varchar"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_varchar(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.FixedBinary fixed_binary = 23 [json_name = "fixedBinary"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_binary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Decimal decimal = 24 [json_name = "decimal"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_decimal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Struct struct = 25 [json_name = "struct"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.List list = 27 [json_name = "list"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Map map = 28 [json_name = "map"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.TimestampTZ timestamp_tz = 29 [json_name = "timestampTz"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp_tz(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.UserDefined user_defined = 30 [json_name = "userDefined"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_defined(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 user_defined_type_reference = 31 [json_name = "userDefinedTypeReference", deprecated = true];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 248)) {
          _internal_set_user_defined_type_reference(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.UUID uuid = 32 [json_name = "uuid"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Type::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Type)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (kind_case()) {
    case kBool: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::bool_(this),
          _Internal::bool_(this).GetCachedSize(), target, stream);
      break;
    }
    case kI8: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::i8(this),
          _Internal::i8(this).GetCachedSize(), target, stream);
      break;
    }
    case kI16: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::i16(this),
          _Internal::i16(this).GetCachedSize(), target, stream);
      break;
    }
    case kI32: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::i32(this),
          _Internal::i32(this).GetCachedSize(), target, stream);
      break;
    }
    case kI64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::i64(this),
          _Internal::i64(this).GetCachedSize(), target, stream);
      break;
    }
    case kFp32: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::fp32(this),
          _Internal::fp32(this).GetCachedSize(), target, stream);
      break;
    }
    case kFp64: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::fp64(this),
          _Internal::fp64(this).GetCachedSize(), target, stream);
      break;
    }
    case kString: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::string(this),
          _Internal::string(this).GetCachedSize(), target, stream);
      break;
    }
    case kBinary: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::binary(this),
          _Internal::binary(this).GetCachedSize(), target, stream);
      break;
    }
    case kTimestamp: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::timestamp(this),
          _Internal::timestamp(this).GetCachedSize(), target, stream);
      break;
    }
    case kDate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::date(this),
          _Internal::date(this).GetCachedSize(), target, stream);
      break;
    }
    case kTime: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::time(this),
          _Internal::time(this).GetCachedSize(), target, stream);
      break;
    }
    case kIntervalYear: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::interval_year(this),
          _Internal::interval_year(this).GetCachedSize(), target, stream);
      break;
    }
    case kIntervalDay: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::interval_day(this),
          _Internal::interval_day(this).GetCachedSize(), target, stream);
      break;
    }
    case kFixedChar: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::fixed_char(this),
          _Internal::fixed_char(this).GetCachedSize(), target, stream);
      break;
    }
    case kVarchar: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::varchar(this),
          _Internal::varchar(this).GetCachedSize(), target, stream);
      break;
    }
    case kFixedBinary: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::fixed_binary(this),
          _Internal::fixed_binary(this).GetCachedSize(), target, stream);
      break;
    }
    case kDecimal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::decimal(this),
          _Internal::decimal(this).GetCachedSize(), target, stream);
      break;
    }
    case kStruct: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::struct_(this),
          _Internal::struct_(this).GetCachedSize(), target, stream);
      break;
    }
    case kList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::list(this),
          _Internal::list(this).GetCachedSize(), target, stream);
      break;
    }
    case kMap: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::map(this),
          _Internal::map(this).GetCachedSize(), target, stream);
      break;
    }
    case kTimestampTz: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::timestamp_tz(this),
          _Internal::timestamp_tz(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserDefined: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::user_defined(this),
          _Internal::user_defined(this).GetCachedSize(), target, stream);
      break;
    }
    case kUserDefinedTypeReference: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
          31, this->_internal_user_defined_type_reference(), target);
      break;
    }
    case kUuid: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::uuid(this),
          _Internal::uuid(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Type)
  return target;
}

::size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Type)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .substrait.Type.Boolean bool = 1 [json_name = "bool"];
    case kBool: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.bool__);
      break;
    }
    // .substrait.Type.I8 i8 = 2 [json_name = "i8"];
    case kI8: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.i8_);
      break;
    }
    // .substrait.Type.I16 i16 = 3 [json_name = "i16"];
    case kI16: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.i16_);
      break;
    }
    // .substrait.Type.I32 i32 = 5 [json_name = "i32"];
    case kI32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.i32_);
      break;
    }
    // .substrait.Type.I64 i64 = 7 [json_name = "i64"];
    case kI64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.i64_);
      break;
    }
    // .substrait.Type.FP32 fp32 = 10 [json_name = "fp32"];
    case kFp32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.fp32_);
      break;
    }
    // .substrait.Type.FP64 fp64 = 11 [json_name = "fp64"];
    case kFp64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.fp64_);
      break;
    }
    // .substrait.Type.String string = 12 [json_name = "string"];
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.string_);
      break;
    }
    // .substrait.Type.Binary binary = 13 [json_name = "binary"];
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.binary_);
      break;
    }
    // .substrait.Type.Timestamp timestamp = 14 [json_name = "timestamp"];
    case kTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.timestamp_);
      break;
    }
    // .substrait.Type.Date date = 16 [json_name = "date"];
    case kDate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.date_);
      break;
    }
    // .substrait.Type.Time time = 17 [json_name = "time"];
    case kTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.time_);
      break;
    }
    // .substrait.Type.IntervalYear interval_year = 19 [json_name = "intervalYear"];
    case kIntervalYear: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.interval_year_);
      break;
    }
    // .substrait.Type.IntervalDay interval_day = 20 [json_name = "intervalDay"];
    case kIntervalDay: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.interval_day_);
      break;
    }
    // .substrait.Type.TimestampTZ timestamp_tz = 29 [json_name = "timestampTz"];
    case kTimestampTz: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.timestamp_tz_);
      break;
    }
    // .substrait.Type.UUID uuid = 32 [json_name = "uuid"];
    case kUuid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.uuid_);
      break;
    }
    // .substrait.Type.FixedChar fixed_char = 21 [json_name = "fixedChar"];
    case kFixedChar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.fixed_char_);
      break;
    }
    // .substrait.Type.VarChar varchar = 22 [json_name = "varchar"];
    case kVarchar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.varchar_);
      break;
    }
    // .substrait.Type.FixedBinary fixed_binary = 23 [json_name = "fixedBinary"];
    case kFixedBinary: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.fixed_binary_);
      break;
    }
    // .substrait.Type.Decimal decimal = 24 [json_name = "decimal"];
    case kDecimal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.decimal_);
      break;
    }
    // .substrait.Type.Struct struct = 25 [json_name = "struct"];
    case kStruct: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.struct__);
      break;
    }
    // .substrait.Type.List list = 27 [json_name = "list"];
    case kList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.list_);
      break;
    }
    // .substrait.Type.Map map = 28 [json_name = "map"];
    case kMap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.map_);
      break;
    }
    // .substrait.Type.UserDefined user_defined = 30 [json_name = "userDefined"];
    case kUserDefined: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.user_defined_);
      break;
    }
    // uint32 user_defined_type_reference = 31 [json_name = "userDefinedTypeReference", deprecated = true];
    case kUserDefinedTypeReference: {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type::GetClassData() const { return &_class_data_; }


void Type::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type*>(&to_msg);
  auto& from = static_cast<const Type&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Type)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kBool: {
      _this->_internal_mutable_bool_()->::substrait::Type_Boolean::MergeFrom(
          from._internal_bool_());
      break;
    }
    case kI8: {
      _this->_internal_mutable_i8()->::substrait::Type_I8::MergeFrom(
          from._internal_i8());
      break;
    }
    case kI16: {
      _this->_internal_mutable_i16()->::substrait::Type_I16::MergeFrom(
          from._internal_i16());
      break;
    }
    case kI32: {
      _this->_internal_mutable_i32()->::substrait::Type_I32::MergeFrom(
          from._internal_i32());
      break;
    }
    case kI64: {
      _this->_internal_mutable_i64()->::substrait::Type_I64::MergeFrom(
          from._internal_i64());
      break;
    }
    case kFp32: {
      _this->_internal_mutable_fp32()->::substrait::Type_FP32::MergeFrom(
          from._internal_fp32());
      break;
    }
    case kFp64: {
      _this->_internal_mutable_fp64()->::substrait::Type_FP64::MergeFrom(
          from._internal_fp64());
      break;
    }
    case kString: {
      _this->_internal_mutable_string()->::substrait::Type_String::MergeFrom(
          from._internal_string());
      break;
    }
    case kBinary: {
      _this->_internal_mutable_binary()->::substrait::Type_Binary::MergeFrom(
          from._internal_binary());
      break;
    }
    case kTimestamp: {
      _this->_internal_mutable_timestamp()->::substrait::Type_Timestamp::MergeFrom(
          from._internal_timestamp());
      break;
    }
    case kDate: {
      _this->_internal_mutable_date()->::substrait::Type_Date::MergeFrom(
          from._internal_date());
      break;
    }
    case kTime: {
      _this->_internal_mutable_time()->::substrait::Type_Time::MergeFrom(
          from._internal_time());
      break;
    }
    case kIntervalYear: {
      _this->_internal_mutable_interval_year()->::substrait::Type_IntervalYear::MergeFrom(
          from._internal_interval_year());
      break;
    }
    case kIntervalDay: {
      _this->_internal_mutable_interval_day()->::substrait::Type_IntervalDay::MergeFrom(
          from._internal_interval_day());
      break;
    }
    case kTimestampTz: {
      _this->_internal_mutable_timestamp_tz()->::substrait::Type_TimestampTZ::MergeFrom(
          from._internal_timestamp_tz());
      break;
    }
    case kUuid: {
      _this->_internal_mutable_uuid()->::substrait::Type_UUID::MergeFrom(
          from._internal_uuid());
      break;
    }
    case kFixedChar: {
      _this->_internal_mutable_fixed_char()->::substrait::Type_FixedChar::MergeFrom(
          from._internal_fixed_char());
      break;
    }
    case kVarchar: {
      _this->_internal_mutable_varchar()->::substrait::Type_VarChar::MergeFrom(
          from._internal_varchar());
      break;
    }
    case kFixedBinary: {
      _this->_internal_mutable_fixed_binary()->::substrait::Type_FixedBinary::MergeFrom(
          from._internal_fixed_binary());
      break;
    }
    case kDecimal: {
      _this->_internal_mutable_decimal()->::substrait::Type_Decimal::MergeFrom(
          from._internal_decimal());
      break;
    }
    case kStruct: {
      _this->_internal_mutable_struct_()->::substrait::Type_Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kList: {
      _this->_internal_mutable_list()->::substrait::Type_List::MergeFrom(
          from._internal_list());
      break;
    }
    case kMap: {
      _this->_internal_mutable_map()->::substrait::Type_Map::MergeFrom(
          from._internal_map());
      break;
    }
    case kUserDefined: {
      _this->_internal_mutable_user_defined()->::substrait::Type_UserDefined::MergeFrom(
          from._internal_user_defined());
      break;
    }
    case kUserDefinedTypeReference: {
      _this->_internal_set_user_defined_type_reference(from._internal_user_defined_type_reference());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[25]);
}
// ===================================================================

class NamedStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<NamedStruct>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NamedStruct, _impl_._has_bits_);
  static const ::substrait::Type_Struct& struct_(const NamedStruct* msg);
  static void set_has_struct_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::substrait::Type_Struct&
NamedStruct::_Internal::struct_(const NamedStruct* msg) {
  return *msg->_impl_.struct__;
}
NamedStruct::NamedStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.NamedStruct)
}
NamedStruct::NamedStruct(const NamedStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){from._impl_.names_}
    , decltype(_impl_.struct__){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.struct__ = new ::substrait::Type_Struct(*from._impl_.struct__);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.NamedStruct)
}

inline void NamedStruct::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_){arena}
    , decltype(_impl_.struct__){nullptr}
  };
}

NamedStruct::~NamedStruct() {
  // @@protoc_insertion_point(destructor:substrait.NamedStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedStruct::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_names()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.struct__;
}

void NamedStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.NamedStruct)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_names()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.struct__ != nullptr);
    _impl_.struct__->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1 [json_name = "names"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.NamedStruct.names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .substrait.Type.Struct struct = 2 [json_name = "struct"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NamedStruct::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.NamedStruct)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1 [json_name = "names"];
  for (int i = 0, n = this->_internal_names_size(); i < n; ++i) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "substrait.NamedStruct.names");
    target = stream->WriteString(1, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Type.Struct struct = 2 [json_name = "struct"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.NamedStruct)
  return target;
}

::size_t NamedStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.NamedStruct)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1 [json_name = "names"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_names().size());
  for (int i = 0, n = _internal_names().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_names().Get(i));
  }

  // .substrait.Type.Struct struct = 2 [json_name = "struct"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.struct__);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedStruct::GetClassData() const { return &_class_data_; }


void NamedStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedStruct*>(&to_msg);
  auto& from = static_cast<const NamedStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.NamedStruct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_names()->MergeFrom(from._internal_names());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_struct_()->::substrait::Type_Struct::MergeFrom(
        from._internal_struct_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedStruct::CopyFrom(const NamedStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.NamedStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedStruct::IsInitialized() const {
  return true;
}

void NamedStruct::InternalSwap(NamedStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_names()->InternalSwap(
      other->_internal_mutable_names());
  swap(_impl_.struct__, other->_impl_.struct__);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2ftype_2eproto_getter, &descriptor_table_substrait_2ftype_2eproto_once,
      file_level_metadata_substrait_2ftype_2eproto[26]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::Type_Boolean*
Arena::CreateMaybeMessage< ::substrait::Type_Boolean >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Boolean >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_I8*
Arena::CreateMaybeMessage< ::substrait::Type_I8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_I8 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_I16*
Arena::CreateMaybeMessage< ::substrait::Type_I16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_I16 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_I32*
Arena::CreateMaybeMessage< ::substrait::Type_I32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_I32 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_I64*
Arena::CreateMaybeMessage< ::substrait::Type_I64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_I64 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_FP32*
Arena::CreateMaybeMessage< ::substrait::Type_FP32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_FP32 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_FP64*
Arena::CreateMaybeMessage< ::substrait::Type_FP64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_FP64 >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_String*
Arena::CreateMaybeMessage< ::substrait::Type_String >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_String >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Binary*
Arena::CreateMaybeMessage< ::substrait::Type_Binary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Binary >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Timestamp*
Arena::CreateMaybeMessage< ::substrait::Type_Timestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Timestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Date*
Arena::CreateMaybeMessage< ::substrait::Type_Date >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Date >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Time*
Arena::CreateMaybeMessage< ::substrait::Type_Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Time >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_TimestampTZ*
Arena::CreateMaybeMessage< ::substrait::Type_TimestampTZ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_TimestampTZ >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_IntervalYear*
Arena::CreateMaybeMessage< ::substrait::Type_IntervalYear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_IntervalYear >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_IntervalDay*
Arena::CreateMaybeMessage< ::substrait::Type_IntervalDay >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_IntervalDay >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_UUID*
Arena::CreateMaybeMessage< ::substrait::Type_UUID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_UUID >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_FixedChar*
Arena::CreateMaybeMessage< ::substrait::Type_FixedChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_FixedChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_VarChar*
Arena::CreateMaybeMessage< ::substrait::Type_VarChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_VarChar >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_FixedBinary*
Arena::CreateMaybeMessage< ::substrait::Type_FixedBinary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_FixedBinary >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Decimal*
Arena::CreateMaybeMessage< ::substrait::Type_Decimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Decimal >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Struct*
Arena::CreateMaybeMessage< ::substrait::Type_Struct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Struct >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_List*
Arena::CreateMaybeMessage< ::substrait::Type_List >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_List >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Map*
Arena::CreateMaybeMessage< ::substrait::Type_Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Map >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_UserDefined*
Arena::CreateMaybeMessage< ::substrait::Type_UserDefined >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_UserDefined >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type_Parameter*
Arena::CreateMaybeMessage< ::substrait::Type_Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::Type*
Arena::CreateMaybeMessage< ::substrait::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::NamedStruct*
Arena::CreateMaybeMessage< ::substrait::NamedStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::NamedStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
