// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mohair/topology.proto
// Protobuf C++ Version: 5.27.1

#include "../mohair/topology.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mohair {

inline constexpr MemoryResources::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        count_mebibytes_{0u},
        memory_type_{static_cast< ::mohair::MemoryType >(0)},
        count_channels_{0u},
        memory_freq_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MemoryResources::MemoryResources(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct MemoryResourcesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryResourcesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryResourcesDefaultTypeInternal() {}
  union {
    MemoryResources _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryResourcesDefaultTypeInternal _MemoryResources_default_instance_;

inline constexpr ComputeResources::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : core_freqs_{},
        count_cores_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComputeResources::ComputeResources(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComputeResourcesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComputeResourcesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComputeResourcesDefaultTypeInternal() {}
  union {
    ComputeResources _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComputeResourcesDefaultTypeInternal _ComputeResources_default_instance_;

inline constexpr ServiceConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        downstream_services_{},
        service_compute_{},
        service_location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        service_mem_{nullptr},
        is_active_{false},
        platform_class_{static_cast< ::mohair::DeviceClass >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ServiceConfig::ServiceConfig(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceConfigDefaultTypeInternal() {}
  union {
    ServiceConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
}  // namespace mohair
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mohair_2ftopology_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_mohair_2ftopology_2eproto = nullptr;
const ::uint32_t
    TableStruct_mohair_2ftopology_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::mohair::ComputeResources, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mohair::ComputeResources, _impl_.count_cores_),
        PROTOBUF_FIELD_OFFSET(::mohair::ComputeResources, _impl_.core_freqs_),
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _impl_.count_mebibytes_),
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _impl_.memory_type_),
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _impl_.count_channels_),
        PROTOBUF_FIELD_OFFSET(::mohair::MemoryResources, _impl_.memory_freq_),
        ~0u,
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.is_active_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.service_location_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.platform_class_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.downstream_services_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.service_mem_),
        PROTOBUF_FIELD_OFFSET(::mohair::ServiceConfig, _impl_.service_compute_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mohair::ComputeResources)},
        {10, 22, -1, sizeof(::mohair::MemoryResources)},
        {26, 40, -1, sizeof(::mohair::ServiceConfig)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::mohair::_ComputeResources_default_instance_._instance,
    &::mohair::_MemoryResources_default_instance_._instance,
    &::mohair::_ServiceConfig_default_instance_._instance,
};
const char descriptor_table_protodef_mohair_2ftopology_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\025mohair/topology.proto\022\006mohair\032\031google/"
    "protobuf/any.proto\"R\n\020ComputeResources\022\037"
    "\n\013count_cores\030\001 \001(\rR\ncountCores\022\035\n\ncore_"
    "freqs\030\002 \003(\002R\tcoreFreqs\"\371\001\n\017MemoryResourc"
    "es\022\'\n\017count_mebibytes\030\001 \001(\rR\016countMebiby"
    "tes\0228\n\013memory_type\030\002 \001(\0162\022.mohair.Memory"
    "TypeH\000R\nmemoryType\210\001\001\022*\n\016count_channels\030"
    "\003 \001(\rH\001R\rcountChannels\210\001\001\022$\n\013memory_freq"
    "\030\004 \001(\rH\002R\nmemoryFreq\210\001\001B\016\n\014_memory_typeB"
    "\021\n\017_count_channelsB\016\n\014_memory_freq\"\355\002\n\rS"
    "erviceConfig\022\033\n\tis_active\030\001 \001(\010R\010isActiv"
    "e\022)\n\020service_location\030\002 \001(\tR\017serviceLoca"
    "tion\022:\n\016platform_class\030\003 \001(\0162\023.mohair.De"
    "viceClassR\rplatformClass\022F\n\023downstream_s"
    "ervices\030\004 \003(\0132\025.mohair.ServiceConfigR\022do"
    "wnstreamServices\022=\n\013service_mem\030\005 \001(\0132\027."
    "mohair.MemoryResourcesH\000R\nserviceMem\210\001\001\022"
    "A\n\017service_compute\030\006 \003(\0132\030.mohair.Comput"
    "eResourcesR\016serviceComputeB\016\n\014_service_m"
    "em*\202\001\n\013DeviceClass\022\027\n\023DEVICE_CLASS_SERVE"
    "R\020\000\022\026\n\022DEVICE_CLASS_DRIVE\020\001\022\024\n\020DEVICE_CL"
    "ASS_SOC\020\002\022\026\n\022DEVICE_CLASS_ARRAY\020\003\022\024\n\020DEV"
    "ICE_CLASS_DPU\020\004*v\n\nMemoryType\022\023\n\017MEMORY_"
    "TYPE_DDR\020\000\022\024\n\020MEMORY_TYPE_GDDR\020\001\022\023\n\017MEMO"
    "RY_TYPE_NVM\020\002\022\023\n\017MEMORY_TYPE_CXL\020\003\022\023\n\017ME"
    "MORY_TYPE_CAM\020\004BS\n\ncom.mohairB\rTopologyP"
    "rotoP\001\242\002\003MXX\252\002\006Mohair\312\002\006Mohair\342\002\022Mohair\\"
    "GPBMetadata\352\002\006Mohairb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_mohair_2ftopology_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_mohair_2ftopology_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_mohair_2ftopology_2eproto = {
    false,
    false,
    1108,
    descriptor_table_protodef_mohair_2ftopology_2eproto,
    "mohair/topology.proto",
    &descriptor_table_mohair_2ftopology_2eproto_once,
    descriptor_table_mohair_2ftopology_2eproto_deps,
    1,
    3,
    schemas,
    file_default_instances,
    TableStruct_mohair_2ftopology_2eproto::offsets,
    file_level_enum_descriptors_mohair_2ftopology_2eproto,
    file_level_service_descriptors_mohair_2ftopology_2eproto,
};
namespace mohair {
const ::google::protobuf::EnumDescriptor* DeviceClass_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_mohair_2ftopology_2eproto);
  return file_level_enum_descriptors_mohair_2ftopology_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t DeviceClass_internal_data_[] = {
    327680u, 0u, };
bool DeviceClass_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* MemoryType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_mohair_2ftopology_2eproto);
  return file_level_enum_descriptors_mohair_2ftopology_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t MemoryType_internal_data_[] = {
    327680u, 0u, };
bool MemoryType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
// ===================================================================

class ComputeResources::_Internal {
 public:
};

ComputeResources::ComputeResources(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.ComputeResources)
}
inline PROTOBUF_NDEBUG_INLINE ComputeResources::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mohair::ComputeResources& from_msg)
      : core_freqs_{visibility, arena, from.core_freqs_},
        _cached_size_{0} {}

ComputeResources::ComputeResources(
    ::google::protobuf::Arena* arena,
    const ComputeResources& from)
    : ::google::protobuf::Message(arena) {
  ComputeResources* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.count_cores_ = from._impl_.count_cores_;

  // @@protoc_insertion_point(copy_constructor:mohair.ComputeResources)
}
inline PROTOBUF_NDEBUG_INLINE ComputeResources::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : core_freqs_{visibility, arena},
        _cached_size_{0} {}

inline void ComputeResources::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.count_cores_ = {};
}
ComputeResources::~ComputeResources() {
  // @@protoc_insertion_point(destructor:mohair.ComputeResources)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComputeResources::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComputeResources::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ComputeResources, _impl_._cached_size_),
              false,
          },
          &ComputeResources::MergeImpl,
          &ComputeResources::kDescriptorMethods,
          &descriptor_table_mohair_2ftopology_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> ComputeResources::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ComputeResources_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mohair::ComputeResources>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float core_freqs = 2 [json_name = "coreFreqs"];
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ComputeResources, _impl_.core_freqs_)}},
    // uint32 count_cores = 1 [json_name = "countCores"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ComputeResources, _impl_.count_cores_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ComputeResources, _impl_.count_cores_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 count_cores = 1 [json_name = "countCores"];
    {PROTOBUF_FIELD_OFFSET(ComputeResources, _impl_.count_cores_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated float core_freqs = 2 [json_name = "coreFreqs"];
    {PROTOBUF_FIELD_OFFSET(ComputeResources, _impl_.core_freqs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ComputeResources::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.ComputeResources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.core_freqs_.Clear();
  _impl_.count_cores_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ComputeResources::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.ComputeResources)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 count_cores = 1 [json_name = "countCores"];
  if (this->_internal_count_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_count_cores(), target);
  }

  // repeated float core_freqs = 2 [json_name = "coreFreqs"];
  if (this->_internal_core_freqs_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_core_freqs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.ComputeResources)
  return target;
}

::size_t ComputeResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.ComputeResources)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated float core_freqs = 2 [json_name = "coreFreqs"];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_core_freqs_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // uint32 count_cores = 1 [json_name = "countCores"];
  if (this->_internal_count_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_count_cores());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComputeResources::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComputeResources*>(&to_msg);
  auto& from = static_cast<const ComputeResources&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.ComputeResources)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_core_freqs()->MergeFrom(from._internal_core_freqs());
  if (from._internal_count_cores() != 0) {
    _this->_impl_.count_cores_ = from._impl_.count_cores_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComputeResources::CopyFrom(const ComputeResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.ComputeResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ComputeResources::InternalSwap(ComputeResources* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.core_freqs_.InternalSwap(&other->_impl_.core_freqs_);
        swap(_impl_.count_cores_, other->_impl_.count_cores_);
}

::google::protobuf::Metadata ComputeResources::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MemoryResources::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MemoryResources>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_._has_bits_);
};

MemoryResources::MemoryResources(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.MemoryResources)
}
MemoryResources::MemoryResources(
    ::google::protobuf::Arena* arena, const MemoryResources& from)
    : MemoryResources(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MemoryResources::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MemoryResources::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, count_mebibytes_),
           0,
           offsetof(Impl_, memory_freq_) -
               offsetof(Impl_, count_mebibytes_) +
               sizeof(Impl_::memory_freq_));
}
MemoryResources::~MemoryResources() {
  // @@protoc_insertion_point(destructor:mohair.MemoryResources)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void MemoryResources::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
MemoryResources::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_._cached_size_),
              false,
          },
          &MemoryResources::MergeImpl,
          &MemoryResources::kDescriptorMethods,
          &descriptor_table_mohair_2ftopology_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> MemoryResources::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_MemoryResources_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mohair::MemoryResources>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemoryResources, _impl_.memory_freq_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.memory_freq_)}},
    // uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemoryResources, _impl_.count_mebibytes_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.count_mebibytes_)}},
    // optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemoryResources, _impl_.memory_type_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.memory_type_)}},
    // optional uint32 count_channels = 3 [json_name = "countChannels"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MemoryResources, _impl_.count_channels_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.count_channels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
    {PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.count_mebibytes_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
    {PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.memory_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional uint32 count_channels = 3 [json_name = "countChannels"];
    {PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.count_channels_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
    {PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.memory_freq_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MemoryResources::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.MemoryResources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.count_mebibytes_ = 0u;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.memory_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.memory_freq_) -
        reinterpret_cast<char*>(&_impl_.memory_type_)) + sizeof(_impl_.memory_freq_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* MemoryResources::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.MemoryResources)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
  if (this->_internal_count_mebibytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_count_mebibytes(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_memory_type(), target);
  }

  // optional uint32 count_channels = 3 [json_name = "countChannels"];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_count_channels(), target);
  }

  // optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_memory_freq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.MemoryResources)
  return target;
}

::size_t MemoryResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.MemoryResources)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
  if (this->_internal_count_mebibytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_count_mebibytes());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_memory_type());
    }

    // optional uint32 count_channels = 3 [json_name = "countChannels"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_count_channels());
    }

    // optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_memory_freq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void MemoryResources::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MemoryResources*>(&to_msg);
  auto& from = static_cast<const MemoryResources&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.MemoryResources)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count_mebibytes() != 0) {
    _this->_impl_.count_mebibytes_ = from._impl_.count_mebibytes_;
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.memory_type_ = from._impl_.memory_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_channels_ = from._impl_.count_channels_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.memory_freq_ = from._impl_.memory_freq_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryResources::CopyFrom(const MemoryResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.MemoryResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MemoryResources::InternalSwap(MemoryResources* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.memory_freq_)
      + sizeof(MemoryResources::_impl_.memory_freq_)
      - PROTOBUF_FIELD_OFFSET(MemoryResources, _impl_.count_mebibytes_)>(
          reinterpret_cast<char*>(&_impl_.count_mebibytes_),
          reinterpret_cast<char*>(&other->_impl_.count_mebibytes_));
}

::google::protobuf::Metadata MemoryResources::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ServiceConfig::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ServiceConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._has_bits_);
};

ServiceConfig::ServiceConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mohair.ServiceConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServiceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::mohair::ServiceConfig& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        downstream_services_{visibility, arena, from.downstream_services_},
        service_compute_{visibility, arena, from.service_compute_},
        service_location_(arena, from.service_location_) {}

ServiceConfig::ServiceConfig(
    ::google::protobuf::Arena* arena,
    const ServiceConfig& from)
    : ::google::protobuf::Message(arena) {
  ServiceConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.service_mem_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::mohair::MemoryResources>(
                              arena, *from._impl_.service_mem_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_active_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, is_active_),
           offsetof(Impl_, platform_class_) -
               offsetof(Impl_, is_active_) +
               sizeof(Impl_::platform_class_));

  // @@protoc_insertion_point(copy_constructor:mohair.ServiceConfig)
}
inline PROTOBUF_NDEBUG_INLINE ServiceConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        downstream_services_{visibility, arena},
        service_compute_{visibility, arena},
        service_location_(arena) {}

inline void ServiceConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, service_mem_),
           0,
           offsetof(Impl_, platform_class_) -
               offsetof(Impl_, service_mem_) +
               sizeof(Impl_::platform_class_));
}
ServiceConfig::~ServiceConfig() {
  // @@protoc_insertion_point(destructor:mohair.ServiceConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ServiceConfig::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.service_location_.Destroy();
  delete _impl_.service_mem_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ServiceConfig::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              &_table_.header,
              nullptr,  // OnDemandRegisterArenaDtor
              nullptr,  // IsInitialized
              PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._cached_size_),
              false,
          },
          &ServiceConfig::MergeImpl,
          &ServiceConfig::kDescriptorMethods,
          &descriptor_table_mohair_2ftopology_2eproto,
          nullptr,  // tracker
      };
  ::google::protobuf::internal::PrefetchToLocalCache(&_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_data_.tc_table);
  return _data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 3, 45, 2> ServiceConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ServiceConfig_default_instance_._instance,
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::mohair::ServiceConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_active = 1 [json_name = "isActive"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ServiceConfig, _impl_.is_active_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.is_active_)}},
    // string service_location = 2 [json_name = "serviceLocation"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_location_)}},
    // .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ServiceConfig, _impl_.platform_class_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.platform_class_)}},
    // repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.downstream_services_)}},
    // optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 1, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_mem_)}},
    // repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 2, PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_compute_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_active = 1 [json_name = "isActive"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.is_active_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string service_location = 2 [json_name = "serviceLocation"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_location_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.platform_class_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.downstream_services_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_mem_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
    {PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_compute_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mohair::ServiceConfig>()},
    {::_pbi::TcParser::GetTable<::mohair::MemoryResources>()},
    {::_pbi::TcParser::GetTable<::mohair::ComputeResources>()},
  }}, {{
    "\24\0\20\0\0\0\0\0"
    "mohair.ServiceConfig"
    "service_location"
  }},
};

PROTOBUF_NOINLINE void ServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:mohair.ServiceConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.downstream_services_.Clear();
  _impl_.service_compute_.Clear();
  _impl_.service_location_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.service_mem_ != nullptr);
    _impl_.service_mem_->Clear();
  }
  ::memset(&_impl_.is_active_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.platform_class_) -
      reinterpret_cast<char*>(&_impl_.is_active_)) + sizeof(_impl_.platform_class_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

::uint8_t* ServiceConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mohair.ServiceConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool is_active = 1 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_is_active(), target);
  }

  // string service_location = 2 [json_name = "serviceLocation"];
  if (!this->_internal_service_location().empty()) {
    const std::string& _s = this->_internal_service_location();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mohair.ServiceConfig.service_location");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
  if (this->_internal_platform_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_platform_class(), target);
  }

  // repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_downstream_services_size());
       i < n; i++) {
    const auto& repfield = this->_internal_downstream_services().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *_impl_.service_mem_, _impl_.service_mem_->GetCachedSize(), target, stream);
  }

  // repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_service_compute_size());
       i < n; i++) {
    const auto& repfield = this->_internal_service_compute().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mohair.ServiceConfig)
  return target;
}

::size_t ServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mohair.ServiceConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(reinterpret_cast<const void*>(this));
  // repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
  total_size += 1UL * this->_internal_downstream_services_size();
  for (const auto& msg : this->_internal_downstream_services()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
  total_size += 1UL * this->_internal_service_compute_size();
  for (const auto& msg : this->_internal_service_compute()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string service_location = 2 [json_name = "serviceLocation"];
  if (!this->_internal_service_location().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_service_location());
  }

  // optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.service_mem_);
  }

  // bool is_active = 1 [json_name = "isActive"];
  if (this->_internal_is_active() != 0) {
    total_size += 2;
  }

  // .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
  if (this->_internal_platform_class() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_platform_class());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ServiceConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ServiceConfig*>(&to_msg);
  auto& from = static_cast<const ServiceConfig&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:mohair.ServiceConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_downstream_services()->MergeFrom(
      from._internal_downstream_services());
  _this->_internal_mutable_service_compute()->MergeFrom(
      from._internal_service_compute());
  if (!from._internal_service_location().empty()) {
    _this->_internal_set_service_location(from._internal_service_location());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.service_mem_ != nullptr);
    if (_this->_impl_.service_mem_ == nullptr) {
      _this->_impl_.service_mem_ =
          ::google::protobuf::Message::CopyConstruct<::mohair::MemoryResources>(arena, *from._impl_.service_mem_);
    } else {
      _this->_impl_.service_mem_->MergeFrom(*from._impl_.service_mem_);
    }
  }
  if (from._internal_is_active() != 0) {
    _this->_impl_.is_active_ = from._impl_.is_active_;
  }
  if (from._internal_platform_class() != 0) {
    _this->_impl_.platform_class_ = from._impl_.platform_class_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceConfig::CopyFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mohair.ServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ServiceConfig::InternalSwap(ServiceConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.downstream_services_.InternalSwap(&other->_impl_.downstream_services_);
  _impl_.service_compute_.InternalSwap(&other->_impl_.service_compute_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_location_, &other->_impl_.service_location_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.platform_class_)
      + sizeof(ServiceConfig::_impl_.platform_class_)
      - PROTOBUF_FIELD_OFFSET(ServiceConfig, _impl_.service_mem_)>(
          reinterpret_cast<char*>(&_impl_.service_mem_),
          reinterpret_cast<char*>(&other->_impl_.service_mem_));
}

::google::protobuf::Metadata ServiceConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mohair
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_mohair_2ftopology_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
