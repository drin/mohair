// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: mohair/topology.proto
// Protobuf C++ Version: 5.27.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_mohair_2ftopology_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mohair_2ftopology_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mohair_2ftopology_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mohair_2ftopology_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mohair_2ftopology_2eproto;
namespace mohair {
class ComputeResources;
struct ComputeResourcesDefaultTypeInternal;
extern ComputeResourcesDefaultTypeInternal _ComputeResources_default_instance_;
class MemoryResources;
struct MemoryResourcesDefaultTypeInternal;
extern MemoryResourcesDefaultTypeInternal _MemoryResources_default_instance_;
class ServiceConfig;
struct ServiceConfigDefaultTypeInternal;
extern ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
}  // namespace mohair
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mohair {
enum DeviceClass : int {
  DEVICE_CLASS_SERVER = 0,
  DEVICE_CLASS_DRIVE = 1,
  DEVICE_CLASS_SOC = 2,
  DEVICE_CLASS_ARRAY = 3,
  DEVICE_CLASS_DPU = 4,
  DeviceClass_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeviceClass_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeviceClass_IsValid(int value);
extern const uint32_t DeviceClass_internal_data_[];
constexpr DeviceClass DeviceClass_MIN = static_cast<DeviceClass>(0);
constexpr DeviceClass DeviceClass_MAX = static_cast<DeviceClass>(4);
constexpr int DeviceClass_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
DeviceClass_descriptor();
template <typename T>
const std::string& DeviceClass_Name(T value) {
  static_assert(std::is_same<T, DeviceClass>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceClass_Name().");
  return DeviceClass_Name(static_cast<DeviceClass>(value));
}
template <>
inline const std::string& DeviceClass_Name(DeviceClass value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeviceClass_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool DeviceClass_Parse(absl::string_view name, DeviceClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceClass>(
      DeviceClass_descriptor(), name, value);
}
enum MemoryType : int {
  MEMORY_TYPE_DDR = 0,
  MEMORY_TYPE_GDDR = 1,
  MEMORY_TYPE_NVM = 2,
  MEMORY_TYPE_CXL = 3,
  MEMORY_TYPE_CAM = 4,
  MemoryType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MemoryType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MemoryType_IsValid(int value);
extern const uint32_t MemoryType_internal_data_[];
constexpr MemoryType MemoryType_MIN = static_cast<MemoryType>(0);
constexpr MemoryType MemoryType_MAX = static_cast<MemoryType>(4);
constexpr int MemoryType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
MemoryType_descriptor();
template <typename T>
const std::string& MemoryType_Name(T value) {
  static_assert(std::is_same<T, MemoryType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MemoryType_Name().");
  return MemoryType_Name(static_cast<MemoryType>(value));
}
template <>
inline const std::string& MemoryType_Name(MemoryType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MemoryType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool MemoryType_Parse(absl::string_view name, MemoryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MemoryType>(
      MemoryType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MemoryResources final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mohair.MemoryResources) */ {
 public:
  inline MemoryResources() : MemoryResources(nullptr) {}
  ~MemoryResources() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MemoryResources(
      ::google::protobuf::internal::ConstantInitialized);

  inline MemoryResources(const MemoryResources& from) : MemoryResources(nullptr, from) {}
  inline MemoryResources(MemoryResources&& from) noexcept
      : MemoryResources(nullptr, std::move(from)) {}
  inline MemoryResources& operator=(const MemoryResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryResources& operator=(MemoryResources&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryResources& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryResources* internal_default_instance() {
    return reinterpret_cast<const MemoryResources*>(
        &_MemoryResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MemoryResources& a, MemoryResources& b) { a.Swap(&b); }
  inline void Swap(MemoryResources* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryResources* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MemoryResources* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MemoryResources>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MemoryResources& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MemoryResources& from) { MemoryResources::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MemoryResources* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mohair.MemoryResources"; }

 protected:
  explicit MemoryResources(::google::protobuf::Arena* arena);
  MemoryResources(::google::protobuf::Arena* arena, const MemoryResources& from);
  MemoryResources(::google::protobuf::Arena* arena, MemoryResources&& from) noexcept
      : MemoryResources(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCountMebibytesFieldNumber = 1,
    kMemoryTypeFieldNumber = 2,
    kCountChannelsFieldNumber = 3,
    kMemoryFreqFieldNumber = 4,
  };
  // uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
  void clear_count_mebibytes() ;
  ::uint32_t count_mebibytes() const;
  void set_count_mebibytes(::uint32_t value);

  private:
  ::uint32_t _internal_count_mebibytes() const;
  void _internal_set_count_mebibytes(::uint32_t value);

  public:
  // optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
  bool has_memory_type() const;
  void clear_memory_type() ;
  ::mohair::MemoryType memory_type() const;
  void set_memory_type(::mohair::MemoryType value);

  private:
  ::mohair::MemoryType _internal_memory_type() const;
  void _internal_set_memory_type(::mohair::MemoryType value);

  public:
  // optional uint32 count_channels = 3 [json_name = "countChannels"];
  bool has_count_channels() const;
  void clear_count_channels() ;
  ::uint32_t count_channels() const;
  void set_count_channels(::uint32_t value);

  private:
  ::uint32_t _internal_count_channels() const;
  void _internal_set_count_channels(::uint32_t value);

  public:
  // optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
  bool has_memory_freq() const;
  void clear_memory_freq() ;
  ::uint32_t memory_freq() const;
  void set_memory_freq(::uint32_t value);

  private:
  ::uint32_t _internal_memory_freq() const;
  void _internal_set_memory_freq(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mohair.MemoryResources)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MemoryResources_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MemoryResources& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t count_mebibytes_;
    int memory_type_;
    ::uint32_t count_channels_;
    ::uint32_t memory_freq_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2ftopology_2eproto;
};
// -------------------------------------------------------------------

class ComputeResources final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mohair.ComputeResources) */ {
 public:
  inline ComputeResources() : ComputeResources(nullptr) {}
  ~ComputeResources() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComputeResources(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComputeResources(const ComputeResources& from) : ComputeResources(nullptr, from) {}
  inline ComputeResources(ComputeResources&& from) noexcept
      : ComputeResources(nullptr, std::move(from)) {}
  inline ComputeResources& operator=(const ComputeResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComputeResources& operator=(ComputeResources&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComputeResources& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComputeResources* internal_default_instance() {
    return reinterpret_cast<const ComputeResources*>(
        &_ComputeResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(ComputeResources& a, ComputeResources& b) { a.Swap(&b); }
  inline void Swap(ComputeResources* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComputeResources* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComputeResources* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComputeResources>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComputeResources& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComputeResources& from) { ComputeResources::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComputeResources* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mohair.ComputeResources"; }

 protected:
  explicit ComputeResources(::google::protobuf::Arena* arena);
  ComputeResources(::google::protobuf::Arena* arena, const ComputeResources& from);
  ComputeResources(::google::protobuf::Arena* arena, ComputeResources&& from) noexcept
      : ComputeResources(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCoreFreqsFieldNumber = 2,
    kCountCoresFieldNumber = 1,
  };
  // repeated float core_freqs = 2 [json_name = "coreFreqs"];
  int core_freqs_size() const;
  private:
  int _internal_core_freqs_size() const;

  public:
  void clear_core_freqs() ;
  float core_freqs(int index) const;
  void set_core_freqs(int index, float value);
  void add_core_freqs(float value);
  const ::google::protobuf::RepeatedField<float>& core_freqs() const;
  ::google::protobuf::RepeatedField<float>* mutable_core_freqs();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_core_freqs() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_core_freqs();

  public:
  // uint32 count_cores = 1 [json_name = "countCores"];
  void clear_count_cores() ;
  ::uint32_t count_cores() const;
  void set_count_cores(::uint32_t value);

  private:
  ::uint32_t _internal_count_cores() const;
  void _internal_set_count_cores(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mohair.ComputeResources)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ComputeResources_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ComputeResources& from_msg);
    ::google::protobuf::RepeatedField<float> core_freqs_;
    ::uint32_t count_cores_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2ftopology_2eproto;
};
// -------------------------------------------------------------------

class ServiceConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:mohair.ServiceConfig) */ {
 public:
  inline ServiceConfig() : ServiceConfig(nullptr) {}
  ~ServiceConfig() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServiceConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServiceConfig(const ServiceConfig& from) : ServiceConfig(nullptr, from) {}
  inline ServiceConfig(ServiceConfig&& from) noexcept
      : ServiceConfig(nullptr, std::move(from)) {}
  inline ServiceConfig& operator=(const ServiceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceConfig& operator=(ServiceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceConfig* internal_default_instance() {
    return reinterpret_cast<const ServiceConfig*>(
        &_ServiceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ServiceConfig& a, ServiceConfig& b) { a.Swap(&b); }
  inline void Swap(ServiceConfig* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServiceConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServiceConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServiceConfig& from) { ServiceConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServiceConfig* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "mohair.ServiceConfig"; }

 protected:
  explicit ServiceConfig(::google::protobuf::Arena* arena);
  ServiceConfig(::google::protobuf::Arena* arena, const ServiceConfig& from);
  ServiceConfig(::google::protobuf::Arena* arena, ServiceConfig&& from) noexcept
      : ServiceConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDownstreamServicesFieldNumber = 4,
    kServiceComputeFieldNumber = 6,
    kServiceLocationFieldNumber = 2,
    kServiceMemFieldNumber = 5,
    kIsActiveFieldNumber = 1,
    kPlatformClassFieldNumber = 3,
  };
  // repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
  int downstream_services_size() const;
  private:
  int _internal_downstream_services_size() const;

  public:
  void clear_downstream_services() ;
  ::mohair::ServiceConfig* mutable_downstream_services(int index);
  ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>* mutable_downstream_services();

  private:
  const ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>& _internal_downstream_services() const;
  ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>* _internal_mutable_downstream_services();
  public:
  const ::mohair::ServiceConfig& downstream_services(int index) const;
  ::mohair::ServiceConfig* add_downstream_services();
  const ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>& downstream_services() const;
  // repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
  int service_compute_size() const;
  private:
  int _internal_service_compute_size() const;

  public:
  void clear_service_compute() ;
  ::mohair::ComputeResources* mutable_service_compute(int index);
  ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>* mutable_service_compute();

  private:
  const ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>& _internal_service_compute() const;
  ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>* _internal_mutable_service_compute();
  public:
  const ::mohair::ComputeResources& service_compute(int index) const;
  ::mohair::ComputeResources* add_service_compute();
  const ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>& service_compute() const;
  // string service_location = 2 [json_name = "serviceLocation"];
  void clear_service_location() ;
  const std::string& service_location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_location(Arg_&& arg, Args_... args);
  std::string* mutable_service_location();
  PROTOBUF_NODISCARD std::string* release_service_location();
  void set_allocated_service_location(std::string* value);

  private:
  const std::string& _internal_service_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_location(
      const std::string& value);
  std::string* _internal_mutable_service_location();

  public:
  // optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
  bool has_service_mem() const;
  void clear_service_mem() ;
  const ::mohair::MemoryResources& service_mem() const;
  PROTOBUF_NODISCARD ::mohair::MemoryResources* release_service_mem();
  ::mohair::MemoryResources* mutable_service_mem();
  void set_allocated_service_mem(::mohair::MemoryResources* value);
  void unsafe_arena_set_allocated_service_mem(::mohair::MemoryResources* value);
  ::mohair::MemoryResources* unsafe_arena_release_service_mem();

  private:
  const ::mohair::MemoryResources& _internal_service_mem() const;
  ::mohair::MemoryResources* _internal_mutable_service_mem();

  public:
  // bool is_active = 1 [json_name = "isActive"];
  void clear_is_active() ;
  bool is_active() const;
  void set_is_active(bool value);

  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);

  public:
  // .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
  void clear_platform_class() ;
  ::mohair::DeviceClass platform_class() const;
  void set_platform_class(::mohair::DeviceClass value);

  private:
  ::mohair::DeviceClass _internal_platform_class() const;
  void _internal_set_platform_class(::mohair::DeviceClass value);

  public:
  // @@protoc_insertion_point(class_scope:mohair.ServiceConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 3,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ServiceConfig_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServiceConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::mohair::ServiceConfig > downstream_services_;
    ::google::protobuf::RepeatedPtrField< ::mohair::ComputeResources > service_compute_;
    ::google::protobuf::internal::ArenaStringPtr service_location_;
    ::mohair::MemoryResources* service_mem_;
    bool is_active_;
    int platform_class_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mohair_2ftopology_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ComputeResources

// uint32 count_cores = 1 [json_name = "countCores"];
inline void ComputeResources::clear_count_cores() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_cores_ = 0u;
}
inline ::uint32_t ComputeResources::count_cores() const {
  // @@protoc_insertion_point(field_get:mohair.ComputeResources.count_cores)
  return _internal_count_cores();
}
inline void ComputeResources::set_count_cores(::uint32_t value) {
  _internal_set_count_cores(value);
  // @@protoc_insertion_point(field_set:mohair.ComputeResources.count_cores)
}
inline ::uint32_t ComputeResources::_internal_count_cores() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_cores_;
}
inline void ComputeResources::_internal_set_count_cores(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_cores_ = value;
}

// repeated float core_freqs = 2 [json_name = "coreFreqs"];
inline int ComputeResources::_internal_core_freqs_size() const {
  return _internal_core_freqs().size();
}
inline int ComputeResources::core_freqs_size() const {
  return _internal_core_freqs_size();
}
inline void ComputeResources::clear_core_freqs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.core_freqs_.Clear();
}
inline float ComputeResources::core_freqs(int index) const {
  // @@protoc_insertion_point(field_get:mohair.ComputeResources.core_freqs)
  return _internal_core_freqs().Get(index);
}
inline void ComputeResources::set_core_freqs(int index, float value) {
  _internal_mutable_core_freqs()->Set(index, value);
  // @@protoc_insertion_point(field_set:mohair.ComputeResources.core_freqs)
}
inline void ComputeResources::add_core_freqs(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_core_freqs()->Add(value);
  // @@protoc_insertion_point(field_add:mohair.ComputeResources.core_freqs)
}
inline const ::google::protobuf::RepeatedField<float>& ComputeResources::core_freqs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mohair.ComputeResources.core_freqs)
  return _internal_core_freqs();
}
inline ::google::protobuf::RepeatedField<float>* ComputeResources::mutable_core_freqs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mohair.ComputeResources.core_freqs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_core_freqs();
}
inline const ::google::protobuf::RepeatedField<float>&
ComputeResources::_internal_core_freqs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.core_freqs_;
}
inline ::google::protobuf::RepeatedField<float>* ComputeResources::_internal_mutable_core_freqs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.core_freqs_;
}

// -------------------------------------------------------------------

// MemoryResources

// uint32 count_mebibytes = 1 [json_name = "countMebibytes"];
inline void MemoryResources::clear_count_mebibytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_mebibytes_ = 0u;
}
inline ::uint32_t MemoryResources::count_mebibytes() const {
  // @@protoc_insertion_point(field_get:mohair.MemoryResources.count_mebibytes)
  return _internal_count_mebibytes();
}
inline void MemoryResources::set_count_mebibytes(::uint32_t value) {
  _internal_set_count_mebibytes(value);
  // @@protoc_insertion_point(field_set:mohair.MemoryResources.count_mebibytes)
}
inline ::uint32_t MemoryResources::_internal_count_mebibytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_mebibytes_;
}
inline void MemoryResources::_internal_set_count_mebibytes(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_mebibytes_ = value;
}

// optional .mohair.MemoryType memory_type = 2 [json_name = "memoryType"];
inline bool MemoryResources::has_memory_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MemoryResources::clear_memory_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::mohair::MemoryType MemoryResources::memory_type() const {
  // @@protoc_insertion_point(field_get:mohair.MemoryResources.memory_type)
  return _internal_memory_type();
}
inline void MemoryResources::set_memory_type(::mohair::MemoryType value) {
  _internal_set_memory_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:mohair.MemoryResources.memory_type)
}
inline ::mohair::MemoryType MemoryResources::_internal_memory_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mohair::MemoryType>(_impl_.memory_type_);
}
inline void MemoryResources::_internal_set_memory_type(::mohair::MemoryType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_type_ = value;
}

// optional uint32 count_channels = 3 [json_name = "countChannels"];
inline bool MemoryResources::has_count_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MemoryResources::clear_count_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_channels_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t MemoryResources::count_channels() const {
  // @@protoc_insertion_point(field_get:mohair.MemoryResources.count_channels)
  return _internal_count_channels();
}
inline void MemoryResources::set_count_channels(::uint32_t value) {
  _internal_set_count_channels(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:mohair.MemoryResources.count_channels)
}
inline ::uint32_t MemoryResources::_internal_count_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.count_channels_;
}
inline void MemoryResources::_internal_set_count_channels(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.count_channels_ = value;
}

// optional uint32 memory_freq = 4 [json_name = "memoryFreq"];
inline bool MemoryResources::has_memory_freq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MemoryResources::clear_memory_freq() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_freq_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t MemoryResources::memory_freq() const {
  // @@protoc_insertion_point(field_get:mohair.MemoryResources.memory_freq)
  return _internal_memory_freq();
}
inline void MemoryResources::set_memory_freq(::uint32_t value) {
  _internal_set_memory_freq(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:mohair.MemoryResources.memory_freq)
}
inline ::uint32_t MemoryResources::_internal_memory_freq() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.memory_freq_;
}
inline void MemoryResources::_internal_set_memory_freq(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.memory_freq_ = value;
}

// -------------------------------------------------------------------

// ServiceConfig

// bool is_active = 1 [json_name = "isActive"];
inline void ServiceConfig::clear_is_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = false;
}
inline bool ServiceConfig::is_active() const {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.is_active)
  return _internal_is_active();
}
inline void ServiceConfig::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:mohair.ServiceConfig.is_active)
}
inline bool ServiceConfig::_internal_is_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_active_;
}
inline void ServiceConfig::_internal_set_is_active(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_active_ = value;
}

// string service_location = 2 [json_name = "serviceLocation"];
inline void ServiceConfig::clear_service_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_location_.ClearToEmpty();
}
inline const std::string& ServiceConfig::service_location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.service_location)
  return _internal_service_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServiceConfig::set_service_location(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mohair.ServiceConfig.service_location)
}
inline std::string* ServiceConfig::mutable_service_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service_location();
  // @@protoc_insertion_point(field_mutable:mohair.ServiceConfig.service_location)
  return _s;
}
inline const std::string& ServiceConfig::_internal_service_location() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_location_.Get();
}
inline void ServiceConfig::_internal_set_service_location(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_location_.Set(value, GetArena());
}
inline std::string* ServiceConfig::_internal_mutable_service_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.service_location_.Mutable( GetArena());
}
inline std::string* ServiceConfig::release_service_location() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mohair.ServiceConfig.service_location)
  return _impl_.service_location_.Release();
}
inline void ServiceConfig::set_allocated_service_location(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_location_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_location_.IsDefault()) {
          _impl_.service_location_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mohair.ServiceConfig.service_location)
}

// .mohair.DeviceClass platform_class = 3 [json_name = "platformClass"];
inline void ServiceConfig::clear_platform_class() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_class_ = 0;
}
inline ::mohair::DeviceClass ServiceConfig::platform_class() const {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.platform_class)
  return _internal_platform_class();
}
inline void ServiceConfig::set_platform_class(::mohair::DeviceClass value) {
  _internal_set_platform_class(value);
  // @@protoc_insertion_point(field_set:mohair.ServiceConfig.platform_class)
}
inline ::mohair::DeviceClass ServiceConfig::_internal_platform_class() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::mohair::DeviceClass>(_impl_.platform_class_);
}
inline void ServiceConfig::_internal_set_platform_class(::mohair::DeviceClass value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.platform_class_ = value;
}

// repeated .mohair.ServiceConfig downstream_services = 4 [json_name = "downstreamServices"];
inline int ServiceConfig::_internal_downstream_services_size() const {
  return _internal_downstream_services().size();
}
inline int ServiceConfig::downstream_services_size() const {
  return _internal_downstream_services_size();
}
inline void ServiceConfig::clear_downstream_services() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.downstream_services_.Clear();
}
inline ::mohair::ServiceConfig* ServiceConfig::mutable_downstream_services(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mohair.ServiceConfig.downstream_services)
  return _internal_mutable_downstream_services()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>* ServiceConfig::mutable_downstream_services()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mohair.ServiceConfig.downstream_services)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_downstream_services();
}
inline const ::mohair::ServiceConfig& ServiceConfig::downstream_services(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.downstream_services)
  return _internal_downstream_services().Get(index);
}
inline ::mohair::ServiceConfig* ServiceConfig::add_downstream_services() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mohair::ServiceConfig* _add = _internal_mutable_downstream_services()->Add();
  // @@protoc_insertion_point(field_add:mohair.ServiceConfig.downstream_services)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>& ServiceConfig::downstream_services() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mohair.ServiceConfig.downstream_services)
  return _internal_downstream_services();
}
inline const ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>&
ServiceConfig::_internal_downstream_services() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.downstream_services_;
}
inline ::google::protobuf::RepeatedPtrField<::mohair::ServiceConfig>*
ServiceConfig::_internal_mutable_downstream_services() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.downstream_services_;
}

// optional .mohair.MemoryResources service_mem = 5 [json_name = "serviceMem"];
inline bool ServiceConfig::has_service_mem() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.service_mem_ != nullptr);
  return value;
}
inline void ServiceConfig::clear_service_mem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_mem_ != nullptr) _impl_.service_mem_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mohair::MemoryResources& ServiceConfig::_internal_service_mem() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::mohair::MemoryResources* p = _impl_.service_mem_;
  return p != nullptr ? *p : reinterpret_cast<const ::mohair::MemoryResources&>(::mohair::_MemoryResources_default_instance_);
}
inline const ::mohair::MemoryResources& ServiceConfig::service_mem() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.service_mem)
  return _internal_service_mem();
}
inline void ServiceConfig::unsafe_arena_set_allocated_service_mem(::mohair::MemoryResources* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.service_mem_);
  }
  _impl_.service_mem_ = reinterpret_cast<::mohair::MemoryResources*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mohair.ServiceConfig.service_mem)
}
inline ::mohair::MemoryResources* ServiceConfig::release_service_mem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mohair::MemoryResources* released = _impl_.service_mem_;
  _impl_.service_mem_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mohair::MemoryResources* ServiceConfig::unsafe_arena_release_service_mem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:mohair.ServiceConfig.service_mem)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mohair::MemoryResources* temp = _impl_.service_mem_;
  _impl_.service_mem_ = nullptr;
  return temp;
}
inline ::mohair::MemoryResources* ServiceConfig::_internal_mutable_service_mem() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.service_mem_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::mohair::MemoryResources>(GetArena());
    _impl_.service_mem_ = reinterpret_cast<::mohair::MemoryResources*>(p);
  }
  return _impl_.service_mem_;
}
inline ::mohair::MemoryResources* ServiceConfig::mutable_service_mem() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::mohair::MemoryResources* _msg = _internal_mutable_service_mem();
  // @@protoc_insertion_point(field_mutable:mohair.ServiceConfig.service_mem)
  return _msg;
}
inline void ServiceConfig::set_allocated_service_mem(::mohair::MemoryResources* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.service_mem_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.service_mem_ = reinterpret_cast<::mohair::MemoryResources*>(value);
  // @@protoc_insertion_point(field_set_allocated:mohair.ServiceConfig.service_mem)
}

// repeated .mohair.ComputeResources service_compute = 6 [json_name = "serviceCompute"];
inline int ServiceConfig::_internal_service_compute_size() const {
  return _internal_service_compute().size();
}
inline int ServiceConfig::service_compute_size() const {
  return _internal_service_compute_size();
}
inline void ServiceConfig::clear_service_compute() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.service_compute_.Clear();
}
inline ::mohair::ComputeResources* ServiceConfig::mutable_service_compute(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mohair.ServiceConfig.service_compute)
  return _internal_mutable_service_compute()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>* ServiceConfig::mutable_service_compute()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mohair.ServiceConfig.service_compute)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_service_compute();
}
inline const ::mohair::ComputeResources& ServiceConfig::service_compute(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mohair.ServiceConfig.service_compute)
  return _internal_service_compute().Get(index);
}
inline ::mohair::ComputeResources* ServiceConfig::add_service_compute() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::mohair::ComputeResources* _add = _internal_mutable_service_compute()->Add();
  // @@protoc_insertion_point(field_add:mohair.ServiceConfig.service_compute)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>& ServiceConfig::service_compute() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mohair.ServiceConfig.service_compute)
  return _internal_service_compute();
}
inline const ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>&
ServiceConfig::_internal_service_compute() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.service_compute_;
}
inline ::google::protobuf::RepeatedPtrField<::mohair::ComputeResources>*
ServiceConfig::_internal_mutable_service_compute() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.service_compute_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mohair


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mohair::DeviceClass> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mohair::DeviceClass>() {
  return ::mohair::DeviceClass_descriptor();
}
template <>
struct is_proto_enum<::mohair::MemoryType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mohair::MemoryType>() {
  return ::mohair::MemoryType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mohair_2ftopology_2eproto_2epb_2eh
