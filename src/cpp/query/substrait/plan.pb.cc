// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/plan.proto
// Protobuf C++ Version: 5.26.1

#include "../substrait/plan.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace substrait {

inline constexpr Version::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : git_hash_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        producer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        major_number_{0u},
        minor_number_{0u},
        patch_number_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Version::Version(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;

inline constexpr PlanVersion::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        version_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PlanVersion::PlanVersion(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlanVersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanVersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanVersionDefaultTypeInternal() {}
  union {
    PlanVersion _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanVersionDefaultTypeInternal _PlanVersion_default_instance_;

inline constexpr PlanRel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : rel_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR PlanRel::PlanRel(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlanRelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanRelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanRelDefaultTypeInternal() {}
  union {
    PlanRel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanRelDefaultTypeInternal _PlanRel_default_instance_;

inline constexpr Plan::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        extension_uris_{},
        extensions_{},
        relations_{},
        expected_type_urls_{},
        advanced_extensions_{nullptr},
        version_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Plan::Plan(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDefaultTypeInternal() {}
  union {
    Plan _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDefaultTypeInternal _Plan_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2fplan_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_substrait_2fplan_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_substrait_2fplan_2eproto = nullptr;
const ::uint32_t
    TableStruct_substrait_2fplan_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_.rel_type_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.extension_uris_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.extensions_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.relations_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.advanced_extensions_),
        PROTOBUF_FIELD_OFFSET(::substrait::Plan, _impl_.expected_type_urls_),
        1,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::substrait::PlanVersion, _impl_.version_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.major_number_),
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.minor_number_),
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.patch_number_),
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.git_hash_),
        PROTOBUF_FIELD_OFFSET(::substrait::Version, _impl_.producer_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::substrait::PlanRel)},
        {11, 25, -1, sizeof(::substrait::Plan)},
        {31, 40, -1, sizeof(::substrait::PlanVersion)},
        {41, -1, -1, sizeof(::substrait::Version)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::substrait::_PlanRel_default_instance_._instance,
    &::substrait::_Plan_default_instance_._instance,
    &::substrait::_PlanVersion_default_instance_._instance,
    &::substrait::_Version_default_instance_._instance,
};
const char descriptor_table_protodef_substrait_2fplan_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\024substrait/plan.proto\022\tsubstrait\032\027subst"
    "rait/algebra.proto\032%substrait/extensions"
    "/extensions.proto\"c\n\007PlanRel\022\"\n\003rel\030\001 \001("
    "\0132\016.substrait.RelH\000R\003rel\022(\n\004root\030\002 \001(\0132\022"
    ".substrait.RelRootH\000R\004rootB\n\n\010rel_type\"\221"
    "\003\n\004Plan\022,\n\007version\030\006 \001(\0132\022.substrait.Ver"
    "sionR\007version\022O\n\016extension_uris\030\001 \003(\0132(."
    "substrait.extensions.SimpleExtensionURIR"
    "\rextensionUris\022P\n\nextensions\030\002 \003(\01320.sub"
    "strait.extensions.SimpleExtensionDeclara"
    "tionR\nextensions\0220\n\trelations\030\003 \003(\0132\022.su"
    "bstrait.PlanRelR\trelations\022X\n\023advanced_e"
    "xtensions\030\004 \001(\0132\'.substrait.extensions.A"
    "dvancedExtensionR\022advancedExtensions\022,\n\022"
    "expected_type_urls\030\005 \003(\tR\020expectedTypeUr"
    "ls\";\n\013PlanVersion\022,\n\007version\030\006 \001(\0132\022.sub"
    "strait.VersionR\007version\"\251\001\n\007Version\022!\n\014m"
    "ajor_number\030\001 \001(\rR\013majorNumber\022!\n\014minor_"
    "number\030\002 \001(\rR\013minorNumber\022!\n\014patch_numbe"
    "r\030\003 \001(\rR\013patchNumber\022\031\n\010git_hash\030\004 \001(\tR\007"
    "gitHash\022\032\n\010producer\030\005 \001(\tR\010producerB\212\001\n\r"
    "com.substraitB\tPlanProtoP\001Z*github.com/s"
    "ubstrait-io/substrait-go/proto\242\002\003SXX\252\002\tS"
    "ubstrait\312\002\tSubstrait\342\002\025Substrait\\GPBMeta"
    "data\352\002\tSubstraitb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2fplan_2eproto_deps[2] =
    {
        &::descriptor_table_substrait_2falgebra_2eproto,
        &::descriptor_table_substrait_2fextensions_2fextensions_2eproto,
};
static ::absl::once_flag descriptor_table_substrait_2fplan_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2fplan_2eproto = {
    false,
    false,
    984,
    descriptor_table_protodef_substrait_2fplan_2eproto,
    "substrait/plan.proto",
    &descriptor_table_substrait_2fplan_2eproto_once,
    descriptor_table_substrait_2fplan_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_substrait_2fplan_2eproto::offsets,
    file_level_metadata_substrait_2fplan_2eproto,
    file_level_enum_descriptors_substrait_2fplan_2eproto,
    file_level_service_descriptors_substrait_2fplan_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2fplan_2eproto_getter() {
  return &descriptor_table_substrait_2fplan_2eproto;
}
namespace substrait {
// ===================================================================

class PlanRel::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::substrait::PlanRel, _impl_._oneof_case_);
};

void PlanRel::set_allocated_rel(::substrait::Rel* rel) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_rel_type();
  if (rel) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(rel)->GetArena();
    if (message_arena != submessage_arena) {
      rel = ::google::protobuf::internal::GetOwnedMessage(message_arena, rel, submessage_arena);
    }
    set_has_rel();
    _impl_.rel_type_.rel_ = rel;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.rel)
}
void PlanRel::clear_rel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (rel_type_case() == kRel) {
    if (GetArena() == nullptr) {
      delete _impl_.rel_type_.rel_;
    }
    clear_has_rel_type();
  }
}
void PlanRel::set_allocated_root(::substrait::RelRoot* root) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_rel_type();
  if (root) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(root)->GetArena();
    if (message_arena != submessage_arena) {
      root = ::google::protobuf::internal::GetOwnedMessage(message_arena, root, submessage_arena);
    }
    set_has_root();
    _impl_.rel_type_.root_ = root;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.PlanRel.root)
}
void PlanRel::clear_root() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (rel_type_case() == kRoot) {
    if (GetArena() == nullptr) {
      delete _impl_.rel_type_.root_;
    }
    clear_has_rel_type();
  }
}
PlanRel::PlanRel(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.PlanRel)
}
inline PROTOBUF_NDEBUG_INLINE PlanRel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : rel_type_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

PlanRel::PlanRel(
    ::google::protobuf::Arena* arena,
    const PlanRel& from)
    : ::google::protobuf::Message(arena) {
  PlanRel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (rel_type_case()) {
    case REL_TYPE_NOT_SET:
      break;
      case kRel:
        _impl_.rel_type_.rel_ = ::google::protobuf::Message::CopyConstruct<::substrait::Rel>(arena, *from._impl_.rel_type_.rel_);
        break;
      case kRoot:
        _impl_.rel_type_.root_ = ::google::protobuf::Message::CopyConstruct<::substrait::RelRoot>(arena, *from._impl_.rel_type_.root_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:substrait.PlanRel)
}
inline PROTOBUF_NDEBUG_INLINE PlanRel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : rel_type_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void PlanRel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PlanRel::~PlanRel() {
  // @@protoc_insertion_point(destructor:substrait.PlanRel)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlanRel::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_rel_type()) {
    clear_rel_type();
  }
  _impl_.~Impl_();
}

void PlanRel::clear_rel_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.PlanRel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (rel_type_case()) {
    case kRel: {
      if (GetArena() == nullptr) {
        delete _impl_.rel_type_.rel_;
      }
      break;
    }
    case kRoot: {
      if (GetArena() == nullptr) {
        delete _impl_.rel_type_.root_;
      }
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REL_TYPE_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
PlanRel::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PlanRel, _impl_._cached_size_),
              false,
          },
          &PlanRel::MergeImpl,
          &PlanRel::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PlanRel::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanRel)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_rel_type();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlanRel::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> PlanRel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlanRel_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::substrait::PlanRel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .substrait.Rel rel = 1 [json_name = "rel"];
    {PROTOBUF_FIELD_OFFSET(PlanRel, _impl_.rel_type_.rel_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .substrait.RelRoot root = 2 [json_name = "root"];
    {PROTOBUF_FIELD_OFFSET(PlanRel, _impl_.rel_type_.root_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::substrait::Rel>()},
    {::_pbi::TcParser::GetTable<::substrait::RelRoot>()},
  }}, {{
  }},
};

::uint8_t* PlanRel::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanRel)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (rel_type_case()) {
    case kRel: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.rel_type_.rel_, _impl_.rel_type_.rel_->GetCachedSize(), target, stream);
      break;
    }
    case kRoot: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.rel_type_.root_, _impl_.rel_type_.root_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanRel)
  return target;
}

::size_t PlanRel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanRel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (rel_type_case()) {
    // .substrait.Rel rel = 1 [json_name = "rel"];
    case kRel: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rel_type_.rel_);
      break;
    }
    // .substrait.RelRoot root = 2 [json_name = "root"];
    case kRoot: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rel_type_.root_);
      break;
    }
    case REL_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PlanRel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlanRel*>(&to_msg);
  auto& from = static_cast<const PlanRel&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanRel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_rel_type();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kRel: {
        if (oneof_needs_init) {
          _this->_impl_.rel_type_.rel_ =
              ::google::protobuf::Message::CopyConstruct<::substrait::Rel>(arena, *from._impl_.rel_type_.rel_);
        } else {
          _this->_impl_.rel_type_.rel_->MergeFrom(from._internal_rel());
        }
        break;
      }
      case kRoot: {
        if (oneof_needs_init) {
          _this->_impl_.rel_type_.root_ =
              ::google::protobuf::Message::CopyConstruct<::substrait::RelRoot>(arena, *from._impl_.rel_type_.root_);
        } else {
          _this->_impl_.rel_type_.root_->MergeFrom(from._internal_root());
        }
        break;
      }
      case REL_TYPE_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlanRel::CopyFrom(const PlanRel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanRel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlanRel::IsInitialized() const {
  return true;
}

void PlanRel::InternalSwap(PlanRel* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.rel_type_, other->_impl_.rel_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata PlanRel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_substrait_2fplan_2eproto_getter,
                                   &descriptor_table_substrait_2fplan_2eproto_once,
                                   file_level_metadata_substrait_2fplan_2eproto[0]);
}
// ===================================================================

class Plan::_Internal {
 public:
  using HasBits = decltype(std::declval<Plan>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_);
};

void Plan::clear_extension_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extension_uris_.Clear();
}
void Plan::clear_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.extensions_.Clear();
}
void Plan::clear_advanced_extensions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.advanced_extensions_ != nullptr) _impl_.advanced_extensions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Plan::Plan(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Plan)
}
inline PROTOBUF_NDEBUG_INLINE Plan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        extension_uris_{visibility, arena, from.extension_uris_},
        extensions_{visibility, arena, from.extensions_},
        relations_{visibility, arena, from.relations_},
        expected_type_urls_{visibility, arena, from.expected_type_urls_} {}

Plan::Plan(
    ::google::protobuf::Arena* arena,
    const Plan& from)
    : ::google::protobuf::Message(arena) {
  Plan* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.advanced_extensions_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::substrait::extensions::AdvancedExtension>(
                              arena, *from._impl_.advanced_extensions_)
                        : nullptr;
  _impl_.version_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::substrait::Version>(
                              arena, *from._impl_.version_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:substrait.Plan)
}
inline PROTOBUF_NDEBUG_INLINE Plan::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        extension_uris_{visibility, arena},
        extensions_{visibility, arena},
        relations_{visibility, arena},
        expected_type_urls_{visibility, arena} {}

inline void Plan::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, advanced_extensions_),
           0,
           offsetof(Impl_, version_) -
               offsetof(Impl_, advanced_extensions_) +
               sizeof(Impl_::version_));
}
Plan::~Plan() {
  // @@protoc_insertion_point(destructor:substrait.Plan)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Plan::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.advanced_extensions_;
  delete _impl_.version_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Plan::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Plan, _impl_._cached_size_),
              false,
          },
          &Plan::MergeImpl,
          &Plan::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Plan)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_uris_.Clear();
  _impl_.extensions_.Clear();
  _impl_.relations_.Clear();
  _impl_.expected_type_urls_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.advanced_extensions_ != nullptr);
      _impl_.advanced_extensions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Plan::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 41, 2> Plan::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Plan, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Plan_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::substrait::Plan>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.extension_uris_)}},
    // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Plan, _impl_.extensions_)}},
    // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Plan, _impl_.relations_)}},
    // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 3, PROTOBUF_FIELD_OFFSET(Plan, _impl_.advanced_extensions_)}},
    // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Plan, _impl_.expected_type_urls_)}},
    // .substrait.Version version = 6 [json_name = "version"];
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 4, PROTOBUF_FIELD_OFFSET(Plan, _impl_.version_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.extension_uris_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.extensions_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.relations_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.advanced_extensions_), _Internal::kHasBitsOffset + 0, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.expected_type_urls_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .substrait.Version version = 6 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(Plan, _impl_.version_), _Internal::kHasBitsOffset + 1, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::substrait::extensions::SimpleExtensionURI>()},
    {::_pbi::TcParser::GetTable<::substrait::extensions::SimpleExtensionDeclaration>()},
    {::_pbi::TcParser::GetTable<::substrait::PlanRel>()},
    {::_pbi::TcParser::GetTable<::substrait::extensions::AdvancedExtension>()},
    {::_pbi::TcParser::GetTable<::substrait::Version>()},
  }}, {{
    "\16\0\0\0\0\22\0\0"
    "substrait.Plan"
    "expected_type_urls"
  }},
};

::uint8_t* Plan::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Plan)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_extension_uris_size());
       i < n; i++) {
    const auto& repfield = this->_internal_extension_uris().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_extensions_size());
       i < n; i++) {
    const auto& repfield = this->_internal_extensions().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_relations_size());
       i < n; i++) {
    const auto& repfield = this->_internal_relations().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.advanced_extensions_, _impl_.advanced_extensions_->GetCachedSize(), target, stream);
  }

  // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
  for (int i = 0, n = this->_internal_expected_type_urls_size(); i < n; ++i) {
    const auto& s = this->_internal_expected_type_urls().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "substrait.Plan.expected_type_urls");
    target = stream->WriteString(5, s, target);
  }

  // .substrait.Version version = 6 [json_name = "version"];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.version_, _impl_.version_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Plan)
  return target;
}

::size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Plan)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1 [json_name = "extensionUris"];
  total_size += 1UL * this->_internal_extension_uris_size();
  for (const auto& msg : this->_internal_extension_uris()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2 [json_name = "extensions"];
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->_internal_extensions()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .substrait.PlanRel relations = 3 [json_name = "relations"];
  total_size += 1UL * this->_internal_relations_size();
  for (const auto& msg : this->_internal_relations()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated string expected_type_urls = 5 [json_name = "expectedTypeUrls"];
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_expected_type_urls().size());
  for (int i = 0, n = _internal_expected_type_urls().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_expected_type_urls().Get(i));
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .substrait.extensions.AdvancedExtension advanced_extensions = 4 [json_name = "advancedExtensions"];
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.advanced_extensions_);
    }

    // .substrait.Version version = 6 [json_name = "version"];
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Plan::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Plan*>(&to_msg);
  auto& from = static_cast<const Plan&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Plan)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_extension_uris()->MergeFrom(
      from._internal_extension_uris());
  _this->_internal_mutable_extensions()->MergeFrom(
      from._internal_extensions());
  _this->_internal_mutable_relations()->MergeFrom(
      from._internal_relations());
  _this->_internal_mutable_expected_type_urls()->MergeFrom(from._internal_expected_type_urls());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.advanced_extensions_ != nullptr);
      if (_this->_impl_.advanced_extensions_ == nullptr) {
        _this->_impl_.advanced_extensions_ =
            ::google::protobuf::Message::CopyConstruct<::substrait::extensions::AdvancedExtension>(arena, *from._impl_.advanced_extensions_);
      } else {
        _this->_impl_.advanced_extensions_->MergeFrom(*from._impl_.advanced_extensions_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.version_ != nullptr);
      if (_this->_impl_.version_ == nullptr) {
        _this->_impl_.version_ =
            ::google::protobuf::Message::CopyConstruct<::substrait::Version>(arena, *from._impl_.version_);
      } else {
        _this->_impl_.version_->MergeFrom(*from._impl_.version_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.extension_uris_.InternalSwap(&other->_impl_.extension_uris_);
  _impl_.extensions_.InternalSwap(&other->_impl_.extensions_);
  _impl_.relations_.InternalSwap(&other->_impl_.relations_);
  _impl_.expected_type_urls_.InternalSwap(&other->_impl_.expected_type_urls_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plan, _impl_.version_)
      + sizeof(Plan::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(Plan, _impl_.advanced_extensions_)>(
          reinterpret_cast<char*>(&_impl_.advanced_extensions_),
          reinterpret_cast<char*>(&other->_impl_.advanced_extensions_));
}

::google::protobuf::Metadata Plan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_substrait_2fplan_2eproto_getter,
                                   &descriptor_table_substrait_2fplan_2eproto_once,
                                   file_level_metadata_substrait_2fplan_2eproto[1]);
}
// ===================================================================

class PlanVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanVersion>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_._has_bits_);
};

PlanVersion::PlanVersion(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.PlanVersion)
}
inline PROTOBUF_NDEBUG_INLINE PlanVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PlanVersion::PlanVersion(
    ::google::protobuf::Arena* arena,
    const PlanVersion& from)
    : ::google::protobuf::Message(arena) {
  PlanVersion* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::substrait::Version>(
                              arena, *from._impl_.version_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:substrait.PlanVersion)
}
inline PROTOBUF_NDEBUG_INLINE PlanVersion::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PlanVersion::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
PlanVersion::~PlanVersion() {
  // @@protoc_insertion_point(destructor:substrait.PlanVersion)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlanVersion::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.version_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
PlanVersion::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_._cached_size_),
              false,
          },
          &PlanVersion::MergeImpl,
          &PlanVersion::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void PlanVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.PlanVersion)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.version_ != nullptr);
    _impl_.version_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlanVersion::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PlanVersion::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_._has_bits_),
    0, // no _extensions_
    6, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967263,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlanVersion_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::substrait::PlanVersion>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .substrait.Version version = 6 [json_name = "version"];
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .substrait.Version version = 6 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(PlanVersion, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::substrait::Version>()},
  }}, {{
  }},
};

::uint8_t* PlanVersion::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.PlanVersion)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .substrait.Version version = 6 [json_name = "version"];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *_impl_.version_, _impl_.version_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.PlanVersion)
  return target;
}

::size_t PlanVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.PlanVersion)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .substrait.Version version = 6 [json_name = "version"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void PlanVersion::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlanVersion*>(&to_msg);
  auto& from = static_cast<const PlanVersion&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.PlanVersion)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.version_ != nullptr);
    if (_this->_impl_.version_ == nullptr) {
      _this->_impl_.version_ =
          ::google::protobuf::Message::CopyConstruct<::substrait::Version>(arena, *from._impl_.version_);
    } else {
      _this->_impl_.version_->MergeFrom(*from._impl_.version_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlanVersion::CopyFrom(const PlanVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.PlanVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlanVersion::IsInitialized() const {
  return true;
}

void PlanVersion::InternalSwap(PlanVersion* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata PlanVersion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_substrait_2fplan_2eproto_getter,
                                   &descriptor_table_substrait_2fplan_2eproto_once,
                                   file_level_metadata_substrait_2fplan_2eproto[2]);
}
// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:substrait.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : git_hash_(arena, from.git_hash_),
        producer_(arena, from.producer_),
        _cached_size_{0} {}

Version::Version(
    ::google::protobuf::Arena* arena,
    const Version& from)
    : ::google::protobuf::Message(arena) {
  Version* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, major_number_),
           offsetof(Impl_, patch_number_) -
               offsetof(Impl_, major_number_) +
               sizeof(Impl_::patch_number_));

  // @@protoc_insertion_point(copy_constructor:substrait.Version)
}
inline PROTOBUF_NDEBUG_INLINE Version::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : git_hash_(arena),
        producer_(arena),
        _cached_size_{0} {}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_number_),
           0,
           offsetof(Impl_, patch_number_) -
               offsetof(Impl_, major_number_) +
               sizeof(Impl_::patch_number_));
}
Version::~Version() {
  // @@protoc_insertion_point(destructor:substrait.Version)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.git_hash_.Destroy();
  _impl_.producer_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Version::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Version, _impl_._cached_size_),
              false,
          },
          &Version::MergeImpl,
          &Version::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.Version)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.git_hash_.ClearToEmpty();
  _impl_.producer_.ClearToEmpty();
  ::memset(&_impl_.major_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.patch_number_) -
      reinterpret_cast<char*>(&_impl_.major_number_)) + sizeof(_impl_.patch_number_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Version::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 42, 2> Version::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Version_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::substrait::Version>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 major_number = 1 [json_name = "majorNumber"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Version, _impl_.major_number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.major_number_)}},
    // uint32 minor_number = 2 [json_name = "minorNumber"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Version, _impl_.minor_number_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.minor_number_)}},
    // uint32 patch_number = 3 [json_name = "patchNumber"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Version, _impl_.patch_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_number_)}},
    // string git_hash = 4 [json_name = "gitHash"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.git_hash_)}},
    // string producer = 5 [json_name = "producer"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Version, _impl_.producer_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 major_number = 1 [json_name = "majorNumber"];
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.major_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 minor_number = 2 [json_name = "minorNumber"];
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.minor_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 patch_number = 3 [json_name = "patchNumber"];
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string git_hash = 4 [json_name = "gitHash"];
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.git_hash_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string producer = 5 [json_name = "producer"];
    {PROTOBUF_FIELD_OFFSET(Version, _impl_.producer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\0\0\0\10\10\0\0"
    "substrait.Version"
    "git_hash"
    "producer"
  }},
};

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.Version)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 major_number = 1 [json_name = "majorNumber"];
  if (this->_internal_major_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_major_number(), target);
  }

  // uint32 minor_number = 2 [json_name = "minorNumber"];
  if (this->_internal_minor_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_minor_number(), target);
  }

  // uint32 patch_number = 3 [json_name = "patchNumber"];
  if (this->_internal_patch_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_patch_number(), target);
  }

  // string git_hash = 4 [json_name = "gitHash"];
  if (!this->_internal_git_hash().empty()) {
    const std::string& _s = this->_internal_git_hash();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "substrait.Version.git_hash");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string producer = 5 [json_name = "producer"];
  if (!this->_internal_producer().empty()) {
    const std::string& _s = this->_internal_producer();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "substrait.Version.producer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string git_hash = 4 [json_name = "gitHash"];
  if (!this->_internal_git_hash().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_git_hash());
  }

  // string producer = 5 [json_name = "producer"];
  if (!this->_internal_producer().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_producer());
  }

  // uint32 major_number = 1 [json_name = "majorNumber"];
  if (this->_internal_major_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_major_number());
  }

  // uint32 minor_number = 2 [json_name = "minorNumber"];
  if (this->_internal_minor_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_minor_number());
  }

  // uint32 patch_number = 3 [json_name = "patchNumber"];
  if (this->_internal_patch_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_patch_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Version::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_git_hash().empty()) {
    _this->_internal_set_git_hash(from._internal_git_hash());
  }
  if (!from._internal_producer().empty()) {
    _this->_internal_set_producer(from._internal_producer());
  }
  if (from._internal_major_number() != 0) {
    _this->_impl_.major_number_ = from._impl_.major_number_;
  }
  if (from._internal_minor_number() != 0) {
    _this->_impl_.minor_number_ = from._impl_.minor_number_;
  }
  if (from._internal_patch_number() != 0) {
    _this->_impl_.patch_number_ = from._impl_.patch_number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.git_hash_, &other->_impl_.git_hash_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_, &other->_impl_.producer_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Version, _impl_.patch_number_)
      + sizeof(Version::_impl_.patch_number_)
      - PROTOBUF_FIELD_OFFSET(Version, _impl_.major_number_)>(
          reinterpret_cast<char*>(&_impl_.major_number_),
          reinterpret_cast<char*>(&other->_impl_.major_number_));
}

::google::protobuf::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_substrait_2fplan_2eproto_getter,
                                   &descriptor_table_substrait_2fplan_2eproto_once,
                                   file_level_metadata_substrait_2fplan_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_substrait_2fplan_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
