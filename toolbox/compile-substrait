#!/usr/bin/env python

# ------------------------------
# License

# Copyright 2023 Aldrin Montana
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# ------------------------------
# Module Docstring
"""
CLI script that compiles (generates) a substrait plan from an input query.
"""


# ------------------------------
# Dependencies

# >> Standard modules
import sys
import logging

from pathlib import Path

# >> Third-party
import pyarrow
import pandas
import ibis
import duckdb

from ibis_substrait.compiler.core import SubstraitCompiler

from mohair import AddConsoleLogHandler
from mohair import default_loglevel

from mohair.util import ArgparseBuilder


# ------------------------------
# Module variables

# >> Logging
logger = logging.getLogger(__name__)
logger.setLevel(default_loglevel)
AddConsoleLogHandler(logger)

# >> Default variables
example_fpath = Path('resources') / 'examples' / 'average-expression.substrait'


# ------------------------------
# Parse command-line arguments first

# TODO
# add this as a mutual exclusive group with input file
# .add_query_arg(
#       required=False
#      ,help_str='SQL query to compile. Assumes "duckdb" dialect.'
#  )

parsed_args, parsed_extra_args = (
    ArgparseBuilder.with_description('Compile substrait from a query')
                   .add_input_file_arg(
                         required=True
                        ,help_str='Path to input file containing query.'
                    )
                   .add_output_file_arg(
                         required=True
                        ,help_str='Path to file to write serialized substrait plan.'
                    )
                   .add_query_dialect_arg(
                         required=True
                        ,help_str='Dialect of input query (used to select compiler).'
                    )
                   .add_db_file_arg(
                         required=True
                        ,help_str='Path to duckdb database file. Required for now.'
                    )
                   .parse_args()
)


# ------------------------------
# Functions
def CompileIbis():
    # TODO: be able to take python that uses ibis and eval (execute) it
    sys.exit('Ibis not yet supported through this interface.')
    return

def CompileDuckdb():
    # connect to the duckdb database
    db_conn = duckdb.connect(parsed_args.db_file)

    # prep the substrait extension
    db_conn.install_extension('substrait')
    db_conn.load_extension('substrait')

    with open(parsed_args.input_file, 'r') as query_fh:
        input_query = query_fh.read()

    substrait_msg = db_conn.get_substrait(query=input_query).fetchone()[0]
    with open(parsed_args.output_file, 'wb') as substrait_fh:
        substrait_fh.write(substrait_msg)

    return


# ------------------------------
# Main logic

if __name__ == '__main__':
    # For now, just do duckdb queries
    CompileDuckdb()
