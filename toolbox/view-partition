#!/usr/bin/env python

# ------------------------------
# License

# Copyright 2024 Aldrin Montana
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ------------------------------
# Overview
"""
A way to view files with IPC-formatted binary data, like `less`
"""


# ------------------------------
# Dependencies

# >> Standard modules
import os
import sys

# >> Standard classes
from pathlib import Path

# >> Internal classes
from mohair.util            import ArgparseBuilder
from mohair.query.relations import ( SkyDomain
                                    ,SkyPartition
                                    ,SkyPartitionMeta
                                    ,SkyPartitionSlice)

# >> Internal functions
from mohair.util import TableFromBinary, SchemaFromBinary

# ------------------------------
# Parse CLI arguments first
if __name__ == '__main__':
    parsed_args, extra_args = (
        ArgparseBuilder.with_description('View a skytether partition')
                       .add_skytether_domain_arg(required=True)
                       .add_skytether_partition_arg(required=True)
                       .add_input_dir_arg(
                            required=True
                           ,help_str='Path to directory containing source domain'
                        )
                       .parse_args()
    )


# ------------------------------
# Main logic

if __name__ == '__main__':
    # Initialize domain and partitions
    sky_domain = SkyDomain(parsed_args.domain_key)
    sky_partitions = [
        sky_domain.PartitionFor(partition_key)
        for partition_key in parsed_args.partition_keys
    ]

    # Read partitions into memory
    for sky_partition in sky_partitions:
        pmeta_fpath = Path(parsed_args.input_dir) / sky_partition.name()

        with pmeta_fpath.open('rb') as pmeta_handle:
            partition_schema = SchemaFromBinary(pmeta_handle.read())

        sky_partition.SetSchema(partition_schema)
        print(str(sky_partition.meta))

        for slice_ndx in range(sky_partition.meta.slice_count):
            pdata_fpath = Path(f'{pmeta_fpath}-{slice_ndx}')
            print(f'Reading slice [{slice_ndx}]: {pdata_fpath}')

            with pdata_fpath.open('rb') as pdata_handle:
                pdata = TableFromBinary(pdata_handle.read())

            sky_partition.SetData(slice_ndx, pdata)

        count_slices = sky_partition.meta.slice_count
        print(f'Partition [{sky_partition.name()}| ({count_slices}) slices]:')

        for pslice in sky_partition.slices:
            print(f'\t[#{pslice.slice_index}] (pslice.num_rows(), pslice.num_columns())')
            print(pslice.data)

